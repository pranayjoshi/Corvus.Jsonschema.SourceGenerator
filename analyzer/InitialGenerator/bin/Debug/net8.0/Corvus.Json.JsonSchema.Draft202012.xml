<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Corvus.Json.JsonSchema.Draft202012</name>
    </assembly>
    <members>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Applicator">
            <summary>
            Applicator vocabulary meta-schema
            </summary>
            <summary>
            Applicator vocabulary meta-schema
            </summary>
            <summary>
            Applicator vocabulary meta-schema
            </summary>
            <summary>
            Applicator vocabulary meta-schema
            </summary>
            <summary>
            Applicator vocabulary meta-schema
            </summary>
            <summary>
            Applicator vocabulary meta-schema
            </summary>
            <summary>
            Applicator vocabulary meta-schema
            </summary>
            <summary>
            Applicator vocabulary meta-schema
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.Applicator">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.Applicator">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Applicator)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Applicator">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Applicator@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.op_Equality(Corvus.Json.JsonSchema.Draft202012.Applicator@,Corvus.Json.JsonSchema.Draft202012.Applicator@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Applicator@,Corvus.Json.JsonSchema.Draft202012.Applicator@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Applicator.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Applicator.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Applicator.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Applicator.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Applicator.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Applicator.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Applicator.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Applicator.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Applicator.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Applicator.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Equals(Corvus.Json.JsonSchema.Draft202012.Applicator@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetDefault(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetDefault(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetDefault(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetDefault(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasDefault(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasDefault(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasDefault(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasDefault(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity@,Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity@,Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentSchemasEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentSchemasEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentSchemasEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentSchemasEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentSchemasEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentSchemasEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentSchemasEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentSchemasEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentSchemasEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentSchemasEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#DependentSchemasEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Applicator">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity@,Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity@,Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity@,Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity@,Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity#PropertyNamesEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertyNamesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertyNamesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity#PropertyNamesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertyNamesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity#PropertyNamesEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertyNamesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PatternPropertiesEntity#PropertyNamesEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertyNamesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertyNamesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertyNamesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertyNamesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertyNamesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertyNamesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.op_Implicit(System.String)~Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity">
            <summary>
            Conversion from string.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type PropertyNamesEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type PropertyNamesEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type PropertyNamesEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type PropertyNamesEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type PropertyNamesEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type PropertyNamesEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type PropertyNamesEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <typeparam name = "T8">The type of the eighth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <param name = "eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.PropertyNamesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AdditionalPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AdditionalProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AdditionalProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AdditionalProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AllOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AllOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AllOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AllOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AnyOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AnyOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AnyOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.AnyOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.ContainsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Contains"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Contains">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Contains"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.DependentSchemasUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.DependentSchemas"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.DependentSchemas">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.DependentSchemas"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.ElseUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Else"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Else">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Else"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.IfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.If"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.If">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.If"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.ItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Items"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Items">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Items"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.NotUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Not"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Not">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Not"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.OneOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.OneOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.OneOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.OneOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PatternPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PatternProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PatternProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PatternProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PrefixItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PrefixItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PrefixItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PrefixItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Properties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Properties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Properties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PropertyNamesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PropertyNames"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PropertyNames">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.PropertyNames"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.ThenUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Then"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Then">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Applicator.JsonPropertyNames.Then"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.AdditionalProperties">
            <summary>
            Gets the (optional) <c>additionalProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.AllOf">
            <summary>
            Gets the (optional) <c>allOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.AnyOf">
            <summary>
            Gets the (optional) <c>anyOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Contains">
            <summary>
            Gets the (optional) <c>contains</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemas">
            <summary>
            Gets the (optional) <c>dependentSchemas</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Else">
            <summary>
            Gets the (optional) <c>else</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.If">
            <summary>
            Gets the (optional) <c>if</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Items">
            <summary>
            Gets the (optional) <c>items</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Not">
            <summary>
            Gets the (optional) <c>not</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.OneOf">
            <summary>
            Gets the (optional) <c>oneOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PatternProperties">
            <summary>
            Gets the (optional) <c>patternProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PrefixItems">
            <summary>
            Gets the (optional) <c>prefixItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Properties">
            <summary>
            Gets the (optional) <c>properties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertyNames">
            <summary>
            Gets the (optional) <c>propertyNames</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.Then">
            <summary>
            Gets the (optional) <c>then</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Create(System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithAdditionalProperties(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets additionalProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithAllOf(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Sets allOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithAnyOf(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Sets anyOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithContains(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets contains.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithDependentSchemas(Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity@)">
            <summary>
            Sets dependentSchemas.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithElse(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets else.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithIf(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets if.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithItems(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets items.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithNot(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets not.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithOneOf(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Sets oneOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithPatternProperties(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity@)">
            <summary>
            Sets patternProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithPrefixItems(Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray@)">
            <summary>
            Sets prefixItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithProperties(Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity@)">
            <summary>
            Sets properties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithPropertyNames(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets propertyNames.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.WithThen(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets then.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity@,Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity@,Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Applicator#PropertiesEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Add(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Add an item to the array.
            </summary>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Add(Corvus.Json.JsonSchema.Draft202012.Schema[])">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Insert(System.Int32,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Insert an item into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the item.</param>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the items.</param>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Replace(Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Replace the first instance of the given value with the new value, even if the items are identical.
            </summary>
            <param name = "oldValue">The item to remove.</param>
            <param name = "newValue">The item to insert.</param>
            <returns>An instance of the array with the item replaced.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.SetItem(System.Int32,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Set the item at the given index.
            </summary>
            <param name = "index">The index at which to set the item.</param>
            <param name = "value">The value to set.</param>
            <returns>An instance of the array with the item set to the given value.</returns>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name = "index">The index at which to retrieve the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Create(System.ReadOnlySpan{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Schema[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonSchema#Draft202012#Schema}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonSchema#Draft202012#Schema}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Remove(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Remove the specified item from the array.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.op_Equality(Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray@,Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray@,Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Applicator#SchemaArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Equals(Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Applicator.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Content">
            <summary>
            Content vocabulary meta-schema
            </summary>
            <summary>
            Content vocabulary meta-schema
            </summary>
            <summary>
            Content vocabulary meta-schema
            </summary>
            <summary>
            Content vocabulary meta-schema
            </summary>
            <summary>
            Content vocabulary meta-schema
            </summary>
            <summary>
            Content vocabulary meta-schema
            </summary>
            <summary>
            Content vocabulary meta-schema
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.Content">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.Content">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Content)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Content">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Content@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.op_Equality(Corvus.Json.JsonSchema.Draft202012.Content@,Corvus.Json.JsonSchema.Draft202012.Content@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Content@,Corvus.Json.JsonSchema.Draft202012.Content@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Content.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Content}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Content.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Content}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Content.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Content}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Content.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Content.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Content.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Content.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Content.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Content.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Content.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Equals(Corvus.Json.JsonSchema.Draft202012.Content@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Content">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentEncodingUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentEncoding"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentEncoding">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentEncoding"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentMediaTypeUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentMediaType"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentMediaType">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentMediaType"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentSchemaUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentSchema"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentSchema">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Content.JsonPropertyNames.ContentSchema"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.ContentEncoding">
            <summary>
            Gets the (optional) <c>contentEncoding</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.ContentMediaType">
            <summary>
            Gets the (optional) <c>contentMediaType</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Content.ContentSchema">
            <summary>
            Gets the (optional) <c>contentSchema</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Create(System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.WithContentEncoding(Corvus.Json.JsonString@)">
            <summary>
            Sets contentEncoding.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.WithContentMediaType(Corvus.Json.JsonString@)">
            <summary>
            Sets contentMediaType.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.WithContentSchema(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets contentSchema.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Content.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Core">
            <summary>
            Core vocabulary meta-schema
            </summary>
            <summary>
            Core vocabulary meta-schema
            </summary>
            <summary>
            Core vocabulary meta-schema
            </summary>
            <summary>
            Core vocabulary meta-schema
            </summary>
            <summary>
            Core vocabulary meta-schema
            </summary>
            <summary>
            Core vocabulary meta-schema
            </summary>
            <summary>
            Core vocabulary meta-schema
            </summary>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Core.AnchorString">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.op_Equality(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@,Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@,Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#AnchorString}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AnchorString.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AnchorString.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#AnchorString}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AnchorString.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#AnchorString}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AnchorString.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#AnchorString}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AnchorString.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AnchorString.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AnchorString.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AnchorString.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AnchorString.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AnchorString.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Equals(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.op_Implicit(System.String)~Corvus.Json.JsonSchema.Draft202012.Core.AnchorString">
            <summary>
            Conversion from string.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonSchema.Draft202012.Core.AnchorString">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type AnchorString.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type AnchorString.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type AnchorString.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type AnchorString.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type AnchorString.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type AnchorString.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type AnchorString.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <typeparam name = "T8">The type of the eighth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <param name = "eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AnchorString.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.Core">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.Core">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Core)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Core">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Core@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.op_Equality(Corvus.Json.JsonSchema.Draft202012.Core@,Corvus.Json.JsonSchema.Draft202012.Core@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Core@,Corvus.Json.JsonSchema.Draft202012.Core@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Core.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Core.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Core.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Core.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Core.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Core.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Core.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Core.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Core.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Core.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Equals(Corvus.Json.JsonSchema.Draft202012.Core@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity@,Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity@,Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#DefsEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.IsJsonUriReference">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonUriReference"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.TryGetAsJsonUriReference(Corvus.Json.JsonUriReference@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonUriReference"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Core.IdEntity)~Corvus.Json.JsonUriReference">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonUriReference"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Explicit(Corvus.Json.JsonUriReference)~Corvus.Json.JsonSchema.Draft202012.Core.IdEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonUriReference"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Core.IdEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Core.IdEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Core.IdEntity@,Corvus.Json.JsonSchema.Draft202012.Core.IdEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Core.IdEntity@,Corvus.Json.JsonSchema.Draft202012.Core.IdEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#IdEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be IdEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be IdEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#IdEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be IdEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#IdEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be IdEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#IdEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be IdEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a IdEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a IdEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a IdEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a IdEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a IdEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Core.IdEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Implicit(System.String)~Corvus.Json.JsonSchema.Draft202012.Core.IdEntity">
            <summary>
            Conversion from string.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonSchema.Draft202012.Core.IdEntity">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Core.IdEntity)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type IdEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type IdEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type IdEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type IdEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type IdEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type IdEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type IdEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <typeparam name = "T8">The type of the eighth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <param name = "eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.IdEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Core">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.AnchorUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Anchor"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Anchor">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Anchor"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.CommentUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Comment"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Comment">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Comment"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DefsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Defs"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Defs">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Defs"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DynamicAnchorUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DynamicAnchor"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DynamicAnchor">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DynamicAnchor"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DynamicRefUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DynamicRef"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DynamicRef">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.DynamicRef"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.IdUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Id"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Id">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Id"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.RefUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Ref"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Ref">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Ref"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.SchemaUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Schema"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Schema">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Schema"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.VocabularyUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Vocabulary"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Vocabulary">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Core.JsonPropertyNames.Vocabulary"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Anchor">
            <summary>
            Gets the (optional) <c>$anchor</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Comment">
            <summary>
            Gets the (optional) <c>$comment</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Defs">
            <summary>
            Gets the (optional) <c>$defs</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DynamicAnchor">
            <summary>
            Gets the (optional) <c>$dynamicAnchor</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.DynamicRef">
            <summary>
            Gets the (optional) <c>$dynamicRef</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Id">
            <summary>
            Gets the (optional) <c>$id</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Ref">
            <summary>
            Gets the (optional) <c>$ref</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Schema">
            <summary>
            Gets the (optional) <c>$schema</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.Vocabulary">
            <summary>
            Gets the (optional) <c>$vocabulary</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Create(System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.AnchorString},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.AnchorString},System.Nullable{Corvus.Json.JsonUriReference},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.IdEntity},System.Nullable{Corvus.Json.JsonUriReference},System.Nullable{Corvus.Json.JsonUri},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithAnchor(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)">
            <summary>
            Sets $anchor.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithComment(Corvus.Json.JsonString@)">
            <summary>
            Sets $comment.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithDefs(Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity@)">
            <summary>
            Sets $defs.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithDynamicAnchor(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)">
            <summary>
            Sets $dynamicAnchor.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithDynamicRef(Corvus.Json.JsonUriReference@)">
            <summary>
            Sets $dynamicRef.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithId(Corvus.Json.JsonSchema.Draft202012.Core.IdEntity@)">
            <summary>
            Sets $id.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithRef(Corvus.Json.JsonUriReference@)">
            <summary>
            Sets $ref.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithSchema(Corvus.Json.JsonUri@)">
            <summary>
            Sets $schema.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.WithVocabulary(Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity@)">
            <summary>
            Sets $vocabulary.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity@,Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity@,Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be VocabularyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be VocabularyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be VocabularyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be VocabularyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be VocabularyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a VocabularyEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a VocabularyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a VocabularyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a VocabularyEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a VocabularyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonBoolean}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonBoolean}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonBoolean}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonBoolean}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonBoolean})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonBoolean}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Core#VocabularyEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonBoolean@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.TryGetProperty(System.String,Corvus.Json.JsonBoolean@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonBoolean@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonBoolean@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonBoolean@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonBoolean}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonBoolean}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonBoolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonBoolean}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation">
            <summary>
            Format vocabulary meta-schema for annotation results
            </summary>
            <summary>
            Format vocabulary meta-schema for annotation results
            </summary>
            <summary>
            Format vocabulary meta-schema for annotation results
            </summary>
            <summary>
            Format vocabulary meta-schema for annotation results
            </summary>
            <summary>
            Format vocabulary meta-schema for annotation results
            </summary>
            <summary>
            Format vocabulary meta-schema for annotation results
            </summary>
            <summary>
            Format vocabulary meta-schema for annotation results
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.FormatAnnotation">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.FormatAnnotation">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.op_Implicit(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.FormatAnnotation">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.op_Implicit(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.op_Equality(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation@,Corvus.Json.JsonSchema.Draft202012.FormatAnnotation@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.op_Inequality(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation@,Corvus.Json.JsonSchema.Draft202012.FormatAnnotation@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be FormatAnnotation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#FormatAnnotation}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be FormatAnnotation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#FormatAnnotation}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be FormatAnnotation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#FormatAnnotation}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be FormatAnnotation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be FormatAnnotation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a FormatAnnotation.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a FormatAnnotation.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a FormatAnnotation.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a FormatAnnotation.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a FormatAnnotation.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Equals(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.FormatAnnotation">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.JsonPropertyNames.FormatUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.JsonPropertyNames.Format"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.JsonPropertyNames.Format">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.JsonPropertyNames.Format"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Format">
            <summary>
            Gets the (optional) <c>format</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Create(System.Nullable{Corvus.Json.JsonString})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.WithFormat(Corvus.Json.JsonString@)">
            <summary>
            Sets format.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.MetaData">
            <summary>
            Meta-data vocabulary meta-schema
            </summary>
            <summary>
            Meta-data vocabulary meta-schema
            </summary>
            <summary>
            Meta-data vocabulary meta-schema
            </summary>
            <summary>
            Meta-data vocabulary meta-schema
            </summary>
            <summary>
            Meta-data vocabulary meta-schema
            </summary>
            <summary>
            Meta-data vocabulary meta-schema
            </summary>
            <summary>
            Meta-data vocabulary meta-schema
            </summary>
            <summary>
            Meta-data vocabulary meta-schema
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.MetaData">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.MetaData">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.MetaData">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.op_Equality(Corvus.Json.JsonSchema.Draft202012.MetaData@,Corvus.Json.JsonSchema.Draft202012.MetaData@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.op_Inequality(Corvus.Json.JsonSchema.Draft202012.MetaData@,Corvus.Json.JsonSchema.Draft202012.MetaData@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MetaData.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MetaData.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MetaData.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MetaData.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MetaData.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MetaData.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MetaData.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MetaData.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MetaData.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MetaData.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Equals(Corvus.Json.JsonSchema.Draft202012.MetaData@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetDefault(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetDefault(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetDefault(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetDefault(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasDefault(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasDefault(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasDefault(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasDefault(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity@,Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity@,Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DeprecatedEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#DeprecatedEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DeprecatedEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#DeprecatedEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DeprecatedEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#DeprecatedEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DeprecatedEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#DeprecatedEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DeprecatedEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DeprecatedEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DeprecatedEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DeprecatedEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DeprecatedEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DeprecatedEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Equals(Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.op_Equality(Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray@,Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.op_Inequality(Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray@,Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#JsonAnyArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#JsonAnyArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#JsonAnyArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#JsonAnyArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Equals(Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.MetaData">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.DefaultUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Default"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Default">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Default"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.DeprecatedUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Deprecated"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Deprecated">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Deprecated"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.DescriptionUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Description"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Description">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Description"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.ExamplesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Examples"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Examples">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Examples"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.ReadOnlyUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.ReadOnly"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.ReadOnly">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.ReadOnly"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.TitleUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Title"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Title">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.Title"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.WriteOnlyUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.WriteOnly"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.WriteOnly">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.MetaData.JsonPropertyNames.WriteOnly"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Default">
            <summary>
            Gets the (optional) <c>default</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Deprecated">
            <summary>
            Gets the (optional) <c>deprecated</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Description">
            <summary>
            Gets the (optional) <c>description</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Examples">
            <summary>
            Gets the (optional) <c>examples</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnly">
            <summary>
            Gets the (optional) <c>readOnly</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.Title">
            <summary>
            Gets the (optional) <c>title</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnly">
            <summary>
            Gets the (optional) <c>writeOnly</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Create(System.Nullable{Corvus.Json.JsonAny},System.Nullable{Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WithDefault(Corvus.Json.JsonAny@)">
            <summary>
            Sets default.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WithDeprecated(Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity@)">
            <summary>
            Sets deprecated.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WithDescription(Corvus.Json.JsonString@)">
            <summary>
            Sets description.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WithExamples(Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray@)">
            <summary>
            Sets examples.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WithReadOnly(Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity@)">
            <summary>
            Sets readOnly.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WithTitle(Corvus.Json.JsonString@)">
            <summary>
            Sets title.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WithWriteOnly(Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity@)">
            <summary>
            Sets writeOnly.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity@,Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity@,Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ReadOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#ReadOnlyEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ReadOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#ReadOnlyEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ReadOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#ReadOnlyEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ReadOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#ReadOnlyEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ReadOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ReadOnlyEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ReadOnlyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ReadOnlyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ReadOnlyEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ReadOnlyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Equals(Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity@,Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity@,Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be WriteOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#WriteOnlyEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be WriteOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#WriteOnlyEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be WriteOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#WriteOnlyEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be WriteOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#MetaData#WriteOnlyEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be WriteOnlyEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a WriteOnlyEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a WriteOnlyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a WriteOnlyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a WriteOnlyEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a WriteOnlyEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Equals(Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
            <summary>
            Core and Validation specifications meta-schema
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsCore">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.IsCore">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetAsCore(Corvus.Json.JsonSchema.Draft202012.Core@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsApplicator">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.IsApplicator">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetAsApplicator(Corvus.Json.JsonSchema.Draft202012.Applicator@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsUnevaluated">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.IsUnevaluated">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetAsUnevaluated(Corvus.Json.JsonSchema.Draft202012.Unevaluated@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsValidation">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.IsValidation">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetAsValidation(Corvus.Json.JsonSchema.Draft202012.Validation@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsMetaData">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.IsMetaData">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetAsMetaData(Corvus.Json.JsonSchema.Draft202012.MetaData@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsFormatAnnotation">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.IsFormatAnnotation">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetAsFormatAnnotation(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsContent">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.IsContent">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetAsContent(Corvus.Json.JsonSchema.Draft202012.Content@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema)~Corvus.Json.JsonSchema.Draft202012.Core">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Core)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema)~Corvus.Json.JsonSchema.Draft202012.Applicator">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Applicator)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema)~Corvus.Json.JsonSchema.Draft202012.Unevaluated">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Unevaluated)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema)~Corvus.Json.JsonSchema.Draft202012.Validation">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema)~Corvus.Json.JsonSchema.Draft202012.MetaData">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Explicit(Corvus.Json.JsonSchema.Draft202012.MetaData)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema)~Corvus.Json.JsonSchema.Draft202012.FormatAnnotation">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Explicit(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema)~Corvus.Json.JsonSchema.Draft202012.Content">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Content)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Equality(Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Equals(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetDefault(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetDefault(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetDefault(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetDefault(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasDefault(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasDefault(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasDefault(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasDefault(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity@,Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity@,Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DefinitionsEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Match``2(``0@,Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Schema,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Validation.StringArray,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity,``0,``1})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Match``1(Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Schema,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Validation.StringArray,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity,``0})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsSchema">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.IsSchema">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetAsSchema(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsStringArray">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.IsStringArray">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetAsStringArray(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Schema)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.Core">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Core)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Core"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.Applicator">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Applicator)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.Unevaluated">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Unevaluated)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.Validation">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.MetaData">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.MetaData)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.FormatAnnotation">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.Content">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Content)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Content"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft202012.Validation.StringArray">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity@,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity@,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Schema#DependenciesEntity#AdditionalPropertiesEntity}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Schema">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AdditionalPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AdditionalProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AdditionalProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AdditionalProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AllOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AllOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AllOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AllOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AnchorUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Anchor"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Anchor">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Anchor"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AnyOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AnyOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AnyOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.AnyOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.CommentUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Comment"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Comment">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Comment"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ConstUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Const"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Const">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Const"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContainsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Contains"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Contains">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Contains"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentEncodingUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentEncoding"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentEncoding">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentEncoding"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentMediaTypeUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentMediaType"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentMediaType">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentMediaType"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentSchemaUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentSchema"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentSchema">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ContentSchema"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DefaultUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Default"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Default">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Default"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DefinitionsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Definitions"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Definitions">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Definitions"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DefsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Defs"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Defs">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Defs"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependenciesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Dependencies"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Dependencies">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Dependencies"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependentRequiredUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependentRequired"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependentRequired">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependentRequired"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependentSchemasUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependentSchemas"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependentSchemas">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DependentSchemas"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DeprecatedUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Deprecated"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Deprecated">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Deprecated"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DescriptionUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Description"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Description">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Description"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DynamicAnchorUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DynamicAnchor"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DynamicAnchor">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DynamicAnchor"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DynamicRefUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DynamicRef"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DynamicRef">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.DynamicRef"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ElseUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Else"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Else">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Else"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.EnumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Enum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Enum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Enum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExamplesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Examples"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Examples">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Examples"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExclusiveMaximumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExclusiveMaximum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExclusiveMaximum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExclusiveMaximum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExclusiveMinimumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExclusiveMinimum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExclusiveMinimum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ExclusiveMinimum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.FormatUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Format"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Format">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Format"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.IdUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Id"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Id">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Id"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.IfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.If"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.If">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.If"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Items"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Items">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Items"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxContainsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxContains"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxContains">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxContains"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaximumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Maximum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Maximum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Maximum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxLengthUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxLength"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxLength">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxLength"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MaxProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinContainsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinContains"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinContains">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinContains"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinimumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Minimum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Minimum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Minimum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinLengthUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinLength"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinLength">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinLength"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MinProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MultipleOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MultipleOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MultipleOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.MultipleOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.NotUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Not"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Not">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Not"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.OneOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.OneOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.OneOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.OneOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PatternUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Pattern"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Pattern">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Pattern"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PatternPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PatternProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PatternProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PatternProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PrefixItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PrefixItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PrefixItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PrefixItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Properties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Properties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Properties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PropertyNamesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PropertyNames"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PropertyNames">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.PropertyNames"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ReadOnlyUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ReadOnly"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ReadOnly">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ReadOnly"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RecursiveAnchorUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RecursiveAnchor"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RecursiveAnchor">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RecursiveAnchor"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RecursiveRefUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RecursiveRef"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RecursiveRef">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RecursiveRef"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RefUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Ref"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Ref">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Ref"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.RequiredUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Required"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Required">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Required"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.SchemaValueUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.SchemaValue"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.SchemaValue">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.SchemaValue"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.ThenUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Then"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Then">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Then"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.TitleUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Title"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Title">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Title"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.TypeUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Type"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Type">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Type"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UnevaluatedItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UnevaluatedItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UnevaluatedItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UnevaluatedItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UnevaluatedPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UnevaluatedProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UnevaluatedProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UnevaluatedProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UniqueItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UniqueItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UniqueItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.UniqueItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.VocabularyUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Vocabulary"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Vocabulary">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.Vocabulary"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.WriteOnlyUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.WriteOnly"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.WriteOnly">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Schema.JsonPropertyNames.WriteOnly"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AdditionalProperties">
            <summary>
            Gets the (optional) <c>additionalProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AllOf">
            <summary>
            Gets the (optional) <c>allOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Anchor">
            <summary>
            Gets the (optional) <c>$anchor</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.AnyOf">
            <summary>
            Gets the (optional) <c>anyOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Comment">
            <summary>
            Gets the (optional) <c>$comment</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Const">
            <summary>
            Gets the (optional) <c>const</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Contains">
            <summary>
            Gets the (optional) <c>contains</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.ContentEncoding">
            <summary>
            Gets the (optional) <c>contentEncoding</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.ContentMediaType">
            <summary>
            Gets the (optional) <c>contentMediaType</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.ContentSchema">
            <summary>
            Gets the (optional) <c>contentSchema</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Default">
            <summary>
            Gets the (optional) <c>default</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Definitions">
            <summary>
            Gets the (optional) <c>definitions</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Defs">
            <summary>
            Gets the (optional) <c>$defs</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Dependencies">
            <summary>
            Gets the (optional) <c>dependencies</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependentRequired">
            <summary>
            Gets the (optional) <c>dependentRequired</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DependentSchemas">
            <summary>
            Gets the (optional) <c>dependentSchemas</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Deprecated">
            <summary>
            Gets the (optional) <c>deprecated</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Description">
            <summary>
            Gets the (optional) <c>description</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DynamicAnchor">
            <summary>
            Gets the (optional) <c>$dynamicAnchor</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.DynamicRef">
            <summary>
            Gets the (optional) <c>$dynamicRef</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Else">
            <summary>
            Gets the (optional) <c>else</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Enum">
            <summary>
            Gets the (optional) <c>enum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Examples">
            <summary>
            Gets the (optional) <c>examples</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.ExclusiveMaximum">
            <summary>
            Gets the (optional) <c>exclusiveMaximum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.ExclusiveMinimum">
            <summary>
            Gets the (optional) <c>exclusiveMinimum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Format">
            <summary>
            Gets the (optional) <c>format</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Id">
            <summary>
            Gets the (optional) <c>$id</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.If">
            <summary>
            Gets the (optional) <c>if</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Items">
            <summary>
            Gets the (optional) <c>items</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MaxContains">
            <summary>
            Gets the (optional) <c>maxContains</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Maximum">
            <summary>
            Gets the (optional) <c>maximum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MaxItems">
            <summary>
            Gets the (optional) <c>maxItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MaxLength">
            <summary>
            Gets the (optional) <c>maxLength</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MaxProperties">
            <summary>
            Gets the (optional) <c>maxProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MinContains">
            <summary>
            Gets the (optional) <c>minContains</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Minimum">
            <summary>
            Gets the (optional) <c>minimum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MinItems">
            <summary>
            Gets the (optional) <c>minItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MinLength">
            <summary>
            Gets the (optional) <c>minLength</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MinProperties">
            <summary>
            Gets the (optional) <c>minProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.MultipleOf">
            <summary>
            Gets the (optional) <c>multipleOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Not">
            <summary>
            Gets the (optional) <c>not</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.OneOf">
            <summary>
            Gets the (optional) <c>oneOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Pattern">
            <summary>
            Gets the (optional) <c>pattern</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.PatternProperties">
            <summary>
            Gets the (optional) <c>patternProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.PrefixItems">
            <summary>
            Gets the (optional) <c>prefixItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Properties">
            <summary>
            Gets the (optional) <c>properties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.PropertyNames">
            <summary>
            Gets the (optional) <c>propertyNames</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.ReadOnly">
            <summary>
            Gets the (optional) <c>readOnly</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.RecursiveAnchor">
            <summary>
            Gets the (optional) <c>$recursiveAnchor</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.RecursiveRef">
            <summary>
            Gets the (optional) <c>$recursiveRef</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Ref">
            <summary>
            Gets the (optional) <c>$ref</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Required">
            <summary>
            Gets the (optional) <c>required</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaValue">
            <summary>
            Gets the (optional) <c>$schema</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Then">
            <summary>
            Gets the (optional) <c>then</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Title">
            <summary>
            Gets the (optional) <c>title</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Type">
            <summary>
            Gets the (optional) <c>type</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.UnevaluatedItems">
            <summary>
            Gets the (optional) <c>unevaluatedItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.UnevaluatedProperties">
            <summary>
            Gets the (optional) <c>unevaluatedProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.UniqueItems">
            <summary>
            Gets the (optional) <c>uniqueItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.Vocabulary">
            <summary>
            Gets the (optional) <c>$vocabulary</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.WriteOnly">
            <summary>
            Gets the (optional) <c>writeOnly</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Create(System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.AnchorString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonAny},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonAny},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.AnchorString},System.Nullable{Corvus.Json.JsonUriReference},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.IdEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonRegex},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.AnchorString},System.Nullable{Corvus.Json.JsonUriReference},System.Nullable{Corvus.Json.JsonUriReference},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.StringArray},System.Nullable{Corvus.Json.JsonUri},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithAdditionalProperties(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets additionalProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithAllOf(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Sets allOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithAnchor(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)">
            <summary>
            Sets $anchor.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithAnyOf(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Sets anyOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithComment(Corvus.Json.JsonString@)">
            <summary>
            Sets $comment.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithConst(Corvus.Json.JsonAny@)">
            <summary>
            Sets const.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithContains(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets contains.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithContentEncoding(Corvus.Json.JsonString@)">
            <summary>
            Sets contentEncoding.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithContentMediaType(Corvus.Json.JsonString@)">
            <summary>
            Sets contentMediaType.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithContentSchema(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets contentSchema.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDefault(Corvus.Json.JsonAny@)">
            <summary>
            Sets default.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDefinitions(Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity@)">
            <summary>
            Sets definitions.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDefs(Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity@)">
            <summary>
            Sets $defs.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDependencies(Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity@)">
            <summary>
            Sets dependencies.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDependentRequired(Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity@)">
            <summary>
            Sets dependentRequired.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDependentSchemas(Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity@)">
            <summary>
            Sets dependentSchemas.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDeprecated(Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity@)">
            <summary>
            Sets deprecated.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDescription(Corvus.Json.JsonString@)">
            <summary>
            Sets description.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDynamicAnchor(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)">
            <summary>
            Sets $dynamicAnchor.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithDynamicRef(Corvus.Json.JsonUriReference@)">
            <summary>
            Sets $dynamicRef.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithElse(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets else.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithEnum(Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray@)">
            <summary>
            Sets enum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithExamples(Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray@)">
            <summary>
            Sets examples.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithExclusiveMaximum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets exclusiveMaximum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithExclusiveMinimum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets exclusiveMinimum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithFormat(Corvus.Json.JsonString@)">
            <summary>
            Sets format.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithId(Corvus.Json.JsonSchema.Draft202012.Core.IdEntity@)">
            <summary>
            Sets $id.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithIf(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets if.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithItems(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets items.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMaxContains(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Sets maxContains.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMaximum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets maximum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMaxItems(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Sets maxItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMaxLength(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Sets maxLength.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMaxProperties(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Sets maxProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMinContains(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Sets minContains.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMinimum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets minimum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMinItems(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Sets minItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMinLength(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Sets minLength.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMinProperties(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Sets minProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithMultipleOf(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Sets multipleOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithNot(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets not.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithOneOf(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Sets oneOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithPattern(Corvus.Json.JsonRegex@)">
            <summary>
            Sets pattern.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithPatternProperties(Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity@)">
            <summary>
            Sets patternProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithPrefixItems(Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray@)">
            <summary>
            Sets prefixItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithProperties(Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity@)">
            <summary>
            Sets properties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithPropertyNames(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets propertyNames.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithReadOnly(Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity@)">
            <summary>
            Sets readOnly.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithRecursiveAnchor(Corvus.Json.JsonSchema.Draft202012.Core.AnchorString@)">
            <summary>
            Sets $recursiveAnchor.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithRecursiveRef(Corvus.Json.JsonUriReference@)">
            <summary>
            Sets $recursiveRef.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithRef(Corvus.Json.JsonUriReference@)">
            <summary>
            Sets $ref.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithRequired(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Sets required.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithSchemaValue(Corvus.Json.JsonUri@)">
            <summary>
            Sets $schema.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithThen(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets then.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithTitle(Corvus.Json.JsonString@)">
            <summary>
            Sets title.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithType(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity@)">
            <summary>
            Sets type.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithUnevaluatedItems(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets unevaluatedItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithUnevaluatedProperties(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets unevaluatedProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithUniqueItems(Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity@)">
            <summary>
            Sets uniqueItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithVocabulary(Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity@)">
            <summary>
            Sets $vocabulary.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.WithWriteOnly(Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity@)">
            <summary>
            Sets writeOnly.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Add(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Add an item to the array.
            </summary>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Add(Corvus.Json.JsonSchema.Draft202012.Schema[])">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Insert(System.Int32,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Insert an item into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the item.</param>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the items.</param>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Replace(Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Replace the first instance of the given value with the new value, even if the items are identical.
            </summary>
            <param name = "oldValue">The item to remove.</param>
            <param name = "newValue">The item to insert.</param>
            <returns>An instance of the array with the item replaced.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.SetItem(System.Int32,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Set the item at the given index.
            </summary>
            <param name = "index">The index at which to set the item.</param>
            <param name = "value">The value to set.</param>
            <returns>An instance of the array with the item set to the given value.</returns>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name = "index">The index at which to retrieve the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Create(System.ReadOnlySpan{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@,Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Schema[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonSchema#Draft202012#Schema}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonSchema#Draft202012#Schema}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Remove(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Remove the specified item from the array.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.op_Equality(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@,Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@,Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Schema#SchemaArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Equals(Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Schema.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Unevaluated">
            <summary>
            Unevaluated applicator vocabulary meta-schema
            </summary>
            <summary>
            Unevaluated applicator vocabulary meta-schema
            </summary>
            <summary>
            Unevaluated applicator vocabulary meta-schema
            </summary>
            <summary>
            Unevaluated applicator vocabulary meta-schema
            </summary>
            <summary>
            Unevaluated applicator vocabulary meta-schema
            </summary>
            <summary>
            Unevaluated applicator vocabulary meta-schema
            </summary>
            <summary>
            Unevaluated applicator vocabulary meta-schema
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.Unevaluated">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.Unevaluated">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Unevaluated)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Unevaluated">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Unevaluated@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.op_Equality(Corvus.Json.JsonSchema.Draft202012.Unevaluated@,Corvus.Json.JsonSchema.Draft202012.Unevaluated@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Unevaluated@,Corvus.Json.JsonSchema.Draft202012.Unevaluated@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Unevaluated.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Unevaluated}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Unevaluated.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Unevaluated}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Unevaluated.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Unevaluated}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Unevaluated.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Unevaluated.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Unevaluated.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Unevaluated.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Unevaluated.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Unevaluated.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Unevaluated.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Equals(Corvus.Json.JsonSchema.Draft202012.Unevaluated@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Unevaluated">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames.UnevaluatedItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames.UnevaluatedItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames.UnevaluatedItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames.UnevaluatedItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames.UnevaluatedPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames.UnevaluatedProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames.UnevaluatedProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Unevaluated.JsonPropertyNames.UnevaluatedProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.UnevaluatedItems">
            <summary>
            Gets the (optional) <c>unevaluatedItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Unevaluated.UnevaluatedProperties">
            <summary>
            Gets the (optional) <c>unevaluatedProperties</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Create(System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Schema})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.WithUnevaluatedItems(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets unevaluatedItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.WithUnevaluatedProperties(Corvus.Json.JsonSchema.Draft202012.Schema@)">
            <summary>
            Sets unevaluatedProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Unevaluated.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation">
            <summary>
            Validation vocabulary meta-schema
            </summary>
            <summary>
            Validation vocabulary meta-schema
            </summary>
            <summary>
            Validation vocabulary meta-schema
            </summary>
            <summary>
            Validation vocabulary meta-schema
            </summary>
            <summary>
            Validation vocabulary meta-schema
            </summary>
            <summary>
            Validation vocabulary meta-schema
            </summary>
            <summary>
            Validation vocabulary meta-schema
            </summary>
            <summary>
            Validation vocabulary meta-schema
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.Validation">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.Validation">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation@,Corvus.Json.JsonSchema.Draft202012.Validation@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation@,Corvus.Json.JsonSchema.Draft202012.Validation@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Validation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Validation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Validation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Validation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Validation.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Validation.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Validation.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Validation.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Validation.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Validation.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Equals(Corvus.Json.JsonSchema.Draft202012.Validation@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetDefault(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetDefault(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetDefault(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetDefault(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasDefault(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasDefault(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasDefault(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasDefault(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentRequiredEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentRequiredEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentRequiredEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentRequiredEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependentRequiredEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentRequiredEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentRequiredEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentRequiredEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentRequiredEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependentRequiredEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Validation.StringArray})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Validation.StringArray}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft202012#Validation#DependentRequiredEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A JsonAnyArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray@,Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray@,Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#JsonAnyArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#JsonAnyArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#JsonAnyArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#JsonAnyArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be JsonAnyArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAnyArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.AsNonNegativeInteger">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.IsNonNegativeInteger">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.TryGetAsNonNegativeInteger(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#MinContainsEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MinContainsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#MinContainsEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MinContainsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MinContainsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#MinContainsEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MinContainsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#MinContainsEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MinContainsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MinContainsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MinContainsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MinContainsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MinContainsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MinContainsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Decimal)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from decimal.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Double)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from double.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Half)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Single)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from float.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Byte)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from byte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Int16)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from short.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Int32)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from int.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Int64)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from long.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.SByte)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.UInt16)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from ushort.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.UInt32)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from uint.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.UInt64)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from ulong.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.Int128)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Explicit(System.UInt128)~Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_LessThan(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_GreaterThan(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_LessThanOrEqual(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_GreaterThanOrEqual(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Addition(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Subtraction(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Multiply(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Division(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)">
            <summary>
            Divides two values.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Increment(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)">
            <summary>
            Increments the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.op_Decrement(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity)">
            <summary>
            Decrements the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Compare(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Compare with another number.
            </summary>
            <param name = "lhs">The lhs of the comparison.</param>
            <param name = "rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#MultipleOfEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#MultipleOfEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#MultipleOfEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#MultipleOfEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity"/> struct.
            </summary>
            <param name = "value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Decimal)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from decimal.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Double)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from double.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Half)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Single)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from float.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Byte)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from byte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Int16)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from short.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Int32)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from int.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Int64)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from long.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.SByte)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.UInt16)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from ushort.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.UInt32)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from uint.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.UInt64)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from ulong.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.Int128)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Explicit(System.UInt128)~Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_LessThan(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_GreaterThan(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_LessThanOrEqual(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_GreaterThanOrEqual(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Addition(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Subtraction(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Multiply(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Division(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)">
            <summary>
            Divides two values.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Increment(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)">
            <summary>
            Increments the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.op_Decrement(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity)">
            <summary>
            Decrements the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Compare(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Compare with another number.
            </summary>
            <param name = "lhs">The lhs of the comparison.</param>
            <param name = "rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#NonNegativeInteger}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#NonNegativeInteger}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#NonNegativeInteger}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#NonNegativeInteger}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeInteger.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeInteger.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeInteger.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeInteger.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeInteger.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/> struct.
            </summary>
            <param name = "value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Decimal)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from decimal.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Double)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from double.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Half)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Single)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from float.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Byte)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from byte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Int16)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from short.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Int32)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from int.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Int64)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from long.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.SByte)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.UInt16)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from ushort.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.UInt32)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from uint.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.UInt64)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from ulong.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.Int128)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Explicit(System.UInt128)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_LessThan(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_GreaterThan(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_LessThanOrEqual(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_GreaterThanOrEqual(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Addition(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Subtraction(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Multiply(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Division(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)">
            <summary>
            Divides two values.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Increment(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)">
            <summary>
            Increments the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.op_Decrement(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)">
            <summary>
            Decrements the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Compare(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Compare with another number.
            </summary>
            <param name = "lhs">The lhs of the comparison.</param>
            <param name = "rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.AsNonNegativeInteger">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.IsNonNegativeInteger">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.TryGetAsNonNegativeInteger(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#NonNegativeIntegerDefault0}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#NonNegativeIntegerDefault0}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#NonNegativeIntegerDefault0}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#NonNegativeIntegerDefault0}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be NonNegativeIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeIntegerDefault0.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeIntegerDefault0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeIntegerDefault0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeIntegerDefault0.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a NonNegativeIntegerDefault0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0"/> struct.
            </summary>
            <param name = "value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Decimal)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from decimal.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Double)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from double.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Half)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Single)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from float.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Byte)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from byte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Int16)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from short.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Int32)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from int.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Int64)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from long.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.SByte)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.UInt16)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from ushort.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.UInt32)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from uint.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.UInt64)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from ulong.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.Int128)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Explicit(System.UInt128)~Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_LessThan(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_GreaterThan(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_LessThanOrEqual(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_GreaterThanOrEqual(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Addition(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Subtraction(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Multiply(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Division(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)">
            <summary>
            Divides two values.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Increment(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)">
            <summary>
            Increments the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.op_Decrement(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0)">
            <summary>
            Decrements the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Compare(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@,Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Compare with another number.
            </summary>
            <param name = "lhs">The lhs of the comparison.</param>
            <param name = "rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft202012.Validation">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ConstUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Const"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Const">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Const"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.DependentRequiredUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.DependentRequired"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.DependentRequired">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.DependentRequired"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.EnumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Enum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Enum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Enum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ExclusiveMaximumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ExclusiveMaximum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ExclusiveMaximum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ExclusiveMaximum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ExclusiveMinimumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ExclusiveMinimum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ExclusiveMinimum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.ExclusiveMinimum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxContainsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxContains"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxContains">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxContains"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaximumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Maximum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Maximum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Maximum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxLengthUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxLength"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxLength">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxLength"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MaxProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinContainsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinContains"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinContains">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinContains"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinimumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Minimum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Minimum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Minimum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinLengthUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinLength"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinLength">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinLength"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MinProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MultipleOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MultipleOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MultipleOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.MultipleOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.PatternUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Pattern"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Pattern">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Pattern"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.RequiredUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Required"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Required">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Required"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.TypeUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Type"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Type">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.Type"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.UniqueItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.UniqueItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.UniqueItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft202012.Validation.JsonPropertyNames.UniqueItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Const">
            <summary>
            Gets the (optional) <c>const</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequired">
            <summary>
            Gets the (optional) <c>dependentRequired</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Enum">
            <summary>
            Gets the (optional) <c>enum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.ExclusiveMaximum">
            <summary>
            Gets the (optional) <c>exclusiveMaximum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.ExclusiveMinimum">
            <summary>
            Gets the (optional) <c>exclusiveMinimum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MaxContains">
            <summary>
            Gets the (optional) <c>maxContains</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Maximum">
            <summary>
            Gets the (optional) <c>maximum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MaxItems">
            <summary>
            Gets the (optional) <c>maxItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MaxLength">
            <summary>
            Gets the (optional) <c>maxLength</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MaxProperties">
            <summary>
            Gets the (optional) <c>maxProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinContains">
            <summary>
            Gets the (optional) <c>minContains</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Minimum">
            <summary>
            Gets the (optional) <c>minimum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinItems">
            <summary>
            Gets the (optional) <c>minItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinLength">
            <summary>
            Gets the (optional) <c>minLength</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MinProperties">
            <summary>
            Gets the (optional) <c>minProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOf">
            <summary>
            Gets the (optional) <c>multipleOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Pattern">
            <summary>
            Gets the (optional) <c>pattern</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Required">
            <summary>
            Gets the (optional) <c>required</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.Type">
            <summary>
            Gets the (optional) <c>type</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItems">
            <summary>
            Gets the (optional) <c>uniqueItems</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Create(System.Nullable{Corvus.Json.JsonAny},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity},System.Nullable{Corvus.Json.JsonRegex},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.StringArray},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity},System.Nullable{Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithConst(Corvus.Json.JsonAny@)">
            <summary>
            Sets const.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithDependentRequired(Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity@)">
            <summary>
            Sets dependentRequired.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithEnum(Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray@)">
            <summary>
            Sets enum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithExclusiveMaximum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets exclusiveMaximum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithExclusiveMinimum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets exclusiveMinimum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMaxContains(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Sets maxContains.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMaximum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets maximum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMaxItems(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Sets maxItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMaxLength(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Sets maxLength.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMaxProperties(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger@)">
            <summary>
            Sets maxProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMinContains(Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity@)">
            <summary>
            Sets minContains.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMinimum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets minimum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMinItems(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Sets minItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMinLength(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Sets minLength.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMinProperties(Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0@)">
            <summary>
            Sets minProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithMultipleOf(Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity@)">
            <summary>
            Sets multipleOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithPattern(Corvus.Json.JsonRegex@)">
            <summary>
            Sets pattern.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithRequired(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Sets required.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithType(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity@)">
            <summary>
            Sets type.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.WithUniqueItems(Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity@)">
            <summary>
            Sets uniqueItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@,Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@,Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#SimpleTypes}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#SimpleTypes}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#SimpleTypes}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#SimpleTypes}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Match``2(``0@,System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "matchArray">The function to call if the value matches the JSON value "\"array\"".</param>
            <param name = "matchBoolean">The function to call if the value matches the JSON value "\"boolean\"".</param>
            <param name = "matchInteger">The function to call if the value matches the JSON value "\"integer\"".</param>
            <param name = "matchNull">The function to call if the value matches the JSON value "\"null\"".</param>
            <param name = "matchNumber">The function to call if the value matches the JSON value "\"number\"".</param>
            <param name = "matchObject">The function to call if the value matches the JSON value "\"object\"".</param>
            <param name = "matchString">The function to call if the value matches the JSON value "\"string\"".</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Match``1(System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0})">
            <summary>
            Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "matchArray">The function to call if the value matches the JSON value "\"array\"".</param>
            <param name = "matchBoolean">The function to call if the value matches the JSON value "\"boolean\"".</param>
            <param name = "matchInteger">The function to call if the value matches the JSON value "\"integer\"".</param>
            <param name = "matchNull">The function to call if the value matches the JSON value "\"null\"".</param>
            <param name = "matchNumber">The function to call if the value matches the JSON value "\"number\"".</param>
            <param name = "matchObject">The function to call if the value matches the JSON value "\"object\"".</param>
            <param name = "matchString">The function to call if the value matches the JSON value "\"string\"".</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues">
            <summary>
            Permitted values.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Array">
            <summary>
            Gets "array" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.ArrayUtf8">
            <summary>
            Gets "array" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Boolean">
            <summary>
            Gets "boolean" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.BooleanUtf8">
            <summary>
            Gets "boolean" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Integer">
            <summary>
            Gets "integer" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.IntegerUtf8">
            <summary>
            Gets "integer" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Null">
            <summary>
            Gets "null" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.NullUtf8">
            <summary>
            Gets "null" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Number">
            <summary>
            Gets "number" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.NumberUtf8">
            <summary>
            Gets "number" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Object">
            <summary>
            Gets "object" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.ObjectUtf8">
            <summary>
            Gets "object" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.String">
            <summary>
            Gets "string" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.StringUtf8">
            <summary>
            Gets "string" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Item0">
            <summary>
            Gets "array" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Item1">
            <summary>
            Gets "boolean" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Item2">
            <summary>
            Gets "integer" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Item3">
            <summary>
            Gets "null" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Item4">
            <summary>
            Gets "number" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Item5">
            <summary>
            Gets "object" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EnumValues.Item6">
            <summary>
            Gets "string" as a JSON value.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.op_Implicit(System.String)~Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes">
            <summary>
            Conversion from string.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <typeparam name = "T8">The type of the eighth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <param name = "eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Add(Corvus.Json.JsonString@)">
            <summary>
            Add an item to the array.
            </summary>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Add(Corvus.Json.JsonString[])">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonString})">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Insert(System.Int32,Corvus.Json.JsonString@)">
            <summary>
            Insert an item into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the item.</param>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonString})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the items.</param>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Replace(Corvus.Json.JsonString@,Corvus.Json.JsonString@)">
            <summary>
            Replace the first instance of the given value with the new value, even if the items are identical.
            </summary>
            <param name = "oldValue">The item to remove.</param>
            <param name = "newValue">The item to insert.</param>
            <returns>An instance of the array with the item replaced.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.SetItem(System.Int32,Corvus.Json.JsonString@)">
            <summary>
            Set the item at the given index.
            </summary>
            <param name = "index">The index at which to set the item.</param>
            <param name = "value">The value to set.</param>
            <returns>An instance of the array with the item set to the given value.</returns>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name = "index">The index at which to retrieve the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft202012.Validation.StringArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft202012.Validation.StringArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Create(System.ReadOnlySpan{Corvus.Json.JsonString})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromItems(Corvus.Json.JsonString@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A StringArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromItems(Corvus.Json.JsonString@,Corvus.Json.JsonString@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A StringArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromItems(Corvus.Json.JsonString@,Corvus.Json.JsonString@,Corvus.Json.JsonString@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A StringArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromItems(Corvus.Json.JsonString[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonString})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonString}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonString}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Remove(Corvus.Json.JsonString@)">
            <summary>
            Remove the specified item from the array.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.StringArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@,Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@,Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#StringArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.StringArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.StringArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Match``2(``0@,Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity,``0,``1})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Match``1(Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity,``0})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AsSimpleTypes">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.IsSimpleTypes">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.TryGetAsSimpleTypes(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AsSimpleTypesArray">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.IsSimpleTypesArray">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.TryGetAsSimpleTypesArray(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity)~Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Add(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Add an item to the array.
            </summary>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Add(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes[])">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes})">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Insert(System.Int32,Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Insert an item into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the item.</param>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the items.</param>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Replace(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@,Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Replace the first instance of the given value with the new value, even if the items are identical.
            </summary>
            <param name = "oldValue">The item to remove.</param>
            <param name = "newValue">The item to insert.</param>
            <returns>An instance of the array with the item replaced.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.SetItem(System.Int32,Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Set the item at the given index.
            </summary>
            <param name = "index">The index at which to set the item.</param>
            <param name = "value">The value to set.</param>
            <returns>An instance of the array with the item set to the given value.</returns>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name = "index">The index at which to retrieve the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Create(System.ReadOnlySpan{Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A SimpleTypesArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@,Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A SimpleTypesArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@,Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@,Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A SimpleTypesArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromItems(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonSchema#Draft202012#Validation#SimpleTypes}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonSchema#Draft202012#Validation#SimpleTypes}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Remove(Corvus.Json.JsonSchema.Draft202012.Validation.SimpleTypes@)">
            <summary>
            Remove the specified item from the array.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray@,Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray@,Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#TypeEntity#SimpleTypesArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.SimpleTypesArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Implicit(System.String)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity">
            <summary>
            Conversion from string.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <typeparam name = "T8">The type of the eighth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <param name = "eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.op_Equality(Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.op_Inequality(Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity@,Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#UniqueItemsEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#UniqueItemsEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#UniqueItemsEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft202012#Validation#UniqueItemsEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Equals(Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft202012.Validation.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
    </members>
</doc>
