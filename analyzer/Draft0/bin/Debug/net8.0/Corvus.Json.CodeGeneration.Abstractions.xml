<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Corvus.Json.CodeGeneration.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Corvus.Json.CodeGeneration.Anchor">
            <summary>
            An anchor in a schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.Anchor.#ctor(Corvus.Json.CodeGeneration.LocatedSchema,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.Anchor"/> class.
            </summary>
            <param name="schema">The schema containing the anchor.</param>
            <param name="isDynamic">Whether the anchor is dynamic.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.Anchor.Schema">
            <summary>
            Gets the schema associated with the anchor.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.Anchor.IsDynamic">
            <summary>
            Gets or sets a value indicating whether this is a dynamic anchor.
            </summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.AnchorKeyword">
            <summary>
            Represents an anchor keyword.
            </summary>
            <param name="Name">The name of the keyword.</param>
            <param name="IsDynamic">Whether the anchor is dynamic.</param>
            <param name="IsRecursive">Whether the anchor is recursive.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.AnchorKeyword.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Represents an anchor keyword.
            </summary>
            <param name="Name">The name of the keyword.</param>
            <param name="IsDynamic">Whether the anchor is dynamic.</param>
            <param name="IsRecursive">Whether the anchor is recursive.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.AnchorKeyword.Name">
            <summary>The name of the keyword.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.AnchorKeyword.IsDynamic">
            <summary>Whether the anchor is dynamic.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.AnchorKeyword.IsRecursive">
            <summary>Whether the anchor is recursive.</summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.BuiltInTypes">
            <summary>
            Gets common type declarations.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.AnyTypeDeclaration">
            <summary>
            The {}/true type declaration.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.NotAnyTypeDeclaration">
            <summary>
            The not {}/false type declaration.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.NullTypeDeclaration">
            <summary>
            The null type declaration.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.NumberTypeDeclaration">
            <summary>
            The number type declaration.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.IntegerTypeDeclaration">
            <summary>
            The integer type declaration.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ArrayTypeDeclaration">
            <summary>
            The array type declaration.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ObjectTypeDeclaration">
            <summary>
            The array type declaration.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrSByteTypeDeclaration">
            <summary>
            A clr <see cref="T:System.SByte"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrInt16TypeDeclaration">
            <summary>
            A clr <see cref="T:System.Int16"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrInt32TypeDeclaration">
            <summary>
            A clr <see cref="T:System.Int32"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrInt64TypeDeclaration">
            <summary>
            A clr <see cref="T:System.Int64"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrInt128TypeDeclaration">
            <summary>
            A clr <see cref="T:System.Int128"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrByteTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Byte"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrUInt16TypeDeclaration">
            <summary>
            A clr <see cref="T:System.UInt16"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrUInt32TypeDeclaration">
            <summary>
            A clr <see cref="T:System.UInt32"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrUInt64TypeDeclaration">
            <summary>
            A clr <see cref="T:System.UInt64"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrUInt128TypeDeclaration">
            <summary>
            A clr <see cref="T:System.UInt128"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrHalfTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Half"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrSingleTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Single"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrDoubleTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrDecimalTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Decimal"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrStringTypeDeclaration">
            <summary>
            A clr <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrBoolTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Boolean"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrGuidTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Guid"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrUriTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Uri"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrUriReferenceTypeDeclaration">
            <summary>
            A clr <see cref="T:System.Uri"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrUriTemplateTypeDeclaration">
            <summary>
            A clr <see cref="T:Corvus.Json.JsonUriTemplate"/> type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrIriTypeDeclaration">
            <summary>
            A clr IRI type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrJsonPointerTypeDeclaration">
            <summary>
            A clr JsonPointer type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrJsonRelativePointerTypeDeclaration">
            <summary>
            A clr JsonRelativePointer type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrRegexTypeDeclaration">
            <summary>
            A clr Regex type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrIriReferenceTypeDeclaration">
            <summary>
            A clr IRI-Reference type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrBase64StringTypeDeclaration">
            <summary>
            A clr base64 encoded string type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrBase64StringTypeDeclarationPre201909">
            <summary>
            A clr base64 encoded string type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrBase64ContentTypeDeclaration">
            <summary>
            A clr base64 encoded JsonDocument type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrBase64ContentTypeDeclarationPre201909">
            <summary>
            A clr base64 encoded JsonDocument type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrContentTypeDeclaration">
            <summary>
            A clr string type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrContentTypeDeclarationPre201909">
            <summary>
            A clr string type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrDateTypeDeclaration">
            <summary>
            A clr NodaTime.LocalDate type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrDateTimeTypeDeclaration">
            <summary>
            A clr NodaTime.OffsetDateTime type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrDurationTypeDeclaration">
            <summary>
            A clr NodaTime.Period type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.ClrTimeTypeDeclaration">
            <summary>
            A clr NodaTime.OffsetTime type.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.EmailTypeDeclaration">
            <summary>
            A clr <see cref="T:System.String"/> type that matches an email address.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.IdnEmailTypeDeclaration">
            <summary>
            A clr <see cref="T:System.String"/> type that matches an idn-email address.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.HostnameTypeDeclaration">
            <summary>
            A clr <see cref="T:System.String"/> type that matches a hostname address.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.IdnHostnameTypeDeclaration">
            <summary>
            A clr <see cref="T:System.String"/> type that matches a hostname address.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.IpV4TypeDeclaration">
            <summary>
            A clr <see cref="T:System.String"/> type that matches a V4 IP address.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.BuiltInTypes.IpV6TypeDeclaration">
            <summary>
            A clr <see cref="T:System.String"/> type that matches a V6 IP address.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.IsIntegerFormat(System.String)">
            <summary>
            Determines if the value is an integer based on the format.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format represents an integer.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToSByte(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to sbyte.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to sbyte.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToByte(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to byte.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to byte.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToInt16(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to int16.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to int16.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToUInt16(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to uint16.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint16.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToInt32(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to int32.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to int32.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToUInt32(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to uint32.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint32.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToInt64(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to int64.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint64.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToUInt64(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to uint64.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint64.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToInt128(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to int128.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to int128.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToUInt128(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to uint128.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint128.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToHalf(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to half.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to half.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToSingle(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to single.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to single.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToDouble(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to double.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to double.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToDecimal(System.String[])">
            <summary>
            Determines if the format allows implicit conversion to decimal.
            </summary>
            <param name="format">The format strings, or the empty array if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to decimal.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToSByte(System.String)">
            <summary>
            Determines if the format allows implicit conversion to sbyte.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to sbyte.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToByte(System.String)">
            <summary>
            Determines if the format allows implicit conversion to byte.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to byte.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToInt16(System.String)">
            <summary>
            Determines if the format allows implicit conversion to int16.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to int16.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToUInt16(System.String)">
            <summary>
            Determines if the format allows implicit conversion to uint16.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint16.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToInt32(System.String)">
            <summary>
            Determines if the format allows implicit conversion to int32.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to int32.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToUInt32(System.String)">
            <summary>
            Determines if the format allows implicit conversion to uint32.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint32.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToInt64(System.String)">
            <summary>
            Determines if the format allows implicit conversion to int64.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint64.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToUInt64(System.String)">
            <summary>
            Determines if the format allows implicit conversion to uint64.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint64.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToInt128(System.String)">
            <summary>
            Determines if the format allows implicit conversion to int128.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to int128.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToUInt128(System.String)">
            <summary>
            Determines if the format allows implicit conversion to uint128.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to uint128.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToHalf(System.String)">
            <summary>
            Determines if the format allows implicit conversion to half.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to half.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToSingle(System.String)">
            <summary>
            Determines if the format allows implicit conversion to single.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to single.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToDouble(System.String)">
            <summary>
            Determines if the format allows implicit conversion to double.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to double.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.ImplicitConversionToDecimal(System.String)">
            <summary>
            Determines if the format allows implicit conversion to decimal.
            </summary>
            <param name="format">The format string, or null if there is no format.</param>
            <returns><see langword="true"/> if the format allows implicit conversion to decimal.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.GetTypeNameFor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the built in type and namespace for the given type and optional format.
            </summary>
            <param name="type">The type for which to get the type declaration.</param>
            <param name="format">The format for which to get the type declaration.</param>
            <param name="contentEncoding">The content encoding for which to get the type declaration.</param>
            <param name="contentMediaType">The content media type for which to get the type declaration.</param>
            <param name="pre201909">Whether to get pre-201909 types.</param>
            <returns>A tuple of the namespace and type corresponding to the type and optional format.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.GetCSharpPrimitiveForNumeric(System.String[])">
            <summary>
            Gets the CSharp primitive type for the given numeric format.
            </summary>
            <param name="formats">The formats for the numeric primitive.</param>
            <returns>The CSharp primitive for the given format, or "double" if the format is not recognized.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.GetCSharpPrimitiveForNumeric(System.String)">
            <summary>
            Gets the CSharp primitive type for the given numeric format.
            </summary>
            <param name="format">The format for the numeric primitive.</param>
            <returns>The CSharp primitive for the given format, or "double" if the format is not recognized.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.BuiltInTypes.IsStringFormat(System.String)">
            <summary>
            Gets a value indicating whether the format specified is for a string.
            </summary>
            <param name="format">The format to test.</param>
            <returns><c>True</c> if it is a string format.</returns>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.Formatting">
            <summary>
            Formatting utilities.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.Formatting.FormatLiteralOrNull(System.String,System.Boolean)">
            <summary>
            Escapes a value for embedding into a quoted C# string.
            </summary>
            <param name="value">The value to escape.</param>
            <param name="quote">Whether to quote the string.</param>
            <returns>The escaped value. This can be inserted into a regular quoted C# string.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.Formatting.ToCamelCaseWithReservedWords(System.String)">
            <summary>
            Convert the given name to <c>camelCase</c>.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The name in <c>camelCase</c>.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.Formatting.ToPascalCaseWithReservedWords(System.String)">
            <summary>
            Convert the given name to <c>PascalCase</c>.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The name in <c>PascalCase</c>.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.Formatting.RemovePrefix(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Removes the given prefix.
            </summary>
            <param name="dotnetTypeName">The type name from which to remove the prefix.</param>
            <param name="prefix">The prefix to remove.</param>
            <returns>The type name without the prefix.</returns>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.IJsonSchemaBuilder">
            <summary>
            Interface implemented by Json Schema Builders.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.IJsonSchemaBuilder.AddDocument(System.String,System.Text.Json.JsonDocument)">
            <summary>
            Adds a virtual document to the document resolver for this builder.
            </summary>
            <param name="path">The virtual path to the document.</param>
            <param name="jsonDocument">The document to add.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.IJsonSchemaBuilder.BuildTypesFor(Corvus.Json.JsonReference,System.String,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Builds types for the schema provided by the given reference.
            </summary>
            <param name="reference">a uri-reference to the schema in which to build the types.</param>
            <param name="rootNamespace">The root namespace to use for types.</param>
            <param name="rebase">Indicates whether to rebase the root reference as if it were a root document.</param>
            <param name="baseUriToNamespaceMap">A map of base URIs to namespaces to use for specific types.</param>
            <param name="rootTypeName">A specific root type name for the root entity.</param>
            <param name="validateFormat">If true, the format keyword will be validated.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> which completes once the types are built. The tuple provides the root type name, and the generated types.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.IJsonSchemaBuilder.SafeBuildTypesFor(Corvus.Json.JsonReference,System.String,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Builds types for the schema provided by the given reference.
            </summary>
            <param name="reference">a uri-reference to the schema in which to build the types.</param>
            <param name="rootNamespace">The root namespace to use for types.</param>
            <param name="rebase">Indicates whether to rebase the root reference as if it were a root document.</param>
            <param name="baseUriToNamespaceMap">A map of base URIs to namespaces to use for specific types.</param>
            <param name="rootTypeName">A specific root type name for the root entity.</param>
            <param name="validateFormat">If true, the format keyword will be validated.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> which completes once the types are built. The tuple provides the root type name, and the generated types.</returns>
            <exception cref="T:System.InvalidOperationException">A required document was not preloaded via <see cref="M:Corvus.Json.CodeGeneration.IJsonSchemaBuilder.AddDocument(System.String,System.Text.Json.JsonDocument)"/>.</exception>
            <remarks>
            Unlike <see cref="M:Corvus.Json.CodeGeneration.IJsonSchemaBuilder.BuildTypesFor(Corvus.Json.JsonReference,System.String,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.String,System.Boolean)"/>, this requires all documents to
            have been preloaded by the <see cref="T:Corvus.Json.IDocumentResolver"/> - typically via <see cref="M:Corvus.Json.CodeGeneration.IJsonSchemaBuilder.AddDocument(System.String,System.Text.Json.JsonDocument)"/>.
            </remarks>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase">
            <summary>
            A base for JSON Schema type builders.
            </summary>
            <remarks>
            Implementers implement this base class and provide overrides to adapt to their
            code generator template set.
            </remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.#ctor(Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase"/> class.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <remarks>
            Implementers will typically call this having wrapped the builder with the particular meta schema
            configuration e.g.  <c>typeBuilder.UseDraft201909();</c>.
            </remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.AddDocument(System.String,System.Text.Json.JsonDocument)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.BuildTypesFor(Corvus.Json.JsonReference,System.String,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.SafeBuildTypesFor(Corvus.Json.JsonReference,System.String,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.GetTypeDeclarationForProperty(Corvus.Json.CodeGeneration.TypeDeclaration,System.String)">
            <summary>
            Gets the type declaration for a property of a type.
            </summary>
            <param name="typeDeclaration">The type declaration.</param>
            <param name="property">The property that provides a Schema().</param>
            <returns>The given type declaration.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.GetTypeDeclarationForPatternProperty(Corvus.Json.CodeGeneration.TypeDeclaration,System.String)">
            <summary>
            Gets the type declaration for a property of a type.
            </summary>
            <param name="typeDeclaration">The type declaration.</param>
            <param name="patternProperty">The pattern property that provides a Schema().</param>
            <returns>The given type declaration.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.GetTypeDeclarationForDependentSchema(Corvus.Json.CodeGeneration.TypeDeclaration,System.String)">
            <summary>
            Gets the type declaration for a dependent of a type.
            </summary>
            <param name="typeDeclaration">The type declaration.</param>
            <param name="dependentSchema">The dependent schema that provides a Schema().</param>
            <returns>The given type declaration.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.GetTypeDeclarationForPropertyArrayIndex(Corvus.Json.CodeGeneration.TypeDeclaration,System.String,System.Int32)">
            <summary>
            Gets the type declaration for a Schema() array property at a given index.
            </summary>
            <param name="typeDeclaration">The type declaration.</param>
            <param name="property">The property that provides a Schema().</param>
            <param name="index">The index of the Schema() in the array.</param>
            <returns>The given type declaration.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.GetDottedFileNameFor(Corvus.Json.CodeGeneration.TypeDeclaration)">
            <summary>
            Gets the file name for a given type declaration.
            </summary>
            <param name="typeDeclaration">The type declaration for which to get the appropriate filename.</param>
            <returns>The full filename for the file, taking into account its nesting.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaBuilderBase.GenerateFilesForType(System.ValueTuple{Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.TypeDeclaration},System.Boolean)">
            <summary>
            Generate the files for the given type.
            </summary>
            <param name="typeForGeneration">The type for which to generate the code.</param>
            <param name="validateFormat">If true, the format keyword will be validated.</param>
            <returns>The code generated for the type.</returns>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.JsonSchemaConfiguration">
            <summary>
            Configuration for a json schema dialect.
            </summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.NameGenerator">
            <summary>
            A callback for name generation.
            </summary>
            <param name="type">The type for which to generate a name.</param>
            <param name="reference">The reference to the type.</param>
            <param name="name">The proposed name, or <c>null</c> if no name is proposed.</param>
            <returns><see langword="true"/> if the generator proposes a name.</returns>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.IdKeyword">
            <summary>
            Gets or sets the ID keyword for the schema model.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.ItemsKeyword">
            <summary>
            Gets or sets the items keyword for the schema model.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.RefKeyword">
            <summary>
            Gets the (required, non-dynamic) reference keyword for the schema model.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.SchemaKeyword">
            <summary>
            Gets or sets the schema keyword for the schema model.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.RefKeywords">
            <summary>
            Gets or sets the reference keywords for the schema model.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.AnchorKeywords">
            <summary>
            Gets or sets the anchor keywords for the schema model.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.RefResolvableKeywords">
            <summary>
            Gets or sets the ref-resolvable keywords for the schema model.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.IrreducibleKeywords">
            <summary>
            Gets or sets the list of non-reducing keywords for the schema model.
            </summary>
            <remarks>
            These are the keywords that, if placed alongside a reference keyword, prevent the local type from being reduced to the referenced type.
            </remarks>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.DefinitionKeywords">
            <summary>
            Gets or sets the list of definition keywords for the schema model.
            </summary>
            <remarks>
            These are the keywords that, while they are ref resolvable, do not contribute directly to a type declaration.
            </remarks>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.GeneratorReservedWords">
            <summary>
            Gets or sets the list of words reserved by the generator, which may not be used as names.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.ValidatingAs">
            <summary>
            Gets or sets the validation semantic model to use.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.ValidateSchema">
            <summary>
            Gets or sets a predicate that validates the schema.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.IsExplicitArrayType">
            <summary>
            Gets or sets a predicate that indicates whether the given schema is an explicit array type.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.IsExplicitMapType">
            <summary>
            Gets or sets a predicate that indicates whether the given schema is an explicit map type.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.IsSimpleType">
            <summary>
            Gets or sets a predicate that indicates whether the given schema is a simple type.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.ProposeName">
            <summary>
            Gets or sets a callback that proposes a name for <see cref="T:Corvus.Json.CodeGeneration.TypeDeclaration"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.GetBuiltInTypeName">
            <summary>
            Gets or sets a function to get the built-in type name for a schema with particular validation semantics.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.FindAndBuildPropertiesAdapter">
            <summary>
            Gets or sets a function to build dotnet properties for given type declaration.
            </summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.JsonSchemaRegistry">
            <summary>
            Handles loading and parsing Json Schema files.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaRegistry.#ctor(Corvus.Json.IDocumentResolver,Corvus.Json.CodeGeneration.JsonSchemaConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder"/> class.
            </summary>
            <param name="documentResolver">The document resolver to use.</param>
            <param name="jsonSchemaConfiguration">The JSON schema configuration.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaRegistry.JsonSchemaConfiguration">
            <summary>
            Gets the JsonSchemaConfiguration for the registry.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaRegistry.RegisterDocumentSchema(Corvus.Json.JsonReference,System.Boolean)">
            <summary>
            Walk a JSON document and build a schema map.
            </summary>
            <param name="jsonSchemaPath">The path to the JSON schema root document.</param>
            <param name="rebaseAsRoot">Whether to rebase this path as a root document. This should only be done for a JSON schema island in a larger non-schema document.
            If <see langoword="true"/>, then references in this document should be taken as if the fragment was the root of a document.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> which, when complete, provides the root scope for the document (which may be a generated $ref for a path with a fragment), and the base reference to the document containing the root element.</returns>
            <remarks><paramref name="jsonSchemaPath"/> must point to a root scope. If it has a pointer into the document, then <paramref name="rebaseAsRoot"/> must be true.</remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaRegistry.AddSchemaAndSubschema(Corvus.Json.JsonReference,Corvus.Json.JsonAny)">
            <summary>
            Adds the subschema to the registry at the given location, and walks the schema, adding its
            subschema relative to that location.
            </summary>
            <param name="currentLocation">The location at which to add the schema.</param>
            <param name="schema">The schema to add.</param>
            <returns>A reference to the located schema.</returns>
            <exception cref="T:System.InvalidOperationException">The schema could not be registered.</exception>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaRegistry.Add(Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.LocatedSchema)">
            <summary>
            Add the located schema at the given location.
            </summary>
            <param name="location">The location at which to add the located schema.</param>
            <param name="locatedSchema">The located schema to add.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaRegistry.GetLocatedSchema(Corvus.Json.JsonReference)">
            <summary>
            Gets the located schema for the given location.
            </summary>
            <param name="location">The location for which to retrieve the schema.</param>
            <returns>The <see cref="T:Corvus.Json.CodeGeneration.LocatedSchema"/> for the given scope.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No schema was registered at the given location.</exception>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaRegistry.TryGetValue(Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.LocatedSchema@)">
            <summary>
            Tries to get the located schema for the given scope.
            </summary>
            <param name="location">The Location for which to find the schema.</param>
            <param name="schema">The schema found at the location.</param>
            <returns><see langword="true"/> when the schema is found.</returns>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.JsonSchemaScope">
            <summary>
            Holds the information about a JsonSchema scope.
            </summary>
            <param name="Location">The root location of the scope.</param>
            <param name="Pointer">The pointer to the current subschema in the scope.</param>
            <param name="Schema">The schema associated with the root location of the scope.</param>
            <param name="IsDynamicScope">Whether it is a dynamic scope.</param>
            <param name="ReplacedDynamicTypes">The dynamic types that were replaced in the scope.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaScope.#ctor(Corvus.Json.JsonReference,Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.LocatedSchema,System.Boolean,System.Collections.Immutable.ImmutableList{System.ValueTuple{Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.TypeDeclaration}})">
            <summary>
            Holds the information about a JsonSchema scope.
            </summary>
            <param name="Location">The root location of the scope.</param>
            <param name="Pointer">The pointer to the current subschema in the scope.</param>
            <param name="Schema">The schema associated with the root location of the scope.</param>
            <param name="IsDynamicScope">Whether it is a dynamic scope.</param>
            <param name="ReplacedDynamicTypes">The dynamic types that were replaced in the scope.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaScope.Location">
            <summary>The root location of the scope.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaScope.Pointer">
            <summary>The pointer to the current subschema in the scope.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaScope.Schema">
            <summary>The schema associated with the root location of the scope.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaScope.IsDynamicScope">
            <summary>Whether it is a dynamic scope.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaScope.ReplacedDynamicTypes">
            <summary>The dynamic types that were replaced in the scope.</summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaScope.op_Implicit(Corvus.Json.CodeGeneration.JsonSchemaScope)~System.ValueTuple{Corvus.Json.JsonReference,Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.LocatedSchema,System.Boolean,System.Collections.Immutable.ImmutableList{System.ValueTuple{Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.TypeDeclaration}}}">
            <summary>
            Tuple conversion operator.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.CodeGeneration.JsonSchemaScope"/> to convert to a tuple.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaScope.op_Implicit(System.ValueTuple{Corvus.Json.JsonReference,Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.LocatedSchema,System.Boolean,System.Collections.Immutable.ImmutableList{System.ValueTuple{Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.TypeDeclaration}}})~Corvus.Json.CodeGeneration.JsonSchemaScope">
            <summary>
            Tuple conversion operator.
            </summary>
            <param name="value">The tuple to convert to the <see cref="T:Corvus.Json.CodeGeneration.JsonSchemaScope"/>.</param>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder">
            <summary>
            Walks a JSON schema and builds a type map of it.
            </summary>
            <summary>
            Walks a JSON schema and builds a type map of it.
            </summary>
            <summary>
            Walks a JSON schema and builds a type map of it.
            </summary>
            <summary>
            Walks a JSON schema and builds a type map of it.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.#ctor(Corvus.Json.IDocumentResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder"/> class.
            </summary>
            <param name="documentResolver">The document resolver to use.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.JsonSchemaConfiguration">
            <summary>
            Gets the JsonSchemaConfiguration.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.AddTypeDeclarationsFor(Corvus.Json.JsonReference,System.String,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.String)">
            <summary>
            Walk a JSON document to build a JSON schema type declaration.
            </summary>
            <param name="documentPath">The path to the root of the json-schema document.</param>
            <param name="rootNamespace">The root namespace in which to generate types.</param>
            <param name="rebaseAsRoot">Whether to rebase the <paramref name="documentPath"/> as a root document. This should only be done for a JSON schema island in a larger non-schema document.
            If <see langword="true"/>, then references in this document should be taken as if the fragment was the root of a document. This will effectively generate a custom $id for the root scope.</param>
            <param name="baseUriToNamespaceMap">An optional map of base URIs in the document to namespaces in which to generate the types.</param>
            <param name="rootTypeName">An optional explicit type name for the root element.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> which, when complete, provides the requested type declaration.</returns>
            <remarks>
            <para>This method may be called multiple times to build up a set of related types, perhaps from multiple fragments of a single document, or a family of related documents.</para>
            <para>Any re-used schema will (if possible) be reduced to the same type, to build a single coherent type system.</para>
            <para>Once you have finished adding types, call <see cref="M:Corvus.Json.CodeGeneration.TypeDeclaration.GetTypesToGenerate"/> to retrieve the set of types that need to be built for each root type you wish to build.</para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.GetValidationSemantics(Corvus.Json.JsonReference,System.Boolean)">
            <summary>
            Gets the validation semantics for the document at the given location.
            </summary>
            <param name="reference">The reference to the document.</param>
            <param name="rebaseToRootPath">Whether we are rebasing the element to a root path.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that, when complete, provides the validation semantics for the reference.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.AddDocument(System.String,System.Text.Json.JsonDocument)">
            <summary>
            Adds a virtual document to the document resolver.
            </summary>
            <param name="path">The virtual path.</param>
            <param name="jsonDocument">The document to add.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.GetRelativeLocationFor(Corvus.Json.JsonReference)">
            <summary>
            Gets reference for the target location relative to the base location.
            </summary>
            <param name="target">The target location.</param>
            <returns>The relative location.</returns>
            <remarks>The target must be an absolute location.</remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.ReplaceLocatedTypeDeclaration(Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.TypeDeclaration)">
            <summary>
            Replaces a located type declaration.
            </summary>
            <param name="location">The location for the replacement.</param>
            <param name="type">The type to replace.</param>
            <remarks>
            This is used by the <see cref="T:Corvus.Json.CodeGeneration.WalkContext"/> to replace the dynamic types when the scope is popped.
            </remarks>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.PropertyBuilder.AnyTypeDeclarationInstance">
            <summary>
            Gets a type declaration to use as the JSON "any" type instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.PropertyBuilder.NotAnyTypeDeclarationInstance">
            <summary>
            Gets a type declaration to use as the JSON "not any" type instance.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.PropertyBuilder.FindAndBuildProperties(Corvus.Json.CodeGeneration.TypeDeclaration,Corvus.Json.CodeGeneration.TypeDeclaration,System.Collections.Generic.HashSet{Corvus.Json.CodeGeneration.TypeDeclaration},System.Boolean)">
            <summary>
            Find and build properties for the given types.
            </summary>
            <param name="source">The source from which to find the properties.</param>
            <param name="target">The target to which to add the properties.</param>
            <param name="typesVisited">The types we have already visited to find properties.</param>
            <param name="treatRequiredAsOptional">Whether to treat required properties as optional when adding.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.SetBuiltInTypeNameAndNamespace(Corvus.Json.CodeGeneration.TypeDeclaration,System.String,System.String)">
            <summary>
            Sets a built-in type name and namespace.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.SetDotnetTypeNameAndNamespace(Corvus.Json.CodeGeneration.TypeDeclaration,System.String,System.String)">
            <summary>
            Calculates a name for the type based on the information we have.
            </summary>
            <param name="typeDeclaration">The type declaration for which to set the type and namespace.</param>
            <param name="rootNamespace">The namespace to use for this type if it has no parent.</param>
            <param name="fallbackBaseName">The base type name to fall back on if we can't derive one from our location and type information.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.TryGetReducedTypeDeclarationFor(Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.TypeDeclaration@)">
            <summary>
            Gets the reduced type declaration for the specified location.
            </summary>
            <param name="location">The location for which to get the type declaration.</param>
            <param name="typeDeclaration">The reduced type declaraiton for the specified location.</param>
            <returns><see langword="true"/> if a type declaration was found for the location.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder.ReduceTypeDeclarations(Corvus.Json.CodeGeneration.TypeDeclaration)">
            <summary>
            This reduces the type declarations required by the root type declaration,
            including the root type declaration itself.
            </summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.LocatedSchema">
            <summary>
            A located schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.LocatedSchema.#ctor(Corvus.Json.JsonReference,Corvus.Json.JsonAny)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.LocatedSchema"/> class.
            </summary>
            <param name="location">The scoped location of the located schema.</param>
            <param name="schema">The JSON schema at the location.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.LocatedSchema.Location">
            <summary>
            Gets the scoped location of the located schema.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.LocatedSchema.Schema">
            <summary>
            Gets the schema associated with the location.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.LocatedSchema.NamedAnchors">
            <summary>
            Gets the named anchors for the located schema.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.LocatedSchema.IsRecursiveAnchor">
            <summary>
             Gets or sets a value indicating whether this schema has a recursive anchor.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.LocatedSchema.HasAnchor(System.String)">
            <summary>
            Gets a value indicating whether the schema has an anchor with the given name.
            </summary>
            <param name="anchorName">The name of the anchor.</param>
            <returns><see langword="true"/> if the schema has an anchor of the specified name.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.LocatedSchema.TryAddAnchor(System.String,Corvus.Json.CodeGeneration.LocatedSchema)">
            <summary>
            Add an anchor to the located schema.
            </summary>
            <param name="anchorName">The name of the anchor.</param>
            <param name="subschema">The subschema to add for the anchor.</param>
            <returns><see langword="true"/> if the anchor was added, <see langword="false"/> if an anchor with this name already existed.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.LocatedSchema.AddOrUpdateDynamicAnchor(System.String,Corvus.Json.CodeGeneration.LocatedSchema)">
            <summary>
            Add a dynamic anchor to the located schema.
            </summary>
            <param name="anchorName">The name of the anchor.</param>
            <param name="subschema">The subschema to add or update for the anchor.</param>
            <remarks>
            This will add a dynamic anchor of the given name, if the anchor does not already exist.
            If it does, it will be updated to be a dynamic anchor.</remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.LocatedSchema.TryGetAnchor(System.String,Corvus.Json.CodeGeneration.Anchor@)">
            <summary>
            Attempts to get the named anchor from the registration.
            </summary>
            <param name="anchor">The name of the anchor.</param>
            <param name="registeredAnchor">The anchor registered for that name.</param>
            <returns><see langword="true"/> when the anchor is found, otherwise false.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.LocatedSchema.WithLocation(Corvus.Json.JsonReference)">
            <summary>
            Returns a new located schema with an updated location.
            </summary>
            <param name="location">The updated location.</param>
            <returns>The located schema with the updated location.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.LocatedSchema.HasDynamicAnchor">
            <summary>
            Determines whether the schema has a dynamic anchor.
            </summary>
            <returns><see langword="true"/> if the schema contains a dynamic anchor.</returns>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.PropertyDeclaration">
            <summary>
            A property declaration in a <see cref="T:Corvus.Json.CodeGeneration.TypeDeclaration"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.PropertyDeclaration.#ctor(Corvus.Json.CodeGeneration.TypeDeclaration,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.PropertyDeclaration"/> class.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="jsonPropertyName">The json property name.</param>
            <param name="isRequired">Whether the property is required by default.</param>
            <param name="isInLocalScope">Whether the property is in the local scope.</param>
            <param name="hasDefaultValue">Determines whether this property has a default value.</param>
            <param name="defaultValue">Gets the raw string value for the default value, or null if there is no default value.</param>
            <param name="xmlDocumentationRemarks">Gets the formatted documentation for the property.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.Type">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.JsonPropertyName">
            <summary>
            Gets the json property name of the property.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.IsRequired">
            <summary>
            Gets a value indicating whether this property is required.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.IsDefinedInLocalScope">
            <summary>
            Gets a value indicating whether this property is defined in the local scope.
            </summary>
            <remarks>If true, then this property is defined in the current schema. If false, it
            has been derived from a merged type.</remarks>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.DotnetPropertyName">
            <summary>
            Gets or sets the dotnet property name.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.DotnetParameterName">
            <summary>
            Gets the dotnet parameter name.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.ConstructorParameterName">
            <summary>
            Gets the constructor parameter name for this property.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.HasDefaultValue">
            <summary>
            Gets a value indicating whether this property has a default value.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.DefaultValue">
            <summary>
            Gets the default value for the property.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.HasXmlDocumentationRemarks">
            <summary>
            Gets a value indicating whether this property has formatted XML documentation remarks.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.PropertyDeclaration.XmlDocumentationRemarks">
            <summary>
            Gets the formatted XML documentation remarks for the property declaration.
            </summary>
            <remarks>
            If present, this may be embedded between &lt;remarks&gt; and &lt;/remarks&gt; elements in the generated code.
            </remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.PropertyDeclaration.WithRequired(System.Boolean)">
            <summary>
            Construct a copy with the specified <see cref="P:Corvus.Json.CodeGeneration.PropertyDeclaration.IsRequired"/> value.
            </summary>
            <param name="isRequired">Whether the property is required.</param>
            <returns>The new instance with isRequired set.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.PropertyDeclaration.WithXmlDocumentationRemarks(System.String)">
            <summary>
            Construct a copy with the specified <see cref="P:Corvus.Json.CodeGeneration.PropertyDeclaration.XmlDocumentationRemarks"/> value.
            </summary>
            <param name="xmlDocumentationRemarks">Gets the formatted documentation for the property.</param>
            <returns>The new instance with isRequired set.</returns>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.RefKeyword">
            <summary>
            Represents a ref-like keyword.
            </summary>
            <param name="Name">The name of the keyword.</param>
            <param name="RefKind">The strategy to use for resolving the referenced value.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.RefKeyword.#ctor(System.String,Corvus.Json.CodeGeneration.RefKind)">
            <summary>
            Represents a ref-like keyword.
            </summary>
            <param name="Name">The name of the keyword.</param>
            <param name="RefKind">The strategy to use for resolving the referenced value.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.RefKeyword.Name">
            <summary>The name of the keyword.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.RefKeyword.RefKind">
            <summary>The strategy to use for resolving the referenced value.</summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.RefKind">
            <summary>
            Defines a well-known method of reference resolution.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefKind.Ref">
            <summary>
            $ref-style resolution.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefKind.RecursiveRef">
            <summary>
            $recursiveRef-style resolution.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefKind.DynamicRef">
            <summary>
            $dynamicRef-style resolution.
            </summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.RefResolvableKeyword">
            <summary>
            Represents a ref resolvable keyword.
            </summary>
            <param name="Name">The name of the keyword.</param>
            <param name="RefResolvablePropertyKind">The strategy to use for inspecting the property for resolvable schema.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.RefResolvableKeyword.#ctor(System.String,Corvus.Json.CodeGeneration.RefResolvablePropertyKind)">
            <summary>
            Represents a ref resolvable keyword.
            </summary>
            <param name="Name">The name of the keyword.</param>
            <param name="RefResolvablePropertyKind">The strategy to use for inspecting the property for resolvable schema.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.RefResolvableKeyword.Name">
            <summary>The name of the keyword.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.RefResolvableKeyword.RefResolvablePropertyKind">
            <summary>The strategy to use for inspecting the property for resolvable schema.</summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.RefResolvablePropertyKind">
            <summary>
            Determines the strategy for idenfying the schema in reference resolvables.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefResolvablePropertyKind.None">
            <summary>
            The property value is not ref resolvable.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefResolvablePropertyKind.Schema">
            <summary>
            The property value is a schema.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefResolvablePropertyKind.ArrayOfSchema">
            <summary>
            The property value is an array of schema.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefResolvablePropertyKind.SchemaOrArrayOfSchema">
            <summary>
            The property value is either an array of schema or a schema.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefResolvablePropertyKind.MapOfSchema">
            <summary>
            The property value is a map of schema.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefResolvablePropertyKind.SchemaIfValueIsSchemaLike">
            <summary>
            The property value is either a schema if it is an object, or not a schema if it is not an object.
            </summary>
            <remarks>
            This is a legacy construct from draft6 and draft7 and has been eliminated from 2019-09 onwards.
            </remarks>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.RefResolvablePropertyKind.MapOfSchemaIfValueIsSchemaLike">
            <summary>
            The property value is a map of schema if the values are objects.
            </summary>
            <remarks>
            This is a legacy construct from draft6 and draft7 and has been eliminated from 2019-09 onwards.
            </remarks>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.SchemaReferenceNormalization">
            <summary>
            Helpers for reference normalization.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.SchemaReferenceNormalization.TryNormalizeSchemaReference(System.String,System.String@)">
            <summary>
            Attempts to normalize the form of a reference to a schema file.
            </summary>
            <param name="schemaFile">The schema file reference.</param>
            <param name="result">The result of the operation.</param>
            <returns><see langword="true"/> if the result required normalization, otherwise false.</returns>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.TypeAndCode">
            <summary>
            A result of generating code for a particular type.
            </summary>
            <param name="DotnetTypeName">The type implemented by the code.</param>
            <param name="Code">The code implementing the type.</param>
            <remarks>This typically represents several partials implementing the dotnet type.</remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeAndCode.#ctor(System.String,System.Collections.Immutable.ImmutableArray{Corvus.Json.CodeGeneration.CodeAndFilename})">
            <summary>
            A result of generating code for a particular type.
            </summary>
            <param name="DotnetTypeName">The type implemented by the code.</param>
            <param name="Code">The code implementing the type.</param>
            <remarks>This typically represents several partials implementing the dotnet type.</remarks>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeAndCode.DotnetTypeName">
            <summary>The type implemented by the code.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeAndCode.Code">
            <summary>The code implementing the type.</summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.CodeAndFilename">
            <summary>
            A specific block of code and its target filename.
            </summary>
            <param name="Code">The code to produce.</param>
            <param name="Filename">The filename in which to produce the code.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.CodeAndFilename.#ctor(System.String,System.String)">
            <summary>
            A specific block of code and its target filename.
            </summary>
            <param name="Code">The code to produce.</param>
            <param name="Filename">The filename in which to produce the code.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.CodeAndFilename.Code">
            <summary>The code to produce.</summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.CodeAndFilename.Filename">
            <summary>The filename in which to produce the code.</summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.TypeDeclaration">
            <summary>
            A type declaration for a Json Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.#ctor(Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder,Corvus.Json.CodeGeneration.LocatedSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.TypeDeclaration"/> class.
            </summary>
            <param name="typeBuilder">The <see cref="T:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder"/> building the types.</param>
            <param name="schema">The actual schema for the type declaration, including its location.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.#ctor(Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder,Corvus.Json.CodeGeneration.LocatedSchema,System.Collections.Immutable.ImmutableDictionary{System.String,Corvus.Json.CodeGeneration.TypeDeclaration})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.TypeDeclaration"/> class.
            </summary>
            <param name="typeBuilder">The <see cref="T:Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder"/> building the types.</param>
            <param name="schema">The actual schema for the type declaration, including its location.</param>
            <param name="refResolvablePropertyDeclarations">The type declarations for ref-resolvable properties.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.LocatedSchema">
            <summary>
            Gets the schema for the type declaration.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.RecursiveScope">
            <summary>
            Gets the recursive scope for the type declaration.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.RelativeSchemaLocation">
            <summary>
            Gets the location for the schema that defines this type, relative to the
            base location.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.Properties">
            <summary>
            Gets the dotnet property declarations for the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.RefResolvablePropertyDeclarations">
            <summary>
            Gets the ref-resolvable property declarations for the type declaration.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.HasDynamicReference">
            <summary>
            Gets a value indicating whether the type declaration has a dynamic reference.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.Parent">
            <summary>
            Gets the parent type declaration for this type declaration, or null if this is a root type declaration.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.Children">
            <summary>
            Gets the set of type declarations nested in this type.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.Namespace">
            <summary>
            Gets the namespace in which to put this type.
            </summary>
            <remarks>
            If <see cref="P:Corvus.Json.CodeGeneration.TypeDeclaration.Parent"/> is not null, then this will be null, and vice-versa.
            </remarks>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.DotnetTypeName">
            <summary>
            Gets the dotnet type name for this type.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.IsBuiltInType">
            <summary>
            Gets a value indicating whether this is a built-in type.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.TypeDeclaration.FullyQualifiedDotnetTypeName">
            <summary>
            Gets the fully qualified dotnet type name for this type.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.AddRefResolvablePropertyDeclaration(System.String,Corvus.Json.CodeGeneration.TypeDeclaration)">
            <summary>
            Adds a ref resolvable property to the type declaration.
            </summary>
            <param name="propertyPath">The path to the property from its parent.</param>
            <param name="type">The type declaration for the property.</param>
            <remarks>
            <para>
            The path may be a compound path for e.g. array or map properties.
            </para>
            <para>
            This will include all the properties for <see cref="P:Corvus.Json.CodeGeneration.JsonSchemaConfiguration.RefResolvableKeywords"/>, and for irreducible reference
            properties.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.GetTypesToGenerate">
            <summary>
            Gets the set of types to build, given we start at the given root type declaration.
            </summary>
            <returns>A set of types that need to be built.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.ReplaceRefResolvablePropertyDeclaration(System.String,Corvus.Json.CodeGeneration.TypeDeclaration)">
            <summary>
            Replace the given ref resolvable property with another type declaration.
            </summary>
            <param name="propertyPath">The property path at which to replace the type declaration.</param>
            <param name="type">The new type declaration.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.AddOrReplaceProperty(Corvus.Json.CodeGeneration.PropertyDeclaration)">
            <summary>
            Adds a property to the collection, replacing any that match the json property name.
            </summary>
            <param name="propertyDeclaration">The property declaration to add.</param>
            <remarks>Note that this will happily add duplicate properties.</remarks>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.TryGetReducedType(Corvus.Json.CodeGeneration.TypeDeclaration@)">
            <summary>
            Get the reduced type for this type declaration.
            </summary>
            <param name="reducedType">The reduced type for the type declaration. If the type was irreducible, this will be the original type.</param>
            <returns><see langword="true"/> if the type was reduced, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.GetTypeDeclarationForProperty(System.String)">
            <summary>
            Gets the type declaration for the specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The type declaration for the named property.</returns>
            <exception cref="T:System.InvalidOperationException">There was no property at the given location.</exception>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.GetTypeDeclarationForPropertyArrayIndex(System.String,System.Int32)">
            <summary>
            Gets the type declaration for the specified array-like property and the array index.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="arrayIndex">The index of the array.</param>
            <returns>The type declaration for the named property.</returns>
            <exception cref="T:System.InvalidOperationException">There was no property at the given location.</exception>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.GetTypeDeclarationForMappedProperty(System.String,System.String)">
            <summary>
            Gets the type declaration for the specified mapped property.
            </summary>
            <param name="propertyName">The name of the map property.</param>
            <param name="mapName">The name of the property in the map.</param>
            <returns>The type declaration for the named mapped property.</returns>
            <exception cref="T:System.InvalidOperationException">There was no property at the given location.</exception>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.TryGetTypeDeclarationForMappedProperty(System.String,System.String,Corvus.Json.CodeGeneration.TypeDeclaration@)">
            <summary>
            Gets the type declaration for the specified mapped property.
            </summary>
            <param name="propertyName">The name of the map property.</param>
            <param name="mapName">The name of the property in the map.</param>
            <param name="result">The type declaration for the named mapped property.</param>
            <returns><see langword="true"/> if the type declaration was found.</returns>
            <exception cref="T:System.InvalidOperationException">There was no property at the given location.</exception>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.SetDotnetTypeName(System.String)">
            <summary>
            Explicitly sets the dotnet type name to a new value.
            </summary>
            <param name="dotnetTypeName">The new dotnet type name.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.SetNamespace(System.String)">
            <summary>
            Explicitly sets the dotnet namespace to a new value.
            </summary>
            <param name="ns">The new dotnet namespace .</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.SetParent">
            <summary>
            Sets the parent for this type.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.UpdateDynamicLocation(Corvus.Json.JsonReference)">
            <summary>
            Updates the located schema associated with this type to present a new dynamic location.
            </summary>
            <param name="dynamicScopeLocation">The new dynamic scope location.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.UpdateRecursiveLocation(Corvus.Json.JsonReference)">
            <summary>
            Updates the located schema associated with this type to present a new dynamic location.
            </summary>
            <param name="recursiveScopeLocation">The new dynamic scope location.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.TryGetCorvusTypeName(System.String@)">
            <summary>
            Try to get the <c>$corvusTypeName</c> for the type.
            </summary>
            <param name="typeName">The type name.</param>
            <returns><see langword="true"/> if the type had an explicit type name specified by the <c>$corvusTypeName</c> keyword.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.TypeDeclaration.SetRecursiveScope(Corvus.Json.JsonReference)">
            <summary>
            Sets the recursive scope.
            </summary>
            <param name="recursiveScope">The recursive scope.</param>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.ValidationSemantics">
            <summary>
            Gets the validation semantic model.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.ValidationSemantics.Unknown">
            <summary>
            Unknown validation semantics.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.ValidationSemantics.Draft6">
            <summary>
            Draft6 semantics.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.ValidationSemantics.Draft7">
            <summary>
            Draft7 semantics.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.ValidationSemantics.Draft201909">
            <summary>
            Draft 2019-09 semantics.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.ValidationSemantics.Draft202012">
            <summary>
            Draft 2020-12 semantics.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.ValidationSemantics.OpenApi30">
            <summary>
            OpenAPI 3.0 semantics.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.ValidationSemantics.Draft4">
            <summary>
            Draft 4 semantics.
            </summary>
        </member>
        <member name="F:Corvus.Json.CodeGeneration.ValidationSemantics.Pre201909">
            <summary>
            Semantics prior to draft 2019-09 (i.e. draft6 or draft7).
            </summary>
        </member>
        <member name="T:Corvus.Json.CodeGeneration.WalkContext">
            <summary>
            The local state for building a type declaration.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.#ctor(Corvus.Json.CodeGeneration.JsonSchemaTypeBuilder,Corvus.Json.CodeGeneration.LocatedSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CodeGeneration.WalkContext"/> class.
            </summary>
            <param name="typeBuilder">The type builder for the context.</param>
            <param name="rootSchema">The root schema for the context.</param>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.WalkContext.Scope">
            <summary>
            Gets the current scope.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.WalkContext.SubschemaLocation">
            <summary>
            Gets the document location for the given subschema.
            </summary>
        </member>
        <member name="P:Corvus.Json.CodeGeneration.WalkContext.RootSchema">
            <summary>
            Gets the root schema for the context.
            </summary>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.LeaveScope">
            <summary>
            Leave the existing scope.
            </summary>
            <returns>The scope we have just left.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.EnterSubschemaScope(Corvus.Json.JsonReference)">
            <summary>
            Enters a new scope for a subschema.
            </summary>
            <param name="pointer">The pointer to the subschema from the base schema.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.EnterDynamicScope(Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.LocatedSchema)">
            <summary>
            Update the scope location and flags with a new dynamic scope.
            </summary>
            <param name="newScopeLocation">The new scope location.</param>
            <param name="schema">The schema to become the base schema.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.EnterReferenceScope(Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.LocatedSchema,Corvus.Json.JsonReference)">
            <summary>
            Update the scope location and flags with a new dynamic scope.
            </summary>
            <param name="referenceBaseLocation">The reference base location.</param>
            <param name="baseSchema">The base schema for the reference.</param>
            <param name="subschemaPointer">The pointer to the subschema.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.EnterSubschemaScopeForUnencodedPropertyName(System.String)">
            <summary>
            Update the scope with an unencoded property name.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.EnterSubschemaScopeForArrayIndex(System.Int32)">
            <summary>
            Update the scope with an array index.
            </summary>
            <param name="index">The index in the array.</param>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.TryGetScopeForFirstDynamicAnchor(System.String,System.Nullable{Corvus.Json.JsonReference}@)">
            <summary>
            Finds the scope containing the first dynamic anchor that corresponds to the given anchor name.
            </summary>
            <param name="anchor">The anchor name.</param>
            <param name="baseScopeLocation">The base scope location in which the anchor was found.</param>
            <returns><see langword="true"/> if a dynamic anchor was found that matches the name, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.TryGetScopeForFirstRecursiveAnchor(System.Nullable{Corvus.Json.JsonReference}@)">
            <summary>
            Finds the scope containing the first dynamic anchor that corresponds to the given anchor name.
            </summary>
            <param name="baseScopeLocation">The base scope location in which the anchor was found.</param>
            <returns><see langword="true"/> if a dynamic anchor was found that matches the name, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.TryGetPreviousScope(System.Nullable{Corvus.Json.JsonReference}@)">
            <summary>
            Finds the previous scope Location in the stack, collapsing any identical scopes.
            </summary>
            <param name="previousScope">The previous scope Location.</param>
            <returns><see langword="true"/> if there was a previous scope.</returns>
        </member>
        <member name="M:Corvus.Json.CodeGeneration.WalkContext.ReplaceDeclarationInScope(Corvus.Json.JsonReference,Corvus.Json.CodeGeneration.TypeDeclaration)">
            <summary>
            Stashes away a subschema replacement that was made for a dynamic context.
            </summary>
            <param name="subschemaLocation">The subschema location.</param>
            <param name="previousDeclaration">The previous type declaration.</param>
        </member>
        <member name="T:Corvus.Json.CompoundDocumentResolver">
            <summary>
            Delegates <see cref="T:System.Text.Json.JsonDocument"/> resolution to one of a set of <see cref="T:Corvus.Json.IDocumentResolver"/> instances.
            </summary>
        </member>
        <member name="M:Corvus.Json.CompoundDocumentResolver.#ctor(Corvus.Json.IDocumentResolver[])">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.CompoundDocumentResolver"/> class.
            </summary>
            <param name="documentResolvers">The document resolvers to which to delegate.</param>
            <remarks>Note that we take ownership of the lifecycle of the document resolvers passed to us.</remarks>
        </member>
        <member name="M:Corvus.Json.CompoundDocumentResolver.AddDocument(System.String,System.Text.Json.JsonDocument)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.CompoundDocumentResolver.TryResolve(Corvus.Json.JsonReference)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.CompoundDocumentResolver.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.CompoundDocumentResolver.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.CompoundDocumentResolver.Dispose(System.Boolean)">
            <summary>
            Implements the dispose pattern.
            </summary>
            <param name="disposing">True if we are disposing.</param>
        </member>
        <member name="T:Corvus.Json.DocumentResolver">
            <summary>
            Resolve <see cref="T:System.Text.Json.JsonDocument"/> instances from various locations.
            </summary>
        </member>
        <member name="F:Corvus.Json.DocumentResolver.Default">
            <summary>
            The default document resolver.
            </summary>
            <remarks>
            <para>
            This provides a resolver that tries the local filesystem rooted at <see cref="P:System.Environment.CurrentDirectory"/>, then
            the <see cref="T:System.Net.Http.HttpClient"/>.
            </para>
            <para>
            Typically, in production you would configure a container with the document resolver
            and provide <see cref="T:Microsoft.Extensions.Logging.ILogger"/> implementations to track resolution failures.
            </para>
            <para>
            This <see cref="F:Corvus.Json.DocumentResolver.Default"/> resolver gives easy access to a resolver for
            common scenarios, without logging.
            </para>
            </remarks>
        </member>
        <member name="T:Corvus.Json.FileSystemDocumentResolver">
            <summary>
            Resolves a <see cref="T:System.Text.Json.JsonDocument"/> from the local filesystem.
            </summary>
        </member>
        <member name="M:Corvus.Json.FileSystemDocumentResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.FileSystemDocumentResolver"/> class.
            </summary>
            <param name="baseDirectory">The base directory for the file system resolver.</param>
        </member>
        <member name="M:Corvus.Json.FileSystemDocumentResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.FileSystemDocumentResolver"/> class.
            </summary>
            <remarks>The default base directory is <see cref="P:System.Environment.CurrentDirectory"/>.</remarks>
        </member>
        <member name="M:Corvus.Json.FileSystemDocumentResolver.AddDocument(System.String,System.Text.Json.JsonDocument)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.FileSystemDocumentResolver.TryResolve(Corvus.Json.JsonReference)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.FileSystemDocumentResolver.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.FileSystemDocumentResolver.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.FileSystemDocumentResolver.Dispose(System.Boolean)">
            <summary>
            Implements the dispose pattern.
            </summary>
            <param name="disposing">True if we are disposing.</param>
        </member>
        <member name="T:Corvus.Json.HttpClientDocumentResolver">
            <summary>
            Resolves a <see cref="T:System.Text.Json.JsonDocument"/> from an HTTP endpoint.
            </summary>
        </member>
        <member name="M:Corvus.Json.HttpClientDocumentResolver.#ctor(System.Net.Http.IHttpClientFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.HttpClientDocumentResolver"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/> to use to resolve the uri.</param>
            <param name="supportLocalhost">If true, we support resolving from localhost, otherwise false.</param>
        </member>
        <member name="M:Corvus.Json.HttpClientDocumentResolver.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.HttpClientDocumentResolver"/> class.
            </summary>
            <param name="httpClient">The <see cref="T:System.Net.Http.HttpClient"/> to use to resolve the uri.</param>
        </member>
        <member name="M:Corvus.Json.HttpClientDocumentResolver.AddDocument(System.String,System.Text.Json.JsonDocument)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.HttpClientDocumentResolver.TryResolve(Corvus.Json.JsonReference)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.HttpClientDocumentResolver.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.HttpClientDocumentResolver.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.HttpClientDocumentResolver.Dispose(System.Boolean)">
            <summary>
            Implements the dispose pattern.
            </summary>
            <param name="disposing">True if we are disposing.</param>
        </member>
        <member name="T:Corvus.Json.IDocumentResolver">
            <summary>
            A factory which can resolve a <see cref="T:System.Text.Json.JsonElement"/>
            from a <see cref="T:Corvus.Json.JsonReference"/>.
            </summary>
            <remarks>It is disposable so that it can manage the lifetime of the cached documents.</remarks>
        </member>
        <member name="M:Corvus.Json.IDocumentResolver.TryResolve(Corvus.Json.JsonReference)">
            <summary>
            Gets the element from the document at the given <see cref="P:Corvus.Json.JsonReference.Uri"/> in the <paramref name="reference"/>.
            </summary>
            <param name="reference">The reference containing the document URI.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> which provides the <see cref="T:System.Text.Json.JsonDocument"/>, or <c>null</c> if it could not be retrieved.</returns>
        </member>
        <member name="M:Corvus.Json.IDocumentResolver.AddDocument(System.String,System.Text.Json.JsonDocument)">
            <summary>
            Add an existing document to the cache.
            </summary>
            <param name="uri">The URI of the document.</param>
            <param name="document">The document to add.</param>
            <returns><c>True</c> if the document was added, otherwise false.</returns>
        </member>
        <member name="M:Corvus.Json.IDocumentResolver.Reset">
            <summary>
            Reset the document resolver.
            </summary>
        </member>
        <member name="T:IPropertyBuilder">
            <summary>
            Supplied to property builders to help them build their properties.
            </summary>
        </member>
        <member name="P:IPropertyBuilder.AnyTypeDeclarationInstance">
            <summary>
            Gets a type declaration to use as the JSON "any" type instance.
            </summary>
        </member>
        <member name="P:IPropertyBuilder.NotAnyTypeDeclarationInstance">
            <summary>
            Gets a type declaration to use as the JSON "not any" type instance.
            </summary>
        </member>
        <member name="M:IPropertyBuilder.FindAndBuildProperties(Corvus.Json.CodeGeneration.TypeDeclaration,Corvus.Json.CodeGeneration.TypeDeclaration,System.Collections.Generic.HashSet{Corvus.Json.CodeGeneration.TypeDeclaration},System.Boolean)">
            <summary>
            Find and build properties for the given types.
            </summary>
            <param name="source">The source from which to find the properties.</param>
            <param name="target">The target to which to add the properties.</param>
            <param name="typesVisited">The types we have already visited to find properties.</param>
            <param name="treatRequiredAsOptional">Whether to treat required properties as optional when adding.</param>
        </member>
    </members>
</doc>
