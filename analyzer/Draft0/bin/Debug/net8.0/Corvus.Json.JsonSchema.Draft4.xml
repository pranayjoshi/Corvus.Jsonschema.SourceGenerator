<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Corvus.Json.JsonSchema.Draft4</name>
    </assembly>
    <members>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema">
            <summary>
            Generated from JSON Schema.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
            <summary>
            Generated from JSON Schema.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
            <summary>
            Generated from JSON Schema.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
            <summary>
            Generated from JSON Schema.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
            <summary>
            Generated from JSON Schema.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
            <summary>
            Generated from JSON Schema.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
            <summary>
            Generated from JSON Schema.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
            <summary>
            Generated from JSON Schema.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Match``2(``0@,Corvus.Json.Matcher{Corvus.Json.JsonBoolean,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity,``0,``1})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonBoolean"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Match``1(Corvus.Json.Matcher{Corvus.Json.JsonBoolean,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity,``0})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonBoolean"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.IsJsonBoolean">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonBoolean"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetAsJsonBoolean(Corvus.Json.JsonBoolean@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonBoolean"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.AsSchema">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.IsSchema">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetAsSchema(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity)~Corvus.Json.JsonBoolean">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonBoolean"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity)~Corvus.Json.JsonSchema.Draft4.Schema">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity@,Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity@,Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#AdditionalItemsEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#AdditionalItemsEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#AdditionalItemsEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalItemsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalItemsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Match``2(``0@,Corvus.Json.Matcher{Corvus.Json.JsonBoolean,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity,``0,``1})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonBoolean"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Match``1(Corvus.Json.Matcher{Corvus.Json.JsonBoolean,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity,``0})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonBoolean"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.IsJsonBoolean">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonBoolean"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetAsJsonBoolean(Corvus.Json.JsonBoolean@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonBoolean"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.AsSchema">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.IsSchema">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetAsSchema(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity)~Corvus.Json.JsonBoolean">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonBoolean"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft4.Schema">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#AdditionalPropertiesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#AdditionalPropertiesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#AdditionalPropertiesEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be Schema.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a Schema.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Equals(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetDefault(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetDefault(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetDefault(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetDefault(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasDefault(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasDefault(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasDefault(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasDefault(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity@,Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity@,Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefinitionsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefinitionsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DefinitionsEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Match``2(``0@,Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.StringArray,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity,``0,``1})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Match``1(Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.StringArray,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity,``0})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A AdditionalPropertiesEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsSchema">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.IsSchema">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetAsSchema(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsStringArray">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.IsStringArray">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetAsStringArray(Corvus.Json.JsonSchema.Draft4.Schema.StringArray@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft4.Schema">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema)~Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity)~Corvus.Json.JsonSchema.Draft4.Schema.StringArray">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.StringArray)~Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be AdditionalPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a AdditionalPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DependenciesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DependenciesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.AdditionalPropertiesEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema#DependenciesEntity#AdditionalPropertiesEntity}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.EnumArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft4.Schema.EnumArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft4.Schema.EnumArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A EnumArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A EnumArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A EnumArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A EnumArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A EnumArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A EnumArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A EnumArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.EnumArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.EnumArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.EnumArray@,Corvus.Json.JsonSchema.Draft4.Schema.EnumArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.EnumArray@,Corvus.Json.JsonSchema.Draft4.Schema.EnumArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#EnumArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be EnumArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#EnumArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be EnumArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#EnumArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be EnumArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be EnumArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#EnumArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be EnumArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a EnumArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a EnumArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a EnumArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a EnumArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a EnumArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Equals(Corvus.Json.JsonSchema.Draft4.Schema.EnumArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity@,Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity@,Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMaximumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ExclusiveMaximumEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMaximumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ExclusiveMaximumEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMaximumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ExclusiveMaximumEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMaximumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ExclusiveMaximumEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMaximumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMaximumEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMaximumEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMaximumEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMaximumEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMaximumEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity@,Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity@,Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMinimumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ExclusiveMinimumEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMinimumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ExclusiveMinimumEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMinimumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ExclusiveMinimumEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMinimumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ExclusiveMinimumEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ExclusiveMinimumEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMinimumEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMinimumEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMinimumEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMinimumEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ExclusiveMinimumEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Match``2(``0@,Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity,``0,``1})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Match``1(Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity,``0})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A ItemsEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A ItemsEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A ItemsEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A ItemsEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A ItemsEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A ItemsEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A ItemsEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsSchema">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.IsSchema">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetAsSchema(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsSchemaArray">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.IsSchemaArray">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetAsSchemaArray(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity)~Corvus.Json.JsonSchema.Draft4.Schema">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema)~Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity)~Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray)~Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity@,Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity@,Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ItemsEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ItemsEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#ItemsEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be ItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ItemsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ItemsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a ItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#MultipleOfEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#MultipleOfEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#MultipleOfEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#MultipleOfEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be MultipleOfEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a MultipleOfEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity"/> struct.
            </summary>
            <param name = "value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Decimal)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from decimal.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Double)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from double.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Half)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Single)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from float.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Byte)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from byte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Int16)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from short.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Int32)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from int.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Int64)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from long.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.SByte)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.UInt16)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from ushort.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.UInt32)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from uint.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.UInt64)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from ulong.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.Int128)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Explicit(System.UInt128)~Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_LessThan(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_GreaterThan(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_LessThanOrEqual(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_GreaterThanOrEqual(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Addition(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Subtraction(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Multiply(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Division(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)">
            <summary>
            Divides two values.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Increment(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)">
            <summary>
            Increments the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.op_Decrement(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity)">
            <summary>
            Decrements the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Compare(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@,Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Compare with another number.
            </summary>
            <param name = "lhs">The lhs of the comparison.</param>
            <param name = "rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PatternPropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PatternPropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PatternPropertiesEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveInteger}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveInteger}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveInteger}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveInteger}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveInteger.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveInteger.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveInteger.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveInteger.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveInteger.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveInteger.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Equals(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/> struct.
            </summary>
            <param name = "value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Decimal)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from decimal.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Double)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from double.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Half)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Single)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from float.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Byte)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from byte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Int16)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from short.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Int32)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from int.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Int64)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from long.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.SByte)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.UInt16)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from ushort.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.UInt32)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from uint.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.UInt64)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from ulong.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.Int128)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Explicit(System.UInt128)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_LessThan(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_GreaterThan(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_LessThanOrEqual(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_GreaterThanOrEqual(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Addition(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Subtraction(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Multiply(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Division(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)">
            <summary>
            Divides two values.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Increment(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)">
            <summary>
            Increments the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.op_Decrement(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)">
            <summary>
            Decrements the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Compare(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Compare with another number.
            </summary>
            <param name = "lhs">The lhs of the comparison.</param>
            <param name = "rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.AsPositiveInteger">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.IsPositiveInteger">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.TryGetAsPositiveInteger(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.AsDefaultValue0">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.IsDefaultValue0">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.TryGetAsDefaultValue0(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PositiveIntegerDefault0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveIntegerDefault0.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveIntegerDefault0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveIntegerDefault0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveIntegerDefault0.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PositiveIntegerDefault0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Equals(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A DefaultValue0 instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A DefaultValue0 instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A DefaultValue0 instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A DefaultValue0 instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A DefaultValue0 instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A DefaultValue0 instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A DefaultValue0 instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0#DefaultValue0}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefaultValue0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0#DefaultValue0}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefaultValue0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0#DefaultValue0}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefaultValue0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0#DefaultValue0}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefaultValue0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PositiveIntegerDefault0#DefaultValue0}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be DefaultValue0.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefaultValue0.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefaultValue0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefaultValue0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefaultValue0.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a DefaultValue0.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Equals(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Decimal)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from decimal.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Double)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from double.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Half)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Single)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from float.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Byte)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from byte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Int16)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from short.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Int32)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from int.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Int64)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from long.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.SByte)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.UInt16)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from ushort.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.UInt32)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from uint.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.UInt64)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from ulong.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.Int128)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(System.UInt128)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_LessThan(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_GreaterThan(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_LessThanOrEqual(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_GreaterThanOrEqual(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Addition(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Subtraction(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Multiply(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Division(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)">
            <summary>
            Divides two values.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Increment(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)">
            <summary>
            Increments the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Decrement(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)">
            <summary>
            Decrements the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Compare(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0@)">
            <summary>
            Compare with another number.
            </summary>
            <param name = "lhs">The lhs of the comparison.</param>
            <param name = "rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(System.String)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from string.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type DefaultValue0.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type DefaultValue0.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type DefaultValue0.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type DefaultValue0.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type DefaultValue0.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type DefaultValue0.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type DefaultValue0.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <typeparam name = "T8">The type of the eighth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <param name = "eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0"/> struct.
            </summary>
            <param name = "value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name = "value">The value to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref = "T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Decimal)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from decimal.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Double)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from double.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Half)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Single)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from float.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Byte)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from byte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Int16)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from short.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Int32)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from int.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Int64)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from long.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.SByte)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.UInt16)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from ushort.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.UInt32)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from uint.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.UInt64)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from ulong.
            </summary>
            <param name = "value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.Int128)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Explicit(System.UInt128)~Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_LessThan(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_GreaterThan(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_LessThanOrEqual(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Less than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_GreaterThanOrEqual(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Greater than operator.
            </summary>
            <param name = "left">The LHS of the comparison.</param>
            <param name = "right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Addition(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Subtraction(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Multiply(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Division(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)">
            <summary>
            Divides two values.
            </summary>
            <param name = "left">The left hand side.</param>
            <param name = "right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Increment(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)">
            <summary>
            Increments the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.op_Decrement(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0)">
            <summary>
            Decrements the value.
            </summary>
            <param name = "value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Compare(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@,Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Compare with another number.
            </summary>
            <param name = "lhs">The lhs of the comparison.</param>
            <param name = "rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames">
            <summary>
            The well-known property names in the JSON object.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AdditionalItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AdditionalItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AdditionalItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AdditionalItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AdditionalPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AdditionalProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AdditionalProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AdditionalProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AllOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AllOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AllOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AllOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AnyOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AnyOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AnyOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.AnyOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.DefaultUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Default"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Default">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Default"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.DefinitionsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Definitions"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Definitions">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Definitions"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.DependenciesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Dependencies"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Dependencies">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Dependencies"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.DescriptionUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Description"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Description">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Description"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.EnumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Enum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Enum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Enum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ExclusiveMaximumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ExclusiveMaximum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ExclusiveMaximum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ExclusiveMaximum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ExclusiveMinimumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ExclusiveMinimum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ExclusiveMinimum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ExclusiveMinimum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.FormatUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Format"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Format">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Format"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.IdUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Id"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Id">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Id"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.ItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Items"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Items">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Items"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaximumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Maximum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Maximum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Maximum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxLengthUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxLength"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxLength">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxLength"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MaxProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinimumUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Minimum"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Minimum">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Minimum"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinLengthUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinLength"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinLength">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinLength"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MinProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MultipleOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MultipleOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MultipleOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.MultipleOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.NotUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Not"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Not">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Not"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.OneOfUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.OneOf"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.OneOf">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.OneOf"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.PatternUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Pattern"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Pattern">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Pattern"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.PatternPropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.PatternProperties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.PatternProperties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.PatternProperties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.PropertiesUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Properties"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Properties">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Properties"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.RequiredUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Required"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Required">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Required"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.SchemaValueUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.SchemaValue"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.SchemaValue">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.SchemaValue"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.TitleUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Title"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Title">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Title"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.TypeUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Type"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Type">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.Type"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.UniqueItemsUtf8">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.UniqueItems"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.UniqueItems">
            <summary>
            JSON property name for <see cref = "F:Corvus.Json.JsonSchema.Draft4.Schema.JsonPropertyNames.UniqueItems"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItems">
            <summary>
            Gets the (optional) <c>additionalItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AdditionalProperties">
            <summary>
            Gets the (optional) <c>additionalProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AllOf">
            <summary>
            Gets the (optional) <c>allOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.AnyOf">
            <summary>
            Gets the (optional) <c>anyOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Default">
            <summary>
            Gets the (optional) <c>default</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Definitions">
            <summary>
            Gets the (optional) <c>definitions</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Dependencies">
            <summary>
            Gets the (optional) <c>dependencies</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Description">
            <summary>
            Gets the (optional) <c>description</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Enum">
            <summary>
            Gets the (optional) <c>enum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximum">
            <summary>
            Gets the (optional) <c>exclusiveMaximum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimum">
            <summary>
            Gets the (optional) <c>exclusiveMinimum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Format">
            <summary>
            Gets the (optional) <c>format</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Id">
            <summary>
            Gets the (optional) <c>id</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Items">
            <summary>
            Gets the (optional) <c>items</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Maximum">
            <summary>
            Gets the (optional) <c>maximum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MaxItems">
            <summary>
            Gets the (optional) <c>maxItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MaxLength">
            <summary>
            Gets the (optional) <c>maxLength</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MaxProperties">
            <summary>
            Gets the (optional) <c>maxProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Minimum">
            <summary>
            Gets the (optional) <c>minimum</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MinItems">
            <summary>
            Gets the (optional) <c>minItems</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MinLength">
            <summary>
            Gets the (optional) <c>minLength</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MinProperties">
            <summary>
            Gets the (optional) <c>minProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.MultipleOf">
            <summary>
            Gets the (optional) <c>multipleOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Not">
            <summary>
            Gets the (optional) <c>not</c> property.
            </summary>
            <remarks>
            <para>
            Core schema meta-schema
            </para>
            </remarks>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.OneOf">
            <summary>
            Gets the (optional) <c>oneOf</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Pattern">
            <summary>
            Gets the (optional) <c>pattern</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PatternProperties">
            <summary>
            Gets the (optional) <c>patternProperties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Properties">
            <summary>
            Gets the (optional) <c>properties</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Required">
            <summary>
            Gets the (optional) <c>required</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaValue">
            <summary>
            Gets the (optional) <c>$schema</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Title">
            <summary>
            Gets the (optional) <c>title</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.Type">
            <summary>
            Gets the (optional) <c>type</c> property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItems">
            <summary>
            Gets the (optional) <c>uniqueItems</c> property.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Create(System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonAny},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.EnumArray},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger},System.Nullable{Corvus.Json.JsonNumber},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray},System.Nullable{Corvus.Json.JsonRegex},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.StringArray},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonString},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity},System.Nullable{Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity})">
            <summary>
            Creates an instance of a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithAdditionalItems(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalItemsEntity@)">
            <summary>
            Sets additionalItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithAdditionalProperties(Corvus.Json.JsonSchema.Draft4.Schema.AdditionalPropertiesEntity@)">
            <summary>
            Sets additionalProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithAllOf(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@)">
            <summary>
            Sets allOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithAnyOf(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@)">
            <summary>
            Sets anyOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithDefault(Corvus.Json.JsonAny@)">
            <summary>
            Sets default.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithDefinitions(Corvus.Json.JsonSchema.Draft4.Schema.DefinitionsEntity@)">
            <summary>
            Sets definitions.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithDependencies(Corvus.Json.JsonSchema.Draft4.Schema.DependenciesEntity@)">
            <summary>
            Sets dependencies.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithDescription(Corvus.Json.JsonString@)">
            <summary>
            Sets description.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithEnum(Corvus.Json.JsonSchema.Draft4.Schema.EnumArray@)">
            <summary>
            Sets enum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithExclusiveMaximum(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMaximumEntity@)">
            <summary>
            Sets exclusiveMaximum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithExclusiveMinimum(Corvus.Json.JsonSchema.Draft4.Schema.ExclusiveMinimumEntity@)">
            <summary>
            Sets exclusiveMinimum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithFormat(Corvus.Json.JsonString@)">
            <summary>
            Sets format.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithId(Corvus.Json.JsonString@)">
            <summary>
            Sets id.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithItems(Corvus.Json.JsonSchema.Draft4.Schema.ItemsEntity@)">
            <summary>
            Sets items.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMaximum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets maximum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMaxItems(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Sets maxItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMaxLength(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Sets maxLength.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMaxProperties(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger@)">
            <summary>
            Sets maxProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMinimum(Corvus.Json.JsonNumber@)">
            <summary>
            Sets minimum.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMinItems(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Sets minItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMinLength(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Sets minLength.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMinProperties(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0@)">
            <summary>
            Sets minProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithMultipleOf(Corvus.Json.JsonSchema.Draft4.Schema.MultipleOfEntity@)">
            <summary>
            Sets multipleOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithNot(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Sets not.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithOneOf(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@)">
            <summary>
            Sets oneOf.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithPattern(Corvus.Json.JsonRegex@)">
            <summary>
            Sets pattern.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithPatternProperties(Corvus.Json.JsonSchema.Draft4.Schema.PatternPropertiesEntity@)">
            <summary>
            Sets patternProperties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithProperties(Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity@)">
            <summary>
            Sets properties.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithRequired(Corvus.Json.JsonSchema.Draft4.Schema.StringArray@)">
            <summary>
            Sets required.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithSchemaValue(Corvus.Json.JsonString@)">
            <summary>
            Sets $schema.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithTitle(Corvus.Json.JsonString@)">
            <summary>
            Sets title.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithType(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity@)">
            <summary>
            Sets type.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.WithUniqueItems(Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity@)">
            <summary>
            Sets uniqueItems.
            </summary>
            <param name = "value">The value to set.</param>
            <returns>The entity with the updated property.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.__TryGetCorvusLocalPropertiesValidator(Corvus.Json.JsonObjectProperty@,System.Boolean,Corvus.Json.Internal.ObjectPropertyValidator@)">
            <summary>
            Tries to get the validator for the given property.
            </summary>
            <param name = "property">The property for which to get the validator.</param>
            <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            <returns><c>True</c> if the validator was found.</returns>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity@,Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be PropertiesEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a PropertiesEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity">
            <summary>
            Conversion from JsonObject.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Get the property with the given name.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Item(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Keys">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#Values">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.System#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name = "source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Corvus#Json#IJsonObject{Corvus#Json#JsonSchema#Draft4#Schema#PropertiesEntity}#SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.TryGetProperty(System.String,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Get a property.
            </summary>
            <param name = "utf8Name">The name of the property as a UTF8 string.</param>
            <param name = "value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.SetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Sets the given property value.
            </summary>
            <param name = "name">The name of the property.</param>
            <param name = "value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#ContainsKey(Corvus.Json.JsonPropertyName)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.System#Collections#Generic#IReadOnlyDictionary{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}#TryGetValue(Corvus.Json.JsonPropertyName,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,Corvus#Json#JsonSchema#Draft4#Schema}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.GetPropertyBacking">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref = "T:Corvus.Json.JsonPropertyName"/> to <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.PropertiesEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Add(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Add an item to the array.
            </summary>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Add(Corvus.Json.JsonSchema.Draft4.Schema[])">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft4.Schema})">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Insert(System.Int32,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Insert an item into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the item.</param>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft4.Schema})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the items.</param>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Replace(Corvus.Json.JsonSchema.Draft4.Schema@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Replace the first instance of the given value with the new value, even if the items are identical.
            </summary>
            <param name = "oldValue">The item to remove.</param>
            <param name = "newValue">The item to insert.</param>
            <returns>An instance of the array with the item replaced.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.SetItem(System.Int32,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Set the item at the given index.
            </summary>
            <param name = "index">The index at which to set the item.</param>
            <param name = "value">The value to set.</param>
            <returns>An instance of the array with the item set to the given value.</returns>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name = "index">The index at which to retrieve the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Create(System.ReadOnlySpan{Corvus.Json.JsonSchema.Draft4.Schema})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft4.Schema@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft4.Schema@,Corvus.Json.JsonSchema.Draft4.Schema@,Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A SchemaArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromItems(Corvus.Json.JsonSchema.Draft4.Schema[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft4.Schema})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonSchema#Draft4#Schema}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonSchema#Draft4#Schema}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Remove(Corvus.Json.JsonSchema.Draft4.Schema@)">
            <summary>
            Remove the specified item from the array.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@,Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@,Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#SchemaArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SchemaArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SchemaArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Equals(Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SchemaArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@,Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@,Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#SimpleTypes}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#SimpleTypes}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#SimpleTypes}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#SimpleTypes}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypes.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypes.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Equals(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Match``2(``0@,System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "matchArray">The function to call if the value matches the JSON value "\"array\"".</param>
            <param name = "matchBoolean">The function to call if the value matches the JSON value "\"boolean\"".</param>
            <param name = "matchInteger">The function to call if the value matches the JSON value "\"integer\"".</param>
            <param name = "matchNull">The function to call if the value matches the JSON value "\"null\"".</param>
            <param name = "matchNumber">The function to call if the value matches the JSON value "\"number\"".</param>
            <param name = "matchObject">The function to call if the value matches the JSON value "\"object\"".</param>
            <param name = "matchString">The function to call if the value matches the JSON value "\"string\"".</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Match``1(System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0})">
            <summary>
            Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "matchArray">The function to call if the value matches the JSON value "\"array\"".</param>
            <param name = "matchBoolean">The function to call if the value matches the JSON value "\"boolean\"".</param>
            <param name = "matchInteger">The function to call if the value matches the JSON value "\"integer\"".</param>
            <param name = "matchNull">The function to call if the value matches the JSON value "\"null\"".</param>
            <param name = "matchNumber">The function to call if the value matches the JSON value "\"number\"".</param>
            <param name = "matchObject">The function to call if the value matches the JSON value "\"object\"".</param>
            <param name = "matchString">The function to call if the value matches the JSON value "\"string\"".</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues">
            <summary>
            Permitted values.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Array">
            <summary>
            Gets "array" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.ArrayUtf8">
            <summary>
            Gets "array" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Boolean">
            <summary>
            Gets "boolean" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.BooleanUtf8">
            <summary>
            Gets "boolean" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Integer">
            <summary>
            Gets "integer" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.IntegerUtf8">
            <summary>
            Gets "integer" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Null">
            <summary>
            Gets "null" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.NullUtf8">
            <summary>
            Gets "null" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Number">
            <summary>
            Gets "number" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.NumberUtf8">
            <summary>
            Gets "number" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Object">
            <summary>
            Gets "object" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.ObjectUtf8">
            <summary>
            Gets "object" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.String">
            <summary>
            Gets "string" as a JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.StringUtf8">
            <summary>
            Gets "string" as a UTF8 string.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Item0">
            <summary>
            Gets "array" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Item1">
            <summary>
            Gets "boolean" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Item2">
            <summary>
            Gets "integer" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Item3">
            <summary>
            Gets "null" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Item4">
            <summary>
            Gets "number" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Item5">
            <summary>
            Gets "object" as a JSON value.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EnumValues.Item6">
            <summary>
            Gets "string" as a JSON value.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.op_Implicit(System.String)~Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes">
            <summary>
            Conversion from string.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type SimpleTypes.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <typeparam name = "T8">The type of the eighth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <param name = "eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Add(Corvus.Json.JsonString@)">
            <summary>
            Add an item to the array.
            </summary>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Add(Corvus.Json.JsonString[])">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonString})">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Insert(System.Int32,Corvus.Json.JsonString@)">
            <summary>
            Insert an item into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the item.</param>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonString})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the items.</param>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Replace(Corvus.Json.JsonString@,Corvus.Json.JsonString@)">
            <summary>
            Replace the first instance of the given value with the new value, even if the items are identical.
            </summary>
            <param name = "oldValue">The item to remove.</param>
            <param name = "newValue">The item to insert.</param>
            <returns>An instance of the array with the item replaced.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.SetItem(System.Int32,Corvus.Json.JsonString@)">
            <summary>
            Set the item at the given index.
            </summary>
            <param name = "index">The index at which to set the item.</param>
            <param name = "value">The value to set.</param>
            <returns>An instance of the array with the item set to the given value.</returns>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name = "index">The index at which to retrieve the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.StringArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft4.Schema.StringArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft4.Schema.StringArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Create(System.ReadOnlySpan{Corvus.Json.JsonString})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromItems(Corvus.Json.JsonString@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A StringArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromItems(Corvus.Json.JsonString@,Corvus.Json.JsonString@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A StringArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromItems(Corvus.Json.JsonString@,Corvus.Json.JsonString@,Corvus.Json.JsonString@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A StringArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromItems(Corvus.Json.JsonString[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonString})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonString}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonString}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Remove(Corvus.Json.JsonString@)">
            <summary>
            Remove the specified item from the array.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.StringArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.StringArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.StringArray@,Corvus.Json.JsonSchema.Draft4.Schema.StringArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.StringArray@,Corvus.Json.JsonSchema.Draft4.Schema.StringArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#StringArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be StringArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a StringArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.StringArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Equals(Corvus.Json.JsonSchema.Draft4.Schema.StringArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.StringArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Match``2(``0@,Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray,``0,``1},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity,``0,``1})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "context">The context to pass to the match function.</param>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Match``1(Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray,``0},Corvus.Json.Matcher{Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity,``0})">
            <summary>
            Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
            </summary>
            <param name = "match0">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/> type.</param>
            <param name = "match1">The function to call if the value matches the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> type.</param>
            <param name = "defaultMatch">The fallback match.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromItems``1(``0[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <typeparam name = "TItem">The type of the items in the list.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromItems``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the items in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromItems``2(``0@,``1@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <typeparam name = "TItem1">The type of the first item in the list.</typeparam>
            <typeparam name = "TItem2">The type of the second item in the list.</typeparam>
            <typeparam name = "TItem3">The type of the third item in the list.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A TypeEntity instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonAny}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AsSimpleTypes">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.IsSimpleTypes">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.TryGetAsSimpleTypes(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AsSimpleTypesArray">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.IsSimpleTypesArray">
            <summary>
            Gets a value indicating whether this is a valid <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.TryGetAsSimpleTypesArray(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray@)">
            <summary>
            Gets the value as a <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/>.
            </summary>
            <param name = "result">The result of the conversion.</param>
            <returns><c>True</c> if the conversion was valid.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity)~Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray">
            <summary>
            Conversion to <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity">
            <summary>
            Conversion from <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/>.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity@,Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity@,Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be TypeEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a TypeEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Add(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Add an item to the array.
            </summary>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Add(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes[])">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes})">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Insert(System.Int32,Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Insert an item into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the item.</param>
            <param name = "item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <param name = "index">The index at which to add the items.</param>
            <param name = "items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Replace(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@,Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Replace the first instance of the given value with the new value, even if the items are identical.
            </summary>
            <param name = "oldValue">The item to remove.</param>
            <param name = "newValue">The item to insert.</param>
            <returns>An instance of the array with the item replaced.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.SetItem(System.Int32,Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Set the item at the given index.
            </summary>
            <param name = "index">The index at which to set the item.</param>
            <param name = "value">The value to set.</param>
            <returns>An instance of the array with the item set to the given value.</returns>
        </member>
        <member name="F:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name = "index">The index at which to retrieve the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref = "T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray)~System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny}">
            <summary>
            Conversion from immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.op_Implicit(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray">
            <summary>s
            Conversion to immutable list.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray">
            <summary>
            Conversion from JsonArray.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Create(System.ReadOnlySpan{Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromItems(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A SimpleTypesArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromItems(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@,Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A SimpleTypesArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromItems(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@,Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@,Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The thirdvalue from which to construct the instance.</param>
            <returns>A SimpleTypesArray instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromItems(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes[])">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes})">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonSchema#Draft4#Schema#SimpleTypes}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.System#Collections#Generic#IReadOnlyCollection{Corvus#Json#JsonSchema#Draft4#Schema#SimpleTypes}#Count">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetImmutableList">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref = "T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref = "T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name = "oldItem">The item to remove.</param>
            <param name = "newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name = "index">The start index of the range to remove.</param>
            <param name = "count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref = "T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name = "index">The index at which to add the element.</param>
            <param name = "values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref = "T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref = "T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonArray{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Remove(Corvus.Json.JsonSchema.Draft4.Schema.SimpleTypes@)">
            <summary>
            Remove the specified item from the array.
            </summary>
            <param name = "item">The item to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref = "T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray@,Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray@,Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#TypeEntity#SimpleTypesArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be SimpleTypesArray.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a SimpleTypesArray.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Equals(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.SimpleTypesArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Implicit(System.String)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity">
            <summary>
            Conversion from string.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.op_Explicit(Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type TypeEntity.
            </summary>
            <typeparam name = "T1">The type of the first value.</typeparam>
            <typeparam name = "T2">The type of the second value.</typeparam>
            <typeparam name = "T3">The type of the third value.</typeparam>
            <typeparam name = "T4">The type of the fourth value.</typeparam>
            <typeparam name = "T5">The type of the fifth value.</typeparam>
            <typeparam name = "T6">The type of the sixth value.</typeparam>
            <typeparam name = "T7">The type of the seventh value.</typeparam>
            <typeparam name = "T8">The type of the eighth value.</typeparam>
            <param name = "buffer">The buffer into which to concatenate the values.</param>
            <param name = "firstValue">The first value.</param>
            <param name = "secondValue">The second value.</param>
            <param name = "thirdValue">The third value.</param>
            <param name = "fourthValue">The fourth value.</param>
            <param name = "fifthValue">The fifth value.</param>
            <param name = "sixthValue">The sixth value.</param>
            <param name = "seventhValue">The seventh value.</param>
            <param name = "eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name = "chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.TypeEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity">
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
            <summary>
            Generated from JSON Schema.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity">
            <summary>
            Conversion from JsonBoolean.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.op_Implicit(System.Boolean)~Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity">
            <summary>
            Conversion from bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name = "result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity"/> struct.
            </summary>
            <param name = "value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.SchemaLocation">
            <summary>
            Gets the schema location from which this type was generated.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.DefaultInstance">
            <summary>
            Gets the default instance of the type.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.op_Implicit(Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity@)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name = "value">The value from which to convert.</param>
            <exception cref = "T:System.InvalidOperationException">The value was not compatible with this type.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.op_Equality(Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity@,Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity@)">
            <summary>
            Equality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.op_Inequality(Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity@,Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity@)">
            <summary>
            Inequality operator.
            </summary>
            <param name = "left">The lhs.</param>
            <param name = "right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name = "value">The <see cref = "T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref = "P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref = "F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref = "T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name = "value">The <see cref = "T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref = "T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name = "TValue">The type of the value.</typeparam>
            <param name = "value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#UniqueItemsEntity}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#UniqueItemsEntity}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a number value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#UniqueItemsEntity}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Corvus#Json#IJsonValue{Corvus#Json#JsonSchema#Draft4#Schema#UniqueItemsEntity}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>This will be UniqueItemsEntity.Undefined if the type is not compatible.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a UniqueItemsEntity.
            </summary>
            <param name = "utf8Json">The json string to parse.</param>
            <param name = "options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref = "T:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name = "reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name = "TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Equals(Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity@)">
            <summary>
            Equality comparison.
            </summary>
            <param name = "other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.UniqueItemsEntity.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSchema.Draft4.Schema.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
    </members>
</doc>
