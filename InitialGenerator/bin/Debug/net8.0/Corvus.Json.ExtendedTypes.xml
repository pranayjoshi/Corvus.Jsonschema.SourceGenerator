<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Corvus.Json.ExtendedTypes</name>
    </assembly>
    <members>
        <member name="T:Corvus.Json.BinaryJsonNumber">
            <summary>
            A Binary representation of a JSON number.
            </summary>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Int128)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.UInt128)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="T:Corvus.Json.BinaryJsonNumber.Kind">
            <summary>
            The numeric type backing the number.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.None">
            <summary>
            No numeric type specified.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Byte">
            <summary>
            Represents a <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Byte"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Decimal">
            <summary>
            Represents a <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Decimal"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Double">
            <summary>
            Represents a <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Double"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Int16">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Int16"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Int32">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Int32"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Int64">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Int64"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.SByte">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.SByte"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Single">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Single"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.UInt16">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.UInt16"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.UInt32">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.UInt32"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.UInt64">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.UInt64"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.UInt128">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.UInt128"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Int128">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Int128"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Half">
            <summary>
            Represents an <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.Half"/>.
            </summary>
        </member>
        <member name="F:Corvus.Json.BinaryJsonNumber.Kind.Bool">
            <summary>
            Represents a  <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.BinaryJsonNumber.None">
            <summary>
            Gets an instance of <see cref="T:Corvus.Json.BinaryJsonNumber"/> whose numeric kind is <see cref="F:Corvus.Json.BinaryJsonNumber.Kind.None"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.BinaryJsonNumber.One">
            <summary>
            Gets the BinaryJsonNumber for 1.
            </summary>
        </member>
        <member name="P:Corvus.Json.BinaryJsonNumber.Radix">
            <summary>
            Gets the Radix for the BinaryJsonNumber (2).
            </summary>
        </member>
        <member name="P:Corvus.Json.BinaryJsonNumber.Zero">
            <summary>
            Gets the BinaryJsonNumber for 0.
            </summary>
        </member>
        <member name="P:Corvus.Json.BinaryJsonNumber.AdditiveIdentity">
            <summary>
            Gets the BinaryJsonNumber for 0.
            </summary>
        </member>
        <member name="P:Corvus.Json.BinaryJsonNumber.MultiplicativeIdentity">
            <summary>
            Gets the BinaryJsonNumber for 1.
            </summary>
        </member>
        <member name="P:Corvus.Json.BinaryJsonNumber.HasValue">
            <summary>
            Gets a value indicating whether the binary number has a value.
            </summary>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Equality(Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Equality(Corvus.Json.BinaryJsonNumber@,System.Text.Json.JsonElement@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Equality(System.Text.Json.JsonElement@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Inequality(Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Inequality(Corvus.Json.BinaryJsonNumber@,System.Text.Json.JsonElement@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Inequality(System.Text.Json.JsonElement@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_LessThan(Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_LessThanOrEqual(Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Less than or equals operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_GreaterThan(Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_GreaterThanOrEqual(Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Greater than or equals operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_LessThan(Corvus.Json.BinaryJsonNumber@,System.Text.Json.JsonElement@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_LessThanOrEqual(Corvus.Json.BinaryJsonNumber@,System.Text.Json.JsonElement@)">
            <summary>
            Less than or equals operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_GreaterThan(Corvus.Json.BinaryJsonNumber@,System.Text.Json.JsonElement@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_GreaterThanOrEqual(Corvus.Json.BinaryJsonNumber@,System.Text.Json.JsonElement@)">
            <summary>
            Greater than or equals operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_LessThan(System.Text.Json.JsonElement@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_LessThanOrEqual(System.Text.Json.JsonElement@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Less than or equals operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_GreaterThan(System.Text.Json.JsonElement@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_GreaterThanOrEqual(System.Text.Json.JsonElement,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Greater than or equals operator.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">The right hand side of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Addition(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Addition operator.
            </summary>
            <param name="left">The left hand side of the addition.</param>
            <param name="right">The right hand side of the addition.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Subtraction(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="left">The left hand side of the subtraction.</param>
            <param name="right">The right hand side of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Multiply(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="left">The left hand side of the multiplication.</param>
            <param name="right">The right hand side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Division(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Division operator.
            </summary>
            <param name="left">The left hand side of the division.</param>
            <param name="right">The right hand side of the division.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Decrement(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Decrement operator.
            </summary>
            <param name="value">The number to decrement.</param>
            <returns>The decremented number.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Equality(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            The equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Inequality(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            The inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_Increment(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Increment operator.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>The incremented value.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_UnaryNegation(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Negation operator.
            </summary>
            <param name="value">The value on which to operate.</param>
            <returns>The negated value.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.op_UnaryPlus(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Unary plus operator.
            </summary>
            <param name="value">The value on which to operate.</param>
            <returns>The unary plus value.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Abs(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Computes the absolute of a value.
            </summary>
            <param name="value">The value for which to calculate the absolute.</param>
            <returns>The absolute value.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsCanonical(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is in its canonical representation.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is in its canonical representation.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsComplexNumber(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is a complex number.
            </summary>
            <param name="value">The value to check.</param>
            <returns>Always <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsEvenInteger(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is an even integer.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is an even integer.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsFinite(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is finite.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is finite.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsImaginaryNumber(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is an imaginary number.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is imaginary.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsInfinity(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is infinity.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is infinity.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsInteger(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is an integer.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is an integer.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsNaN(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is NaN.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is NaN.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsNegative(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is negative.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is negative.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsNegativeInfinity(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is negative infinity.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is negative infinity.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsNormal(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is normal.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is normal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsOddInteger(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is an odd integer.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is an odd integer.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsPositive(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is a positive number.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is positive.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsPositiveInfinity(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is positive infinity.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is positive infinity.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsRealNumber(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is real.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is real.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsSubnormal(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is .
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is .</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsZero(Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determine if a value is Zero.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the value is Zero.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.MaxMagnitude(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Compares two values to compute which is greater.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>The greater of the two values.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.MaxMagnitudeNumber(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Compares two values to compute which is greater. If one is NaN, it returns the other.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>The greater of the two values.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.MinMagnitude(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Compares two values to compute which is lesser.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>The lesser of the two values.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.MinMagnitudeNumber(Corvus.Json.BinaryJsonNumber,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Compares two values to compute which is lesser. If one is NaN, it returns the other.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>The lesser of the two values.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format was not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Parse a string into a <see cref="T:Corvus.Json.BinaryJsonNumber"/>.
            </summary>
            <param name="s">The value to parse.</param>
            <param name="style">The number styles to use.</param>
            <param name="provider">The format provider.</param>
            <returns>An instance of a binary JSON number.</returns>
            <remarks>
            If you wish to control the underlying numeric kind of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> then
            you should parse into that underlying type, and create a <see cref="T:Corvus.Json.BinaryJsonNumber"/> from the value.
            </remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Parse a string into a <see cref="T:Corvus.Json.BinaryJsonNumber"/>.
            </summary>
            <param name="s">The value to parse.</param>
            <param name="style">The number styles to use.</param>
            <param name="provider">The format provider.</param>
            <returns>An instance of a binary JSON number.</returns>
            <remarks>
            If you wish to control the underlying numeric kind of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> then
            you should parse into that underlying type, and create a <see cref="T:Corvus.Json.BinaryJsonNumber"/> from the value.
            </remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Try to parse a string into a <see cref="T:Corvus.Json.BinaryJsonNumber"/>.
            </summary>
            <param name="s">The value to parse.</param>
            <param name="style">The number styles to use.</param>
            <param name="provider">The format provider.</param>
            <param name="result">The parsed number.</param>
            <returns><see langword="true"/> if the value was parsed successfully.</returns>
            <remarks>
            If you wish to control the underlying numeric kind of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> then
            you should parse into that underlying type, and create a <see cref="T:Corvus.Json.BinaryJsonNumber"/> from the value.
            </remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Try to parse a string into a <see cref="T:Corvus.Json.BinaryJsonNumber"/>.
            </summary>
            <param name="s">The value to parse.</param>
            <param name="style">The number styles to use.</param>
            <param name="provider">The format provider.</param>
            <param name="result">The parsed number.</param>
            <returns><see langword="true"/> if the value was parsed successfully.</returns>
            <remarks>
            If you wish to control the underlying numeric kind of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> then
            you should parse into that underlying type, and create a <see cref="T:Corvus.Json.BinaryJsonNumber"/> from the value.
            </remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Parse a string into a <see cref="T:Corvus.Json.BinaryJsonNumber"/>.
            </summary>
            <param name="s">The value to parse.</param>
            <param name="provider">The format provider.</param>
            <returns>An instance of a binary JSON number.</returns>
            <remarks>
            If you wish to control the underlying numeric kind of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> then
            you should parse into that underlying type, and create a <see cref="T:Corvus.Json.BinaryJsonNumber"/> from the value.
            </remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Try to parse a string into a <see cref="T:Corvus.Json.BinaryJsonNumber"/>.
            </summary>
            <param name="s">The value to parse.</param>
            <param name="provider">The format provider.</param>
            <param name="result">The parsed number.</param>
            <returns><see langword="true"/> if the value was parsed successfully.</returns>
            <remarks>
            If you wish to control the underlying numeric kind of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> then
            you should parse into that underlying type, and create a <see cref="T:Corvus.Json.BinaryJsonNumber"/> from the value.
            </remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parse a string into a <see cref="T:Corvus.Json.BinaryJsonNumber"/>.
            </summary>
            <param name="s">The value to parse.</param>
            <param name="provider">The format provider.</param>
            <returns>An instance of a binary JSON number.</returns>
            <remarks>
            If you wish to control the underlying numeric kind of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> then
            you should parse into that underlying type, and create a <see cref="T:Corvus.Json.BinaryJsonNumber"/> from the value.
            </remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.TryParse(System.String,System.IFormatProvider,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Try to parse a string into a <see cref="T:Corvus.Json.BinaryJsonNumber"/>.
            </summary>
            <param name="s">The value to parse.</param>
            <param name="provider">The format provider.</param>
            <param name="result">The parsed number.</param>
            <returns><see langword="true"/> if the value was parsed successfully.</returns>
            <remarks>
            If you wish to control the underlying numeric kind of the <see cref="T:Corvus.Json.BinaryJsonNumber"/> then
            you should parse into that underlying type, and create a <see cref="T:Corvus.Json.BinaryJsonNumber"/> from the value.
            </remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Equals(Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Compare two numbers in binary form.
            </summary>
            <param name="left">The binary backing for the lhs.</param>
            <param name="right">The binary backing for the rhs.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Equals(System.Text.Json.JsonElement@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Compare a binary number with a number represented by a JsonElement.
            </summary>
            <param name="jsonNumber">The jsonElement backing for the rhs.</param>
            <param name="binaryNumber">The binary backing for the lhs.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Equals(Corvus.Json.BinaryJsonNumber@,System.Text.Json.JsonElement@)">
            <summary>
            Compare a binary number with a number represented by a JsonElement.
            </summary>
            <param name="binaryNumber">The binary backing for the lhs.</param>
            <param name="jsonNumber">The jsonElement backing for the rhs.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Compare(Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Compare two numbers in binary form.
            </summary>
            <param name="left">The binary backing for the lhs.</param>
            <param name="right">The binary backing for the rhs.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Compare(Corvus.Json.BinaryJsonNumber@,System.Text.Json.JsonElement@)">
            <summary>
            Compare a number represented by a JsonElement with a binary number.
            </summary>
            <param name="left">The binary backing for the rhs.</param>
            <param name="right">The jsonElement backing for the lhs.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Compare(System.Text.Json.JsonElement@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Compare a number represented by a JsonElement with a binary number.
            </summary>
            <param name="left">The jsonElement backing for the lhs.</param>
            <param name="right">The binary backing for the rhs.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
            <exception cref="T:System.NotSupportedException">The numeric format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets a binary number from a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="jsonElement">The element from which to create the <see cref="T:Corvus.Json.BinaryJsonNumber"/>.</param>
            <returns>The <see cref="T:Corvus.Json.BinaryJsonNumber"/> created from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
            <exception cref="T:System.FormatException">The JsonElement was not in a supported format.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsMultipleOf(System.Text.Json.JsonElement,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determines if this value is a multiple of the other value.
            </summary>
            <param name="x">The value to test.</param>
            <param name="y">The factor to test.</param>
            <returns><see langword="true"/> if the value is a multiple of the given factor.</returns>
            <exception cref="T:System.NotSupportedException">The number format is not supported.</exception>
            <exception cref="T:System.OverflowException">The number could not be converted without overflow/loss of precision.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsMultipleOf(System.Decimal,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determines if this value is a multiple of the other value.
            </summary>
            <param name="x">The value to test.</param>
            <param name="y">The factor to test.</param>
            <returns><see langword="true"/> if the value is a multiple of the given factor.</returns>
            <exception cref="T:System.NotSupportedException">The number format is not supported.</exception>
            <exception cref="T:System.OverflowException">The number could not be converted without overflow/loss of precision.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsMultipleOf``1(``0,Corvus.Json.BinaryJsonNumber)">
            <summary>
            Determines if this value is a multiple of the other value.
            </summary>
            <typeparam name="TOther">The type of the number for comparison.</typeparam>
            <param name="x">The value to test.</param>
            <param name="y">The factor to test.</param>
            <returns><see langword="true"/> if the value is a multiple of the given factor.</returns>
            <exception cref="T:System.NotSupportedException">The number format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.GetMaxCharLength(Corvus.Json.BinaryJsonNumber.Kind)">
            <summary>
            Get the maximum number of characters if a number of a particular numeric kind is written to a string.
            </summary>
            <param name="numericKind">The numeric kind of the number.</param>
            <returns>The maximum possible number of characters if the number is written to a string.</returns>
            <remarks>Note that your format provider may add additional characters to the output. You should account for those when allocating a format.</remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.System#Numerics#INumberBase{Corvus#Json#BinaryJsonNumber}#TryConvertFromChecked``1(``0,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Convert from the given value.
            </summary>
            <typeparam name="TOther">The type of the other value.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the value was converted successfully.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.System#Numerics#INumberBase{Corvus#Json#BinaryJsonNumber}#TryConvertFromSaturating``1(``0,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Convert from the given value.
            </summary>
            <typeparam name="TOther">The type of the other value.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the value was converted successfully.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.System#Numerics#INumberBase{Corvus#Json#BinaryJsonNumber}#TryConvertFromTruncating``1(``0,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Convert from the given value.
            </summary>
            <typeparam name="TOther">The type of the other value.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the value was converted successfully.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.System#Numerics#INumberBase{Corvus#Json#BinaryJsonNumber}#TryConvertToChecked``1(Corvus.Json.BinaryJsonNumber,``0@)">
            <summary>
            Convert to the given value.
            </summary>
            <typeparam name="TOther">The type of the other value.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the value was converted successfully.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.System#Numerics#INumberBase{Corvus#Json#BinaryJsonNumber}#TryConvertToSaturating``1(Corvus.Json.BinaryJsonNumber,``0@)">
            <summary>
            Convert to the given value.
            </summary>
            <typeparam name="TOther">The type of the other value.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the value was converted successfully.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.System#Numerics#INumberBase{Corvus#Json#BinaryJsonNumber}#TryConvertToTruncating``1(Corvus.Json.BinaryJsonNumber,``0@)">
            <summary>
            Convert to the given value.
            </summary>
            <typeparam name="TOther">The type of the other value.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">The converted value.</param>
            <returns><see langword="true"/> if the value was converted successfully.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Equals(Corvus.Json.BinaryJsonNumber)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.GetMaxCharLength">
            <summary>
            Get the maximum number of characters if the number is written to a string.
            </summary>
            <returns>The maximum possible number of characters if the number is written to a string.</returns>
            <remarks>Note that your format provider may add additional characters to the output. You should account for those when allocating a format.</remarks>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.CreatePrecise``1">
            <summary>
            Create an instance of an <see cref="T:System.Numerics.INumberBase`1"/>.
            </summary>
            <typeparam name="TOther">The type to create.</typeparam>
            <returns>An instance of the <see cref="T:System.Numerics.INumberBase`1"/>.</returns>
            <exception cref="T:System.NotSupportedException">The number format is not supported.</exception>
            <exception cref="T:System.OverflowException">The number cannot be precisely represented as the target type without loss of precision.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.CreateChecked``1">
            <summary>
            Create an instance of an <see cref="T:System.Numerics.INumberBase`1"/>.
            </summary>
            <typeparam name="TOther">The type to create.</typeparam>
            <returns>An instance of the <see cref="T:System.Numerics.INumberBase`1"/>.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.CreateSaturating``1">
            <summary>
            Create an instance of an <see cref="T:System.Numerics.INumberBase`1"/>.
            </summary>
            <typeparam name="TOther">The type to create.</typeparam>
            <returns>An instance of the <see cref="T:System.Numerics.INumberBase`1"/>.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.CreateTruncating``1">
            <summary>
            Create an instance of an <see cref="T:System.Numerics.INumberBase`1"/>.
            </summary>
            <typeparam name="TOther">The type to create.</typeparam>
            <returns>An instance of the <see cref="T:System.Numerics.INumberBase`1"/>.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.IsMultipleOf(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Determines if this value is a multiple of the other value..
            </summary>
            <param name="multipleOf">The factor to test.</param>
            <returns><see langword="true"/> if the value is a multiple of the given factor.</returns>
            <exception cref="T:System.NotSupportedException">The number format is not supported.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Equals(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The value with which to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.Equals(System.Text.Json.JsonElement@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The value with which to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.CompareTo(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Comparison with another value.
            </summary>
            <param name="other">The value with which to compare.</param>
            <returns>0 if the values are equal, -1 if this value is less than the other, and 1 if this value is greater than the other.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.CompareTo(System.Text.Json.JsonElement@)">
            <summary>
            Comparison with another value.
            </summary>
            <param name="other">The value with which to compare.</param>
            <returns>0 if the values are equal, -1 if this value is less than the other, and 1 if this value is greater than the other.</returns>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.GetByteAsBool">
            <summary>
            Gets a byte value as a bool.
            </summary>
            <returns><see langword="false"/> if the value is zero, otherwise <see langword="true"/>.</returns>
            <exception cref="T:System.FormatException">The value was not a byte.</exception>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Write a number value to a UTF8 JSON writer.
            </summary>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter"/>.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Byte,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Decimal,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Half,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Half"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.UInt64,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.UInt128,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.UInt128"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.UInt32,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.UInt16,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Single,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.SByte,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Int64,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Int128,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Int128"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Int32,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Int16,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.WriteNumeric(System.Double,System.Span{System.Byte})">
            <summary>
            Writes a numeric value to a number backing.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> to write.</param>
            <param name="numberBacking">The number backing to which to write the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadByte(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadDecimal(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadHalf(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadUInt128(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadUInt64(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadUInt32(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadUInt16(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadSingle(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadSByte(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadInt128(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadInt64(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadInt32(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadInt16(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="M:Corvus.Json.BinaryJsonNumber.ReadDouble(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads a value from a byte array.
            </summary>
            <param name="numberBacking">The number backing from which to read the value.</param>
        </member>
        <member name="T:Corvus.Json.BinaryJsonNumber.PreciseConversionTo`1">
            <summary>
            Provides a cast between numeric types with precision and overflow verification.
            </summary>
            <typeparam name="TOut">The type of the result.</typeparam>
        </member>
        <member name="T:Corvus.Json.EncodedContentMediaTypeParseStatus">
            <summary>
            Represents the result of parsing encoded content with particular media type.
            </summary>
        </member>
        <member name="F:Corvus.Json.EncodedContentMediaTypeParseStatus.Success">
            <summary>
            The content was successfully decoded.
            </summary>
        </member>
        <member name="F:Corvus.Json.EncodedContentMediaTypeParseStatus.UnableToDecode">
            <summary>
            Unable to decode the content using the specified encoding.
            </summary>
        </member>
        <member name="F:Corvus.Json.EncodedContentMediaTypeParseStatus.UnableToParseToMediaType">
            <summary>
            Unable to parse the decoded content as the given media type.
            </summary>
        </member>
        <member name="T:Corvus.Json.JsonAny">
            <summary>
            Represents any JSON value.
            </summary>
            <summary>
            Represents any JSON value.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonAny.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonAny.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonAny.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonAny.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonAny.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonAny.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonAny.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Equality(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Inequality(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonAny.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonAny.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonAny.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonAny.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonAny.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonAny.CreateFromSerializedInstance``1(``0,System.Text.Json.JsonWriterOptions)">
            <summary>
            Create a <see cref="T:Corvus.Json.JsonAny"/> instance from an arbitrary object.
            </summary>
            <typeparam name="T">The type of the object from which to create the instance.</typeparam>
            <param name="instance">The object from which to create the instance.</param>
            <param name="options">The (optional) <see cref="T:System.Text.Json.JsonWriterOptions"/>.</param>
            <returns>A <see cref="T:Corvus.Json.JsonAny"/> derived from serializing the object.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAny.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAny.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAny.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAny.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonAny.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonAny.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonAny.Equals(Corvus.Json.JsonAny@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonAny.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonAny.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonAny.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.String)~Corvus.Json.JsonAny">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Boolean)~Corvus.Json.JsonAny">
            <summary>
            Conversion from bool.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Byte)~Corvus.Json.JsonAny">
            <summary>
            Conversion from byte.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Decimal)~Corvus.Json.JsonAny">
            <summary>
            Conversion from decimal.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Double)~Corvus.Json.JsonAny">
            <summary>
            Conversion from double.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Half)~Corvus.Json.JsonAny">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Int16)~Corvus.Json.JsonAny">
            <summary>
            Conversion from short.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Int32)~Corvus.Json.JsonAny">
            <summary>
            Conversion from int.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Int64)~Corvus.Json.JsonAny">
            <summary>
            Conversion from long.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Int128)~Corvus.Json.JsonAny">
            <summary>
            Conversion from Int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.SByte)~Corvus.Json.JsonAny">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.Single)~Corvus.Json.JsonAny">
            <summary>
            Conversion from float.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.UInt16)~Corvus.Json.JsonAny">
            <summary>
            Conversion from ushort.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.UInt32)~Corvus.Json.JsonAny">
            <summary>
            Conversion from uint.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.UInt64)~Corvus.Json.JsonAny">
            <summary>
            Conversion from ulong.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.op_Implicit(System.UInt128)~Corvus.Json.JsonAny">
            <summary>
            Conversion from UInt128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonAny.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonBase64Content">
            <summary>
            Represents a JSON base64content.
            </summary>
            <summary>
            Represents a JSON base64content.
            </summary>
            <summary>
            Represents a JSON base64content.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64Content"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64Content"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64Content"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.op_Implicit(Corvus.Json.JsonBase64Content)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonBase64Content">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.op_Implicit(Corvus.Json.JsonBase64Content)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonBase64Content">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.op_Implicit(System.String)~Corvus.Json.JsonBase64Content">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.op_Explicit(Corvus.Json.JsonBase64Content)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonBase64Content.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonBase64Content.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonBase64Content.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonBase64Content.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonBase64Content.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonBase64Content.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonBase64Content.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64Content"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64Content"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64Content.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.op_Equality(Corvus.Json.JsonBase64Content@,Corvus.Json.JsonBase64Content@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.op_Inequality(Corvus.Json.JsonBase64Content@,Corvus.Json.JsonBase64Content@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64Content}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64Content}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64Content}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64Content}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64Content.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64Content.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64Content.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64Content.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64Content.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64Content"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Equals(Corvus.Json.JsonBase64Content@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.#ctor(System.Text.Json.JsonDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64Content"/> struct.
            </summary>
            <param name="value">The json document containing the base64 content.</param>
            <remarks>
            This does not take ownership of the document. The caller should dispose of it in the usual way, once its
            use in this scope is complete.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.GetBase64EncodedString">
            <summary>
            Get the base64 encoded string.
            </summary>
            <returns>The base 64 encoded string.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.GetUtf8BytesBase64EncodedString">
            <summary>
            Get the base64 encoded string.
            </summary>
            <returns>The base 64 encoded string.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.GetDecodedBase64Bytes">
            <summary>
            Get the decoded base64 bytes.
            </summary>
            <returns>The base 64 bytes.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64Content.TryGetJsonDocument(System.Text.Json.JsonDocument@)">
            <summary>
            Try to get the JSON document from the content.
            </summary>
            <param name="result">A JSON document produced from the content, or null if the content did not represent a Base64 encoded JSON document.</param>
            <returns><c>True</c> if the document was parsed successfully.</returns>
        </member>
        <member name="T:Corvus.Json.JsonBase64ContentPre201909">
            <summary>
            Represents a JSON base64content.
            </summary>
            <summary>
            Represents a JSON base64content.
            </summary>
            <summary>
            Represents a JSON base64content.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.op_Implicit(Corvus.Json.JsonBase64ContentPre201909)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonBase64ContentPre201909">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.op_Implicit(Corvus.Json.JsonBase64ContentPre201909)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonBase64ContentPre201909">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.op_Implicit(System.String)~Corvus.Json.JsonBase64ContentPre201909">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.op_Explicit(Corvus.Json.JsonBase64ContentPre201909)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonBase64ContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonBase64ContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonBase64ContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonBase64ContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonBase64ContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonBase64ContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonBase64ContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64ContentPre201909.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.op_Equality(Corvus.Json.JsonBase64ContentPre201909@,Corvus.Json.JsonBase64ContentPre201909@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.op_Inequality(Corvus.Json.JsonBase64ContentPre201909@,Corvus.Json.JsonBase64ContentPre201909@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64ContentPre201909}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64ContentPre201909}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64ContentPre201909}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64ContentPre201909}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64ContentPre201909.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64ContentPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64ContentPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64ContentPre201909.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64ContentPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Equals(Corvus.Json.JsonBase64ContentPre201909@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.#ctor(System.Text.Json.JsonDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64ContentPre201909"/> struct.
            </summary>
            <param name="value">The json document containing the base64 content.</param>
            <remarks>
            This does not take ownership of the document. The caller should dispose of it in the usual way, once its
            use in this scope is complete.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.GetBase64EncodedString">
            <summary>
            Get the base64 encoded string.
            </summary>
            <returns>The base 64 encoded string.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.GetUtf8BytesBase64EncodedString">
            <summary>
            Get the base64 encoded string.
            </summary>
            <returns>The base 64 encoded string.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.GetDecodedBase64Bytes">
            <summary>
            Get the decoded base64 bytes.
            </summary>
            <returns>The base 64 bytes.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64ContentPre201909.TryGetJsonDocument(System.Text.Json.JsonDocument@)">
            <summary>
            Try to get the JSON document from the content.
            </summary>
            <param name="result">A JSON document produced from the content, or null if the content did not represent a Base64 encoded JSON document.</param>
            <returns><c>True</c> if the document was parsed successfully.</returns>
        </member>
        <member name="T:Corvus.Json.JsonBase64String">
            <summary>
            Represents a JSON base64string.
            </summary>
            <summary>
            Represents a JSON base64string.
            </summary>
            <summary>
            Represents a JSON base64 string.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64String"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64String"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64String"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.op_Implicit(Corvus.Json.JsonBase64String)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonBase64String">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.op_Implicit(Corvus.Json.JsonBase64String)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonBase64String">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.op_Implicit(System.String)~Corvus.Json.JsonBase64String">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.op_Explicit(Corvus.Json.JsonBase64String)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonBase64String.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonBase64String.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonBase64String.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonBase64String.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonBase64String.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonBase64String.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonBase64String.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64String"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64String"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64String.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.op_Equality(Corvus.Json.JsonBase64String@,Corvus.Json.JsonBase64String@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.op_Inequality(Corvus.Json.JsonBase64String@,Corvus.Json.JsonBase64String@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64String}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64String}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64String}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64String}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64String.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64String"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64String.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64String"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64String.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64String"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64String.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64String"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64String.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64String"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Equals(Corvus.Json.JsonBase64String@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.FromByteArray(System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates a new instance of the <see cref="T:Corvus.Json.JsonBase64String"/> struct from a byte arrary.
            </summary>
            <param name="value">The <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> from which to construct the Base64 content.</param>
            <returns>The base 64 encoded string represnetation of the byte array.</returns>
            <remarks>This encodes the byte array as a base 64 string.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.GetBase64EncodedString">
            <summary>
            Get the base64 encoded string.
            </summary>
            <returns>The base 64 encoded string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.GetDecodedBase64Bytes">
            <summary>
            Get the decoded base64 bytes.
            </summary>
            <returns>The base 64 bytes.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64String.HasBase64Bytes">
            <summary>
            Get a value indicating whether this instance has a Base64-encoded byte array.
            </summary>
            <returns>The base 64 bytes.</returns>
        </member>
        <member name="T:Corvus.Json.JsonBase64StringPre201909">
            <summary>
            Represents a JSON base64string.
            </summary>
            <summary>
            Represents a JSON base64string.
            </summary>
            <summary>
            Represents a JSON base64 string.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.op_Implicit(Corvus.Json.JsonBase64StringPre201909)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonBase64StringPre201909">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.op_Implicit(Corvus.Json.JsonBase64StringPre201909)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonBase64StringPre201909">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.op_Implicit(System.String)~Corvus.Json.JsonBase64StringPre201909">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.op_Explicit(Corvus.Json.JsonBase64StringPre201909)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonBase64StringPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonBase64StringPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonBase64StringPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonBase64StringPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonBase64StringPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonBase64StringPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonBase64StringPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBase64StringPre201909.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.op_Equality(Corvus.Json.JsonBase64StringPre201909@,Corvus.Json.JsonBase64StringPre201909@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.op_Inequality(Corvus.Json.JsonBase64StringPre201909@,Corvus.Json.JsonBase64StringPre201909@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64StringPre201909}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64StringPre201909}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64StringPre201909}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonBase64StringPre201909}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64StringPre201909.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64StringPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64StringPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64StringPre201909.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBase64StringPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Equals(Corvus.Json.JsonBase64StringPre201909@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.FromByteArray(System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates a new instance of the <see cref="T:Corvus.Json.JsonBase64StringPre201909"/> struct from a byte arrary.
            </summary>
            <param name="value">The <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> from which to construct the Base64 content.</param>
            <returns>The base 64 encoded string represnetation of the byte array.</returns>
            <remarks>This encodes the byte array as a base 64 string.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.GetBase64EncodedString">
            <summary>
            Get the base64 encoded string.
            </summary>
            <returns>The base 64 encoded string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.GetDecodedBase64Bytes">
            <summary>
            Get the decoded base64 bytes.
            </summary>
            <returns>The base 64 bytes.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBase64StringPre201909.HasBase64Bytes">
            <summary>
            Get a value indicating whether this instance has a Base64-encoded byte array.
            </summary>
            <returns>The base 64 bytes.</returns>
        </member>
        <member name="T:Corvus.Json.JsonByte">
            <summary>
            Represents a JSON byte.
            </summary>
            <summary>
            Represents a  byte.
            </summary>
            <summary>
            Represents a JSON byte.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonByte.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonByte"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonByte">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Implicit(Corvus.Json.JsonByte)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Implicit(Corvus.Json.JsonByte)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonByte">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Implicit(Corvus.Json.JsonByte)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Explicit(Corvus.Json.JsonByte)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Implicit(System.Byte)~Corvus.Json.JsonByte">
            <summary>
            Conversion from byte.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Addition(Corvus.Json.JsonByte,Corvus.Json.JsonByte)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Subtraction(Corvus.Json.JsonByte,Corvus.Json.JsonByte)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Multiply(Corvus.Json.JsonByte,Corvus.Json.JsonByte)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Division(Corvus.Json.JsonByte,Corvus.Json.JsonByte)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Increment(Corvus.Json.JsonByte)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Decrement(Corvus.Json.JsonByte)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonByte"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonByte.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonByte"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonByte.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonByte"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonByte.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonByte.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonByte.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonByte.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonByte.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Equality(Corvus.Json.JsonByte@,Corvus.Json.JsonByte@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_Inequality(Corvus.Json.JsonByte@,Corvus.Json.JsonByte@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_LessThan(Corvus.Json.JsonByte@,Corvus.Json.JsonByte@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_GreaterThan(Corvus.Json.JsonByte@,Corvus.Json.JsonByte@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_LessThanOrEqual(Corvus.Json.JsonByte@,Corvus.Json.JsonByte@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.op_GreaterThanOrEqual(Corvus.Json.JsonByte@,Corvus.Json.JsonByte@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.Compare(Corvus.Json.JsonByte@,Corvus.Json.JsonByte@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonByte.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.Corvus#Json#IJsonValue{Corvus#Json#JsonByte}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonByte.Corvus#Json#IJsonValue{Corvus#Json#JsonByte}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonByte.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonByte.Corvus#Json#IJsonValue{Corvus#Json#JsonByte}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonByte.Corvus#Json#IJsonValue{Corvus#Json#JsonByte}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonByte.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonByte.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonByte.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonByte.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonByte.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonByte.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonByte.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonByte.Equals(Corvus.Json.JsonByte@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonByte.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonByte.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonByte.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonByte.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonByte.AsByte">
            <summary>
            Gets the value as a byte.
            </summary>
            <returns>The byte value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonContent">
            <summary>
            Represents a JSON content.
            </summary>
            <summary>
            Represents a JSON content.
            </summary>
            <summary>
            Represents a JSON content.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContent"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonContent.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContent"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonContent.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContent"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonContent.op_Implicit(Corvus.Json.JsonContent)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContent.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonContent">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContent.op_Implicit(Corvus.Json.JsonContent)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContent.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonContent">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContent.op_Implicit(System.String)~Corvus.Json.JsonContent">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContent.op_Explicit(Corvus.Json.JsonContent)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonContent.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonContent.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonContent.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonContent.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonContent.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonContent.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonContent.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonContent.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContent"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonContent.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContent"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonContent.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonContent.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonContent.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonContent.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContent.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.op_Equality(Corvus.Json.JsonContent@,Corvus.Json.JsonContent@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.op_Inequality(Corvus.Json.JsonContent@,Corvus.Json.JsonContent@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonContent.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContent.Corvus#Json#IJsonValue{Corvus#Json#JsonContent}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContent.Corvus#Json#IJsonValue{Corvus#Json#JsonContent}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContent.Corvus#Json#IJsonValue{Corvus#Json#JsonContent}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContent.Corvus#Json#IJsonValue{Corvus#Json#JsonContent}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContent.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContent.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContent"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContent.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContent"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContent.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContent"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContent.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContent"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContent.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContent"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContent.#ctor(System.Text.Json.JsonDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContent"/> struct.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonDocument"/> from which to construct the Base64 content.</param>
            <remarks>
            This does not take ownership of the document. The caller should dispose of it in the usual way, once its
            use in this scope is complete.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonContent.TryGetJsonDocument(System.Text.Json.JsonDocument@)">
            <summary>
            Try to get the JSON document from the content.
            </summary>
            <param name="result">A JSON document produced from the content, or null if the content did not represent a Base64 encoded JSON document.</param>
            <returns><c>True</c> if the document was parsed successfully.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.TryGetUnescapedString(System.String@)">
            <summary>
            Gets the value as an unescaped string.
            </summary>
            <param name="result">The value as a string.</param>
            <returns><c>True</c> if the value could be retrieved.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.AsUnescapedSpan">
            <summary>
            Gets the value as an unescaped span.
            </summary>
            <returns>The unescaped value as a span of char.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Equals``1(``0@)">
            <summary>
            Equality comparison.
            </summary>
            <typeparam name="T">The type of the item with which to compare.</typeparam>
            <param name="other">The item with which to compare.</param>
            <returns><c>True</c> if the items are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContent.Equals(Corvus.Json.JsonContent@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The item with which to compare.</param>
            <returns><c>True</c> if the items are equal.</returns>
        </member>
        <member name="T:Corvus.Json.JsonContentPre201909">
            <summary>
            Represents a JSON content.
            </summary>
            <summary>
            Represents a JSON content.
            </summary>
            <summary>
            Represents a JSON content.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContentPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContentPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContentPre201909"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.op_Implicit(Corvus.Json.JsonContentPre201909)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonContentPre201909">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.op_Implicit(Corvus.Json.JsonContentPre201909)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonContentPre201909">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.op_Implicit(System.String)~Corvus.Json.JsonContentPre201909">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.op_Explicit(Corvus.Json.JsonContentPre201909)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonContentPre201909.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContentPre201909"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContentPre201909"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonContentPre201909.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.op_Equality(Corvus.Json.JsonContentPre201909@,Corvus.Json.JsonContentPre201909@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.op_Inequality(Corvus.Json.JsonContentPre201909@,Corvus.Json.JsonContentPre201909@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonContentPre201909}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonContentPre201909}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonContentPre201909}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Corvus#Json#IJsonValue{Corvus#Json#JsonContentPre201909}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContentPre201909.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContentPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContentPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContentPre201909.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonContentPre201909.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonContentPre201909"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.#ctor(System.Text.Json.JsonDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonContentPre201909"/> struct.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonDocument"/> from which to construct the Base64 content.</param>
            <remarks>
            This does not take ownership of the document. The caller should dispose of it in the usual way, once its
            use in this scope is complete.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.TryGetJsonDocument(System.Text.Json.JsonDocument@)">
            <summary>
            Try to get the JSON document from the content.
            </summary>
            <param name="result">A JSON document produced from the content, or null if the content did not represent a Base64 encoded JSON document.</param>
            <returns><c>True</c> if the document was parsed successfully.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.TryGetUnescapedString(System.String@)">
            <summary>
            Gets the value as an unescaped string.
            </summary>
            <param name="result">The value as a string.</param>
            <returns><c>True</c> if the value could be retrieved.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.AsUnescapedSpan">
            <summary>
            Gets the value as an unescaped span.
            </summary>
            <returns>The unescaped value as a span of char.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Equals``1(``0@)">
            <summary>
            Equality comparison.
            </summary>
            <typeparam name="T">The type of the item with which to compare.</typeparam>
            <param name="other">The item with which to compare.</param>
            <returns><c>True</c> if the items are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonContentPre201909.Equals(Corvus.Json.JsonContentPre201909@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The item with which to compare.</param>
            <returns><c>True</c> if the items are equal.</returns>
        </member>
        <member name="T:Corvus.Json.JsonDate">
            <summary>
            Represents a JSON date.
            </summary>
            <summary>
            Represents a JSON date.
            </summary>
            <summary>
            Represents a JSON date.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDate"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDate"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDate"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Implicit(Corvus.Json.JsonDate)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonDate">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Implicit(Corvus.Json.JsonDate)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonDate">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Implicit(System.String)~Corvus.Json.JsonDate">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Explicit(Corvus.Json.JsonDate)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDate.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonDate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonDate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonDate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonDate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonDate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonDate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonDate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDate"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDate.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDate"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonDate.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDate.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDate.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDate.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDate.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Equality(Corvus.Json.JsonDate@,Corvus.Json.JsonDate@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Inequality(Corvus.Json.JsonDate@,Corvus.Json.JsonDate@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonDate.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDate.Corvus#Json#IJsonValue{Corvus#Json#JsonDate}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDate.Corvus#Json#IJsonValue{Corvus#Json#JsonDate}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDate.Corvus#Json#IJsonValue{Corvus#Json#JsonDate}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDate.Corvus#Json#IJsonValue{Corvus#Json#JsonDate}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDate.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDate.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDate.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDate.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDate.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDate.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.Equals(Corvus.Json.JsonDate@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDate.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDate.#ctor(NodaTime.LocalDate@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDate"/> struct.
            </summary>
            <param name="value">The NodaTime LocalDate value.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.#ctor(System.DateTime@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDate"/> struct.
            </summary>
            <param name="value">The date time from which to construct the date.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.#ctor(System.DateTime@,NodaTime.CalendarSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDate"/> struct.
            </summary>
            <param name="value">The date time from which to construct the date.</param>
            <param name="calendar">The calendar system with which to interpret the date.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Implicit(Corvus.Json.JsonDate@)~NodaTime.LocalDate">
            <summary>
            Implicit conversion to LocalDate.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.op_Implicit(NodaTime.LocalDate@)~Corvus.Json.JsonDate">
            <summary>
            Implicit conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDate.GetDate">
            <summary>
            Gets the value as a LocalDate.
            </summary>
            <returns>The value as a LocalDate.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a date.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDate.TryGetDate(NodaTime.LocalDate@)">
            <summary>
            Try to get the date value.
            </summary>
            <param name="result">The date value.</param>
            <returns><c>True</c> if it was possible to get a date value from the instance.</returns>
        </member>
        <member name="T:Corvus.Json.JsonDateTime">
            <summary>
            Represents a JSON dateTime.
            </summary>
            <summary>
            Represents a JSON dateTime.
            </summary>
            <summary>
            Represents a JSON dateTime.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDateTime"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDateTime"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDateTime"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Implicit(Corvus.Json.JsonDateTime)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonDateTime">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Implicit(Corvus.Json.JsonDateTime)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonDateTime">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Implicit(System.String)~Corvus.Json.JsonDateTime">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Explicit(Corvus.Json.JsonDateTime)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonDateTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonDateTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonDateTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonDateTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonDateTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonDateTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonDateTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDateTime"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDateTime"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDateTime.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Equality(Corvus.Json.JsonDateTime@,Corvus.Json.JsonDateTime@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Inequality(Corvus.Json.JsonDateTime@,Corvus.Json.JsonDateTime@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Corvus#Json#IJsonValue{Corvus#Json#JsonDateTime}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Corvus#Json#IJsonValue{Corvus#Json#JsonDateTime}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Corvus#Json#IJsonValue{Corvus#Json#JsonDateTime}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Corvus#Json#IJsonValue{Corvus#Json#JsonDateTime}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDateTime.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDateTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDateTime.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDateTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDateTime.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDateTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDateTime.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDateTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDateTime.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDateTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.#ctor(NodaTime.OffsetDateTime@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDateTime"/> struct.
            </summary>
            <param name="value">The NodaTime OffsetDateTime value.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.#ctor(System.DateTimeOffset@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDateTime"/> struct.
            </summary>
            <param name="value">The date time offset from which to construct the date.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Implicit(NodaTime.OffsetDateTime@)~Corvus.Json.JsonDateTime">
            <summary>
            Conversion from OffsetDateTime.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.op_Implicit(Corvus.Json.JsonDateTime@)~NodaTime.OffsetDateTime">
            <summary>
            Conversion to OffsetDateTime.
            </summary>
            <param name="value">The number from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a datetime.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.GetDateTime">
            <summary>
            Gets the value as a OffsetDateTime.
            </summary>
            <returns>The value as a OffsetDateTime.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a datetime.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.TryGetDateTime(NodaTime.OffsetDateTime@)">
            <summary>
            Try to get the date value.
            </summary>
            <param name="result">The date value.</param>
            <returns><c>True</c> if it was possible to get a date value from the instance.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Equals``1(``0@)">
            <summary>
            Equality comparison.
            </summary>
            <typeparam name="T">The type of the item with which to compare.</typeparam>
            <param name="other">The item with which to compare.</param>
            <returns><c>True</c> if the items are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDateTime.Equals(Corvus.Json.JsonDateTime@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The item with which to compare.</param>
            <returns><c>True</c> if the items are equal.</returns>
        </member>
        <member name="T:Corvus.Json.JsonDecimal">
            <summary>
            Represents a JSON decimal.
            </summary>
            <summary>
            Represents a decimal.
            </summary>
            <summary>
            Represents a JSON double.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDecimal"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonDecimal">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Implicit(Corvus.Json.JsonDecimal)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Implicit(Corvus.Json.JsonDecimal)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonDecimal">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Implicit(Corvus.Json.JsonDecimal)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Explicit(Corvus.Json.JsonDecimal)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Implicit(System.Decimal)~Corvus.Json.JsonDecimal">
            <summary>
            Conversion from decimal.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Addition(Corvus.Json.JsonDecimal,Corvus.Json.JsonDecimal)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Subtraction(Corvus.Json.JsonDecimal,Corvus.Json.JsonDecimal)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Multiply(Corvus.Json.JsonDecimal,Corvus.Json.JsonDecimal)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Division(Corvus.Json.JsonDecimal,Corvus.Json.JsonDecimal)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Increment(Corvus.Json.JsonDecimal)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Decrement(Corvus.Json.JsonDecimal)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDecimal"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDecimal"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDecimal"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDecimal.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Equality(Corvus.Json.JsonDecimal@,Corvus.Json.JsonDecimal@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_Inequality(Corvus.Json.JsonDecimal@,Corvus.Json.JsonDecimal@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_LessThan(Corvus.Json.JsonDecimal@,Corvus.Json.JsonDecimal@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_GreaterThan(Corvus.Json.JsonDecimal@,Corvus.Json.JsonDecimal@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_LessThanOrEqual(Corvus.Json.JsonDecimal@,Corvus.Json.JsonDecimal@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.op_GreaterThanOrEqual(Corvus.Json.JsonDecimal@,Corvus.Json.JsonDecimal@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Compare(Corvus.Json.JsonDecimal@,Corvus.Json.JsonDecimal@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Corvus#Json#IJsonValue{Corvus#Json#JsonDecimal}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Corvus#Json#IJsonValue{Corvus#Json#JsonDecimal}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Corvus#Json#IJsonValue{Corvus#Json#JsonDecimal}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Corvus#Json#IJsonValue{Corvus#Json#JsonDecimal}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDecimal.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDecimal"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDecimal.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDecimal"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDecimal.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDecimal"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDecimal.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDecimal"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDecimal.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDecimal"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Equals(Corvus.Json.JsonDecimal@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDecimal.AsDecimal">
            <summary>
            Gets the value as a decimal.
            </summary>
            <returns>The decimal value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonDouble">
            <summary>
            Represents a JSON double.
            </summary>
            <summary>
            Represents a double.
            </summary>
            <summary>
            Represents a JSON double.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDouble.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDouble"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonDouble">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Implicit(Corvus.Json.JsonDouble)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Implicit(Corvus.Json.JsonDouble)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonDouble">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Implicit(Corvus.Json.JsonDouble)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Explicit(Corvus.Json.JsonDouble)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Implicit(System.Double)~Corvus.Json.JsonDouble">
            <summary>
            Conversion from double.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Addition(Corvus.Json.JsonDouble,Corvus.Json.JsonDouble)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Subtraction(Corvus.Json.JsonDouble,Corvus.Json.JsonDouble)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Multiply(Corvus.Json.JsonDouble,Corvus.Json.JsonDouble)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Division(Corvus.Json.JsonDouble,Corvus.Json.JsonDouble)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Increment(Corvus.Json.JsonDouble)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Decrement(Corvus.Json.JsonDouble)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDouble"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDouble.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDouble"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDouble.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDouble"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonDouble.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDouble.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDouble.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDouble.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDouble.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Equality(Corvus.Json.JsonDouble@,Corvus.Json.JsonDouble@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_Inequality(Corvus.Json.JsonDouble@,Corvus.Json.JsonDouble@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_LessThan(Corvus.Json.JsonDouble@,Corvus.Json.JsonDouble@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_GreaterThan(Corvus.Json.JsonDouble@,Corvus.Json.JsonDouble@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_LessThanOrEqual(Corvus.Json.JsonDouble@,Corvus.Json.JsonDouble@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.op_GreaterThanOrEqual(Corvus.Json.JsonDouble@,Corvus.Json.JsonDouble@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Compare(Corvus.Json.JsonDouble@,Corvus.Json.JsonDouble@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonDouble.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Corvus#Json#IJsonValue{Corvus#Json#JsonDouble}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Corvus#Json#IJsonValue{Corvus#Json#JsonDouble}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDouble.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Corvus#Json#IJsonValue{Corvus#Json#JsonDouble}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Corvus#Json#IJsonValue{Corvus#Json#JsonDouble}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDouble.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDouble"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDouble.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDouble"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDouble.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDouble"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDouble.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDouble"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDouble.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDouble"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Equals(Corvus.Json.JsonDouble@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDouble.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDouble.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDouble.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDouble.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDouble.AsDouble">
            <summary>
            Gets the value as a double.
            </summary>
            <returns>The double value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonDuration">
            <summary>
            Represents a JSON duration.
            </summary>
            <summary>
            Represents a JSON duration.
            </summary>
            <summary>
            Represents a JSON duration.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDuration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDuration"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDuration"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDuration"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(Corvus.Json.JsonDuration)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonDuration">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(Corvus.Json.JsonDuration)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonDuration">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(System.String)~Corvus.Json.JsonDuration">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Explicit(Corvus.Json.JsonDuration)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonDuration.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonDuration.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonDuration.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonDuration.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonDuration.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonDuration.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonDuration.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDuration"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonDuration.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDuration"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonDuration.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDuration.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDuration.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonDuration.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonDuration.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Equality(Corvus.Json.JsonDuration@,Corvus.Json.JsonDuration@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Inequality(Corvus.Json.JsonDuration@,Corvus.Json.JsonDuration@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonDuration.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Corvus#Json#IJsonValue{Corvus#Json#JsonDuration}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Corvus#Json#IJsonValue{Corvus#Json#JsonDuration}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Corvus#Json#IJsonValue{Corvus#Json#JsonDuration}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Corvus#Json#IJsonValue{Corvus#Json#JsonDuration}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDuration.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDuration"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDuration.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDuration"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDuration.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDuration"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDuration.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDuration"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonDuration.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonDuration"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Equals(Corvus.Json.JsonDuration@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonDuration.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonDuration.#ctor(Corvus.Json.Period)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDuration"/> struct.
            </summary>
            <param name="value">The NodaTime Period value.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.#ctor(NodaTime.Period)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonDuration"/> struct.
            </summary>
            <param name="value">The NodaTime Period value.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(Corvus.Json.JsonDuration)~Corvus.Json.Period">
            <summary>
            Implicit conversion to Period.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a duration.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(Corvus.Json.Period)~Corvus.Json.JsonDuration">
            <summary>
            Implicit conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(Corvus.Json.JsonDuration)~NodaTime.Period">
            <summary>
            Implicit conversion to Period.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a duration.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDuration.op_Implicit(NodaTime.Period)~Corvus.Json.JsonDuration">
            <summary>
            Implicit conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonDuration.GetPeriod">
            <summary>
            Gets the value as a Period.
            </summary>
            <returns>The value as a Period.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a duration.</exception>
        </member>
        <member name="M:Corvus.Json.JsonDuration.TryGetPeriod(Corvus.Json.Period@)">
            <summary>
            Try to get the value as a Period.
            </summary>
            <param name="result">The Period.</param>
            <returns><c>True</c> if it was possible to get a Period value from the instance.</returns>
        </member>
        <member name="T:Corvus.Json.JsonEmail">
            <summary>
            Represents a JSON email.
            </summary>
            <summary>
            Represents a JSON email.
            </summary>
            <summary>
            Represents a JSON email.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonEmail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonEmail"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonEmail.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonEmail"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonEmail.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonEmail"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonEmail.op_Implicit(Corvus.Json.JsonEmail)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonEmail.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonEmail">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonEmail.op_Implicit(Corvus.Json.JsonEmail)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonEmail.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonEmail">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonEmail.op_Implicit(System.String)~Corvus.Json.JsonEmail">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonEmail.op_Explicit(Corvus.Json.JsonEmail)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonEmail"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonEmail.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonEmail"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonEmail.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonEmail.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonEmail.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonEmail.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonEmail.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.op_Equality(Corvus.Json.JsonEmail@,Corvus.Json.JsonEmail@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.op_Inequality(Corvus.Json.JsonEmail@,Corvus.Json.JsonEmail@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonEmail.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Corvus#Json#IJsonValue{Corvus#Json#JsonEmail}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Corvus#Json#IJsonValue{Corvus#Json#JsonEmail}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Corvus#Json#IJsonValue{Corvus#Json#JsonEmail}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Corvus#Json#IJsonValue{Corvus#Json#JsonEmail}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonEmail.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonEmail.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonEmail.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonEmail.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonEmail.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Equals(Corvus.Json.JsonEmail@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonEmail.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonEmail.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonHalf">
            <summary>
            Represents a JSON half.
            </summary>
            <summary>
            Represents a half.
            </summary>
            <summary>
            Represents a JSON half.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonHalf.#ctor(System.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHalf"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonHalf">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Implicit(Corvus.Json.JsonHalf)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Implicit(Corvus.Json.JsonHalf)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonHalf">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Implicit(Corvus.Json.JsonHalf)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Explicit(Corvus.Json.JsonHalf)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Implicit(System.Half)~Corvus.Json.JsonHalf">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Addition(Corvus.Json.JsonHalf,Corvus.Json.JsonHalf)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Subtraction(Corvus.Json.JsonHalf,Corvus.Json.JsonHalf)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Multiply(Corvus.Json.JsonHalf,Corvus.Json.JsonHalf)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Division(Corvus.Json.JsonHalf,Corvus.Json.JsonHalf)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Increment(Corvus.Json.JsonHalf)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Decrement(Corvus.Json.JsonHalf)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHalf"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonHalf.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHalf"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonHalf.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHalf"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonHalf.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonHalf.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonHalf.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonHalf.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHalf.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Equality(Corvus.Json.JsonHalf@,Corvus.Json.JsonHalf@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_Inequality(Corvus.Json.JsonHalf@,Corvus.Json.JsonHalf@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_LessThan(Corvus.Json.JsonHalf@,Corvus.Json.JsonHalf@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_GreaterThan(Corvus.Json.JsonHalf@,Corvus.Json.JsonHalf@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_LessThanOrEqual(Corvus.Json.JsonHalf@,Corvus.Json.JsonHalf@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.op_GreaterThanOrEqual(Corvus.Json.JsonHalf@,Corvus.Json.JsonHalf@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Compare(Corvus.Json.JsonHalf@,Corvus.Json.JsonHalf@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonHalf.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Corvus#Json#IJsonValue{Corvus#Json#JsonHalf}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Corvus#Json#IJsonValue{Corvus#Json#JsonHalf}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHalf.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Corvus#Json#IJsonValue{Corvus#Json#JsonHalf}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Corvus#Json#IJsonValue{Corvus#Json#JsonHalf}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHalf.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHalf"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHalf.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHalf"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHalf.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHalf"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHalf.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHalf"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHalf.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHalf"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Equals(Corvus.Json.JsonHalf@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHalf.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHalf.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHalf.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHalf.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHalf.AsHalf">
            <summary>
            Gets the value as a half.
            </summary>
            <returns>The half value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonHostname">
            <summary>
            Represents a JSON hostname.
            </summary>
            <summary>
            Represents a JSON hostname.
            </summary>
            <summary>
            Represents a JSON   Hostname.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonHostname.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHostname"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonHostname.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHostname"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonHostname.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHostname"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonHostname.op_Implicit(Corvus.Json.JsonHostname)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHostname.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonHostname">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHostname.op_Implicit(Corvus.Json.JsonHostname)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHostname.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonHostname">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHostname.op_Implicit(System.String)~Corvus.Json.JsonHostname">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonHostname.op_Explicit(Corvus.Json.JsonHostname)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHostname"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonHostname.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonHostname"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonHostname.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonHostname.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonHostname.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonHostname.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonHostname.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.op_Equality(Corvus.Json.JsonHostname@,Corvus.Json.JsonHostname@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.op_Inequality(Corvus.Json.JsonHostname@,Corvus.Json.JsonHostname@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonHostname.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Corvus#Json#IJsonValue{Corvus#Json#JsonHostname}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Corvus#Json#IJsonValue{Corvus#Json#JsonHostname}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Corvus#Json#IJsonValue{Corvus#Json#JsonHostname}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Corvus#Json#IJsonValue{Corvus#Json#JsonHostname}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHostname.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHostname.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHostname.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHostname.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonHostname.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Equals(Corvus.Json.JsonHostname@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHostname.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonHostname.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonIdnEmail">
            <summary>
            Represents a JSON idnEmail.
            </summary>
            <summary>
            Represents a JSON idnEmail.
            </summary>
            <summary>
            Represents a JSON idnEmail.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnEmail"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnEmail"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnEmail"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.op_Implicit(Corvus.Json.JsonIdnEmail)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonIdnEmail">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.op_Implicit(Corvus.Json.JsonIdnEmail)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonIdnEmail">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.op_Implicit(System.String)~Corvus.Json.JsonIdnEmail">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.op_Explicit(Corvus.Json.JsonIdnEmail)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonIdnEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonIdnEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonIdnEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonIdnEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonIdnEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonIdnEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonIdnEmail.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnEmail"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnEmail"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnEmail.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.op_Equality(Corvus.Json.JsonIdnEmail@,Corvus.Json.JsonIdnEmail@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.op_Inequality(Corvus.Json.JsonIdnEmail@,Corvus.Json.JsonIdnEmail@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Corvus#Json#IJsonValue{Corvus#Json#JsonIdnEmail}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Corvus#Json#IJsonValue{Corvus#Json#JsonIdnEmail}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Corvus#Json#IJsonValue{Corvus#Json#JsonIdnEmail}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Corvus#Json#IJsonValue{Corvus#Json#JsonIdnEmail}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnEmail.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnEmail.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnEmail.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnEmail.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnEmail.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnEmail"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Equals(Corvus.Json.JsonIdnEmail@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnEmail.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonIdnHostname">
            <summary>
            Represents a JSON idnHostname.
            </summary>
            <summary>
            Represents a JSON idnHostname.
            </summary>
            <summary>
            Represents a JSON idnHostname.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnHostname"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnHostname"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnHostname"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.op_Implicit(Corvus.Json.JsonIdnHostname)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonIdnHostname">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.op_Implicit(Corvus.Json.JsonIdnHostname)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonIdnHostname">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.op_Implicit(System.String)~Corvus.Json.JsonIdnHostname">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.op_Explicit(Corvus.Json.JsonIdnHostname)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonIdnHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonIdnHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonIdnHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonIdnHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonIdnHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonIdnHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonIdnHostname.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnHostname"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIdnHostname"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIdnHostname.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.op_Equality(Corvus.Json.JsonIdnHostname@,Corvus.Json.JsonIdnHostname@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.op_Inequality(Corvus.Json.JsonIdnHostname@,Corvus.Json.JsonIdnHostname@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Corvus#Json#IJsonValue{Corvus#Json#JsonIdnHostname}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Corvus#Json#IJsonValue{Corvus#Json#JsonIdnHostname}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Corvus#Json#IJsonValue{Corvus#Json#JsonIdnHostname}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Corvus#Json#IJsonValue{Corvus#Json#JsonIdnHostname}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnHostname.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnHostname.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnHostname.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnHostname.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIdnHostname.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIdnHostname"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Equals(Corvus.Json.JsonIdnHostname@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIdnHostname.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonInt128">
            <summary>
            Represents a JSON int128.
            </summary>
            <summary>
            Represents a int128.
            </summary>
            <summary>
            Represents a JSON int128.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInt128.#ctor(System.Int128)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt128"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonInt128">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Implicit(Corvus.Json.JsonInt128)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Implicit(Corvus.Json.JsonInt128)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonInt128">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Implicit(Corvus.Json.JsonInt128)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Explicit(Corvus.Json.JsonInt128)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Implicit(System.Int128)~Corvus.Json.JsonInt128">
            <summary>
            Conversion from int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Addition(Corvus.Json.JsonInt128,Corvus.Json.JsonInt128)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Subtraction(Corvus.Json.JsonInt128,Corvus.Json.JsonInt128)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Multiply(Corvus.Json.JsonInt128,Corvus.Json.JsonInt128)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Division(Corvus.Json.JsonInt128,Corvus.Json.JsonInt128)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Increment(Corvus.Json.JsonInt128)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Decrement(Corvus.Json.JsonInt128)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt128"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInt128.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt128"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt128.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt128"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonInt128.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt128.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt128.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt128.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt128.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Equality(Corvus.Json.JsonInt128@,Corvus.Json.JsonInt128@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_Inequality(Corvus.Json.JsonInt128@,Corvus.Json.JsonInt128@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_LessThan(Corvus.Json.JsonInt128@,Corvus.Json.JsonInt128@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_GreaterThan(Corvus.Json.JsonInt128@,Corvus.Json.JsonInt128@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_LessThanOrEqual(Corvus.Json.JsonInt128@,Corvus.Json.JsonInt128@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.op_GreaterThanOrEqual(Corvus.Json.JsonInt128@,Corvus.Json.JsonInt128@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Compare(Corvus.Json.JsonInt128@,Corvus.Json.JsonInt128@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt128.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Corvus#Json#IJsonValue{Corvus#Json#JsonInt128}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Corvus#Json#IJsonValue{Corvus#Json#JsonInt128}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt128.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Corvus#Json#IJsonValue{Corvus#Json#JsonInt128}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Corvus#Json#IJsonValue{Corvus#Json#JsonInt128}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt128.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt128.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt128.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt128.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt128.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Equals(Corvus.Json.JsonInt128@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt128.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt128.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt128.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt128.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt128.AsInt128">
            <summary>
            Gets the value as in Int128.
            </summary>
            <returns>The Int128 value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonInt16">
            <summary>
            Represents a JSON int16.
            </summary>
            <summary>
            Represents a int16.
            </summary>
            <summary>
            Represents a JSON int16.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInt16.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt16"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonInt16">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Implicit(Corvus.Json.JsonInt16)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Implicit(Corvus.Json.JsonInt16)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonInt16">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Implicit(Corvus.Json.JsonInt16)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Explicit(Corvus.Json.JsonInt16)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Implicit(System.Int16)~Corvus.Json.JsonInt16">
            <summary>
            Conversion from int16.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Addition(Corvus.Json.JsonInt16,Corvus.Json.JsonInt16)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Subtraction(Corvus.Json.JsonInt16,Corvus.Json.JsonInt16)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Multiply(Corvus.Json.JsonInt16,Corvus.Json.JsonInt16)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Division(Corvus.Json.JsonInt16,Corvus.Json.JsonInt16)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Increment(Corvus.Json.JsonInt16)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Decrement(Corvus.Json.JsonInt16)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt16"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInt16.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt16"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt16.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt16"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonInt16.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt16.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt16.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt16.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt16.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Equality(Corvus.Json.JsonInt16@,Corvus.Json.JsonInt16@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_Inequality(Corvus.Json.JsonInt16@,Corvus.Json.JsonInt16@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_LessThan(Corvus.Json.JsonInt16@,Corvus.Json.JsonInt16@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_GreaterThan(Corvus.Json.JsonInt16@,Corvus.Json.JsonInt16@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_LessThanOrEqual(Corvus.Json.JsonInt16@,Corvus.Json.JsonInt16@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.op_GreaterThanOrEqual(Corvus.Json.JsonInt16@,Corvus.Json.JsonInt16@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Compare(Corvus.Json.JsonInt16@,Corvus.Json.JsonInt16@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt16.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Corvus#Json#IJsonValue{Corvus#Json#JsonInt16}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Corvus#Json#IJsonValue{Corvus#Json#JsonInt16}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt16.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Corvus#Json#IJsonValue{Corvus#Json#JsonInt16}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Corvus#Json#IJsonValue{Corvus#Json#JsonInt16}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt16.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt16.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt16.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt16.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt16.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Equals(Corvus.Json.JsonInt16@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt16.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt16.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt16.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt16.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt16.AsShort">
            <summary>
            Gets the value as a short.
            </summary>
            <returns>The short value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonInt32">
            <summary>
            Represents a JSON int32.
            </summary>
            <summary>
            Represents a int32.
            </summary>
            <summary>
            Represents a JSON int32.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInt32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt32"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonInt32">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Implicit(Corvus.Json.JsonInt32)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Implicit(Corvus.Json.JsonInt32)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonInt32">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Implicit(Corvus.Json.JsonInt32)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Explicit(Corvus.Json.JsonInt32)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Implicit(System.Int32)~Corvus.Json.JsonInt32">
            <summary>
            Conversion from int32.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Addition(Corvus.Json.JsonInt32,Corvus.Json.JsonInt32)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Subtraction(Corvus.Json.JsonInt32,Corvus.Json.JsonInt32)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Multiply(Corvus.Json.JsonInt32,Corvus.Json.JsonInt32)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Division(Corvus.Json.JsonInt32,Corvus.Json.JsonInt32)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Increment(Corvus.Json.JsonInt32)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Decrement(Corvus.Json.JsonInt32)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt32"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInt32.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt32"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt32.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt32"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonInt32.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt32.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt32.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt32.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt32.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Equality(Corvus.Json.JsonInt32@,Corvus.Json.JsonInt32@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_Inequality(Corvus.Json.JsonInt32@,Corvus.Json.JsonInt32@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_LessThan(Corvus.Json.JsonInt32@,Corvus.Json.JsonInt32@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_GreaterThan(Corvus.Json.JsonInt32@,Corvus.Json.JsonInt32@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_LessThanOrEqual(Corvus.Json.JsonInt32@,Corvus.Json.JsonInt32@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.op_GreaterThanOrEqual(Corvus.Json.JsonInt32@,Corvus.Json.JsonInt32@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Compare(Corvus.Json.JsonInt32@,Corvus.Json.JsonInt32@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt32.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Corvus#Json#IJsonValue{Corvus#Json#JsonInt32}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Corvus#Json#IJsonValue{Corvus#Json#JsonInt32}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt32.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Corvus#Json#IJsonValue{Corvus#Json#JsonInt32}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Corvus#Json#IJsonValue{Corvus#Json#JsonInt32}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt32.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt32.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt32.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt32.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt32.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Equals(Corvus.Json.JsonInt32@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt32.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt32.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt32.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt32.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt32.AsInt32">
            <summary>
            Gets the value as an int.
            </summary>
            <returns>The int value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonInt64">
            <summary>
            Represents a JSON int64.
            </summary>
            <summary>
            Represents a int64.
            </summary>
            <summary>
            Represents a JSON int64.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInt64.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt64"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonInt64">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Implicit(Corvus.Json.JsonInt64)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Implicit(Corvus.Json.JsonInt64)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonInt64">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Implicit(Corvus.Json.JsonInt64)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Explicit(Corvus.Json.JsonInt64)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Implicit(System.Int64)~Corvus.Json.JsonInt64">
            <summary>
            Conversion from int64.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Addition(Corvus.Json.JsonInt64,Corvus.Json.JsonInt64)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Subtraction(Corvus.Json.JsonInt64,Corvus.Json.JsonInt64)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Multiply(Corvus.Json.JsonInt64,Corvus.Json.JsonInt64)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Division(Corvus.Json.JsonInt64,Corvus.Json.JsonInt64)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Increment(Corvus.Json.JsonInt64)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Decrement(Corvus.Json.JsonInt64)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt64"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInt64.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt64"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonInt64.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInt64"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonInt64.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt64.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt64.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInt64.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInt64.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Equality(Corvus.Json.JsonInt64@,Corvus.Json.JsonInt64@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_Inequality(Corvus.Json.JsonInt64@,Corvus.Json.JsonInt64@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_LessThan(Corvus.Json.JsonInt64@,Corvus.Json.JsonInt64@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_GreaterThan(Corvus.Json.JsonInt64@,Corvus.Json.JsonInt64@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_LessThanOrEqual(Corvus.Json.JsonInt64@,Corvus.Json.JsonInt64@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.op_GreaterThanOrEqual(Corvus.Json.JsonInt64@,Corvus.Json.JsonInt64@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Compare(Corvus.Json.JsonInt64@,Corvus.Json.JsonInt64@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt64.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Corvus#Json#IJsonValue{Corvus#Json#JsonInt64}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Corvus#Json#IJsonValue{Corvus#Json#JsonInt64}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt64.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Corvus#Json#IJsonValue{Corvus#Json#JsonInt64}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Corvus#Json#IJsonValue{Corvus#Json#JsonInt64}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt64.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt64.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt64.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt64.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInt64.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Equals(Corvus.Json.JsonInt64@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInt64.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt64.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt64.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt64.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInt64.AsInt64">
            <summary>
            Gets the value as a long.
            </summary>
            <returns>The long value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonInteger">
            <summary>
            Represents a JSON integer.
            </summary>
            <summary>
            Represents a integer.
            </summary>
            <summary>
            Represents a JSON integer of any size.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.Int128)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.UInt128)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Implicit(Corvus.Json.JsonInteger)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Implicit(Corvus.Json.JsonInteger)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(Corvus.Json.JsonInteger)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.Decimal)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from decimal.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.Double)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from double.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.Single)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from single.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.Half)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.Byte)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from byte.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.SByte)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.Int16)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from int16.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.UInt16)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from uint16.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.Int32)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from int32.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.UInt32)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from uint32.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Implicit(System.Int64)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from int64.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.UInt64)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from ulong.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.Int128)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from int128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Explicit(System.UInt128)~Corvus.Json.JsonInteger">
            <summary>
            Conversion from uint128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Addition(Corvus.Json.JsonInteger,Corvus.Json.JsonInteger)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Subtraction(Corvus.Json.JsonInteger,Corvus.Json.JsonInteger)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Multiply(Corvus.Json.JsonInteger,Corvus.Json.JsonInteger)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Division(Corvus.Json.JsonInteger,Corvus.Json.JsonInteger)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Increment(Corvus.Json.JsonInteger)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Decrement(Corvus.Json.JsonInteger)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonInteger.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonInteger"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonInteger.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInteger.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInteger.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonInteger.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonInteger.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Equality(Corvus.Json.JsonInteger@,Corvus.Json.JsonInteger@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_Inequality(Corvus.Json.JsonInteger@,Corvus.Json.JsonInteger@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_LessThan(Corvus.Json.JsonInteger@,Corvus.Json.JsonInteger@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_GreaterThan(Corvus.Json.JsonInteger@,Corvus.Json.JsonInteger@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_LessThanOrEqual(Corvus.Json.JsonInteger@,Corvus.Json.JsonInteger@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.op_GreaterThanOrEqual(Corvus.Json.JsonInteger@,Corvus.Json.JsonInteger@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Compare(Corvus.Json.JsonInteger@,Corvus.Json.JsonInteger@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonInteger.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonInteger}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonInteger}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInteger.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonInteger}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Corvus#Json#IJsonValue{Corvus#Json#JsonInteger}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInteger.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInteger.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInteger.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInteger.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonInteger.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonInteger"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Equals(Corvus.Json.JsonInteger@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonInteger.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInteger.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInteger.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonInteger.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonIpV4">
            <summary>
            Represents a JSON ipv4.
            </summary>
            <summary>
            Represents a JSON ipv4.
            </summary>
            <summary>
            Represents a JSON ipv4.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV4"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV4"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV4"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Implicit(Corvus.Json.JsonIpV4)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonIpV4">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Implicit(Corvus.Json.JsonIpV4)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonIpV4">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Implicit(System.String)~Corvus.Json.JsonIpV4">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Explicit(Corvus.Json.JsonIpV4)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonIpV4.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonIpV4.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonIpV4.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonIpV4.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonIpV4.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonIpV4.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonIpV4.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV4"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV4"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV4.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Equality(Corvus.Json.JsonIpV4@,Corvus.Json.JsonIpV4@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Inequality(Corvus.Json.JsonIpV4@,Corvus.Json.JsonIpV4@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Corvus#Json#IJsonValue{Corvus#Json#JsonIpV4}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Corvus#Json#IJsonValue{Corvus#Json#JsonIpV4}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Corvus#Json#IJsonValue{Corvus#Json#JsonIpV4}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Corvus#Json#IJsonValue{Corvus#Json#JsonIpV4}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV4.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV4"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV4.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV4"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV4.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV4"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV4.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV4"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV4.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV4"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Equals(Corvus.Json.JsonIpV4@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.#ctor(System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV4"/> struct.
            </summary>
            <param name="value">The IP address.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Implicit(Corvus.Json.JsonIpV4)~System.Net.IPAddress">
            <summary>
            Implicit conversion to IPAddress.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not an ipV4.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.op_Implicit(System.Net.IPAddress)~Corvus.Json.JsonIpV4">
            <summary>
            Implicit conversion from IPaddress.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.GetIPAddress">
            <summary>
            Get the value as <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <returns>The IPAddress.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an ipV4.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.TryGetIPAddress(System.Net.IPAddress@)">
            <summary>
            Gets the string as <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="result">The value as IPAddress.</param>
            <returns><c>True</c> if the value could be retrieved.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV4.IPAddressParser(System.ReadOnlySpan{System.Char},System.Object@,System.Net.IPAddress@)">
            <summary>
            Parse an IP address.
            </summary>
            <param name="span">The span to parse.</param>
            <param name="state">The state object (expects null).</param>
            <param name="value">The parsed IP address.</param>
            <returns><see langword="true"/> if the address was parsed successfully.</returns>
        </member>
        <member name="T:Corvus.Json.JsonIpV6">
            <summary>
            Represents a JSON ipv6.
            </summary>
            <summary>
            Represents a JSON ipv6.
            </summary>
            <summary>
            Represents a JSON ipv6.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV6"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV6"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV6"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Implicit(Corvus.Json.JsonIpV6)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonIpV6">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Implicit(Corvus.Json.JsonIpV6)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonIpV6">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Implicit(System.String)~Corvus.Json.JsonIpV6">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Explicit(Corvus.Json.JsonIpV6)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonIpV6.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonIpV6.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonIpV6.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonIpV6.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonIpV6.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonIpV6.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonIpV6.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV6"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV6"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIpV6.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Equality(Corvus.Json.JsonIpV6@,Corvus.Json.JsonIpV6@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Inequality(Corvus.Json.JsonIpV6@,Corvus.Json.JsonIpV6@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Corvus#Json#IJsonValue{Corvus#Json#JsonIpV6}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Corvus#Json#IJsonValue{Corvus#Json#JsonIpV6}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Corvus#Json#IJsonValue{Corvus#Json#JsonIpV6}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Corvus#Json#IJsonValue{Corvus#Json#JsonIpV6}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV6.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV6"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV6.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV6"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV6.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV6"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV6.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV6"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIpV6.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIpV6"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Equals(Corvus.Json.JsonIpV6@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.#ctor(System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIpV6"/> struct.
            </summary>
            <param name="value">The IP address.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Implicit(Corvus.Json.JsonIpV6)~System.Net.IPAddress">
            <summary>
            Implicit conversion to IPAddress.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not an IpV6.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.op_Implicit(System.Net.IPAddress)~Corvus.Json.JsonIpV6">
            <summary>
            Implicit conversion from IPaddress.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.GetIPAddress">
            <summary>
            Get the value as <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <returns>The IPAddress.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an IpV6.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.TryGetIPAddress(System.Net.IPAddress@)">
            <summary>
            Gets the string as <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="result">The value as IPAddress.</param>
            <returns><c>True</c> if the value could be retrieved.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIpV6.IPAddressParser(System.ReadOnlySpan{System.Char},System.Object@,System.Net.IPAddress@)">
            <summary>
            Parse an IP address.
            </summary>
            <param name="span">The span to parse.</param>
            <param name="state">The state object (expects null).</param>
            <param name="value">The parsed IP address.</param>
            <returns><see langword="true"/> if the address was parsed successfully.</returns>
        </member>
        <member name="T:Corvus.Json.JsonIri">
            <summary>
            Represents a JSON iri.
            </summary>
            <summary>
            Represents a JSON iri.
            </summary>
            <summary>
            Represents a JSON iri.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIri"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIri"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIri"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Implicit(Corvus.Json.JsonIri)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonIri">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Implicit(Corvus.Json.JsonIri)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonIri">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Implicit(System.String)~Corvus.Json.JsonIri">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Explicit(Corvus.Json.JsonIri)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIri.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonIri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonIri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonIri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonIri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonIri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonIri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonIri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIri"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIri.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIri"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonIri.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIri.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIri.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIri.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIri.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Equality(Corvus.Json.JsonIri@,Corvus.Json.JsonIri@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Inequality(Corvus.Json.JsonIri@,Corvus.Json.JsonIri@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonIri.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIri.Corvus#Json#IJsonValue{Corvus#Json#JsonIri}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIri.Corvus#Json#IJsonValue{Corvus#Json#JsonIri}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIri.Corvus#Json#IJsonValue{Corvus#Json#JsonIri}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIri.Corvus#Json#IJsonValue{Corvus#Json#JsonIri}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIri.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIri.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIri.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIri.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIri.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIri.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.Equals(Corvus.Json.JsonIri@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIri.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIri.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIri"/> struct.
            </summary>
            <param name="value">The Uri value.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Implicit(Corvus.Json.JsonIri)~System.Uri">
            <summary>
            Implicit conversion to Uri.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not an Iri.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIri.op_Implicit(System.Uri)~Corvus.Json.JsonIri">
            <summary>
            Implicit conversion from Uri.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIri.GetUri">
            <summary>
            Gets the value as a Uri.
            </summary>
            <returns>The value as a Uri.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an Iri.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIri.TryGetUri(System.Uri@)">
            <summary>
            Try to get the Uri value.
            </summary>
            <param name="result">The Uri value.</param>
            <returns><c>True</c> if it was possible to get a Uri value from the instance.</returns>
        </member>
        <member name="T:Corvus.Json.JsonIriReference">
            <summary>
            Represents a JSON iriReference.
            </summary>
            <summary>
            Represents a JSON iriReference.
            </summary>
            <summary>
            Represents a JSON iriReference.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIriReference"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIriReference"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIriReference"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Implicit(Corvus.Json.JsonIriReference)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonIriReference">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Implicit(Corvus.Json.JsonIriReference)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonIriReference">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Implicit(System.String)~Corvus.Json.JsonIriReference">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Explicit(Corvus.Json.JsonIriReference)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonIriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonIriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonIriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonIriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonIriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonIriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonIriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIriReference"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIriReference"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonIriReference.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Equality(Corvus.Json.JsonIriReference@,Corvus.Json.JsonIriReference@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Inequality(Corvus.Json.JsonIriReference@,Corvus.Json.JsonIriReference@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Corvus#Json#IJsonValue{Corvus#Json#JsonIriReference}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Corvus#Json#IJsonValue{Corvus#Json#JsonIriReference}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Corvus#Json#IJsonValue{Corvus#Json#JsonIriReference}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Corvus#Json#IJsonValue{Corvus#Json#JsonIriReference}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIriReference.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIriReference.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIriReference.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIriReference.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonIriReference.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonIriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Equals(Corvus.Json.JsonIriReference@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonIriReference"/> struct.
            </summary>
            <param name="value">The Uri value.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Implicit(Corvus.Json.JsonIriReference)~System.Uri">
            <summary>
            Implicit conversion to Uri.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not an IriReference.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.op_Implicit(System.Uri)~Corvus.Json.JsonIriReference">
            <summary>
            Implicit conversion from Uri.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.GetUri">
            <summary>
            Gets the value as a Uri.
            </summary>
            <returns>The value as a Uri.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an IriReference.</exception>
        </member>
        <member name="M:Corvus.Json.JsonIriReference.TryGetUri(System.Uri@)">
            <summary>
            Try to get the Uri value.
            </summary>
            <param name="result">The Uri value.</param>
            <returns><c>True</c> if it was possible to get a Uri value from the instance.</returns>
        </member>
        <member name="T:Corvus.Json.JsonNotAny">
            <summary>
            Represents any JSON value, validating false.
            </summary>
            <summary>
            Represents any JSON value, validating false.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNotAny"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNotAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNotAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNotAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNotAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNotAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNotAny.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.op_Implicit(Corvus.Json.JsonNotAny)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.op_Equality(Corvus.Json.JsonNotAny@,Corvus.Json.JsonNotAny@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.op_Inequality(Corvus.Json.JsonNotAny@,Corvus.Json.JsonNotAny@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.CreateFromSerializedInstance``1(``0,System.Text.Json.JsonWriterOptions)">
            <summary>
            Create a <see cref="T:Corvus.Json.JsonNotAny"/> instance from an arbitrary object.
            </summary>
            <typeparam name="T">The type of the object from which to create the instance.</typeparam>
            <param name="instance">The object from which to create the instance.</param>
            <param name="options">The (optional) <see cref="T:System.Text.Json.JsonWriterOptions"/>.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNotAny"/> derived from serializing the object.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNotAny.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNotAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNotAny.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNotAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNotAny.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNotAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNotAny.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNotAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNotAny.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNotAny"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Equals(Corvus.Json.JsonNotAny@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNotAny.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonPointer">
            <summary>
            Represents a JSON pointer.
            </summary>
            <summary>
            Represents a JSON pointer.
            </summary>
            <summary>
            Represents a JSON pointer.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonPointer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonPointer"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointer.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonPointer"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointer.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonPointer"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointer.op_Implicit(Corvus.Json.JsonPointer)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointer.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonPointer">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointer.op_Implicit(Corvus.Json.JsonPointer)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointer.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonPointer">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointer.op_Implicit(System.String)~Corvus.Json.JsonPointer">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointer.op_Explicit(Corvus.Json.JsonPointer)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonPointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonPointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonPointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonPointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonPointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonPointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonPointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonPointer"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonPointer.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonPointer"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonPointer.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonPointer.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonPointer.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonPointer.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonPointer.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.op_Equality(Corvus.Json.JsonPointer@,Corvus.Json.JsonPointer@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.op_Inequality(Corvus.Json.JsonPointer@,Corvus.Json.JsonPointer@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonPointer.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Corvus#Json#IJsonValue{Corvus#Json#JsonPointer}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Corvus#Json#IJsonValue{Corvus#Json#JsonPointer}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Corvus#Json#IJsonValue{Corvus#Json#JsonPointer}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Corvus#Json#IJsonValue{Corvus#Json#JsonPointer}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonPointer.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonPointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonPointer.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonPointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonPointer.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonPointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonPointer.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonPointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonPointer.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonPointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Equals(Corvus.Json.JsonPointer@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointer.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPointer.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonRegex">
            <summary>
            Represents a JSON regex.
            </summary>
            <summary>
            Represents a JSON regex.
            </summary>
            <summary>
            Represents a JSON regex.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonRegex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRegex"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRegex"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRegex"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Implicit(Corvus.Json.JsonRegex)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonRegex">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Implicit(Corvus.Json.JsonRegex)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonRegex">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Implicit(System.String)~Corvus.Json.JsonRegex">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Explicit(Corvus.Json.JsonRegex)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonRegex.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonRegex.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonRegex.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonRegex.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonRegex.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonRegex.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonRegex.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRegex"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonRegex.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRegex"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonRegex.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonRegex.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonRegex.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonRegex.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRegex.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Equality(Corvus.Json.JsonRegex@,Corvus.Json.JsonRegex@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Inequality(Corvus.Json.JsonRegex@,Corvus.Json.JsonRegex@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonRegex.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Corvus#Json#IJsonValue{Corvus#Json#JsonRegex}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Corvus#Json#IJsonValue{Corvus#Json#JsonRegex}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Corvus#Json#IJsonValue{Corvus#Json#JsonRegex}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Corvus#Json#IJsonValue{Corvus#Json#JsonRegex}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRegex.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRegex"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRegex.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRegex"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRegex.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRegex"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRegex.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRegex"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRegex.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRegex"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Equals(Corvus.Json.JsonRegex@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRegex.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRegex"/> struct.
            </summary>
            <param name="value">The Regex value.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Implicit(Corvus.Json.JsonRegex)~System.Text.RegularExpressions.Regex">
            <summary>
            Implicit conversion to Regex.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.op_Implicit(System.Text.RegularExpressions.Regex)~Corvus.Json.JsonRegex">
            <summary>
            Implicit conversion from Regex.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRegex.GetRegex(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Gets the value as a Regex.
            </summary>
            <param name="options">The regular experssion options (<see cref="F:System.Text.RegularExpressions.RegexOptions.None"/> by default).</param>
            <returns>The value as a Regex.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a regex.</exception>
        </member>
        <member name="M:Corvus.Json.JsonRegex.TryGetRegex(System.Text.RegularExpressions.Regex@,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Try to get the Regex value.
            </summary>
            <param name="result">The regex value.</param>
            <param name="options">The regular experssion options (<see cref="F:System.Text.RegularExpressions.RegexOptions.None"/> by default).</param>
            <returns><c>True</c> if it was possible to get a regex value from the instance.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRegex.EmptyRegex">
            <remarks>
            Pattern:<br/>
            <code>.*</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character other than '\n' atomically any number of times.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Corvus.Json.JsonRelativePointer">
            <summary>
            Represents a JSON relativePointer.
            </summary>
            <summary>
            Represents a JSON relativePointer.
            </summary>
            <summary>
            Represents a JSON relativePointer.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRelativePointer"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRelativePointer"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRelativePointer"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.op_Implicit(Corvus.Json.JsonRelativePointer)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonRelativePointer">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.op_Implicit(Corvus.Json.JsonRelativePointer)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonRelativePointer">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.op_Implicit(System.String)~Corvus.Json.JsonRelativePointer">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.op_Explicit(Corvus.Json.JsonRelativePointer)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonRelativePointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonRelativePointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonRelativePointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonRelativePointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonRelativePointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonRelativePointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonRelativePointer.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRelativePointer"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonRelativePointer"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonRelativePointer.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.op_Equality(Corvus.Json.JsonRelativePointer@,Corvus.Json.JsonRelativePointer@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.op_Inequality(Corvus.Json.JsonRelativePointer@,Corvus.Json.JsonRelativePointer@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Corvus#Json#IJsonValue{Corvus#Json#JsonRelativePointer}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Corvus#Json#IJsonValue{Corvus#Json#JsonRelativePointer}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Corvus#Json#IJsonValue{Corvus#Json#JsonRelativePointer}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Corvus#Json#IJsonValue{Corvus#Json#JsonRelativePointer}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRelativePointer.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRelativePointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRelativePointer.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRelativePointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRelativePointer.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRelativePointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRelativePointer.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRelativePointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonRelativePointer.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonRelativePointer"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Equals(Corvus.Json.JsonRelativePointer@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonRelativePointer.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonSByte">
            <summary>
            Represents a JSON sbyte.
            </summary>
            <summary>
            Represents a sbyte.
            </summary>
            <summary>
            Represents a JSON sbyte.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSByte.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonSByte"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSByte">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Implicit(Corvus.Json.JsonSByte)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Implicit(Corvus.Json.JsonSByte)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonSByte">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Implicit(Corvus.Json.JsonSByte)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Explicit(Corvus.Json.JsonSByte)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Implicit(System.SByte)~Corvus.Json.JsonSByte">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Addition(Corvus.Json.JsonSByte,Corvus.Json.JsonSByte)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Subtraction(Corvus.Json.JsonSByte,Corvus.Json.JsonSByte)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Multiply(Corvus.Json.JsonSByte,Corvus.Json.JsonSByte)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Division(Corvus.Json.JsonSByte,Corvus.Json.JsonSByte)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Increment(Corvus.Json.JsonSByte)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Decrement(Corvus.Json.JsonSByte)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonSByte"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSByte.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonSByte"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSByte.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonSByte"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSByte.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSByte.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSByte.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSByte.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSByte.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Equality(Corvus.Json.JsonSByte@,Corvus.Json.JsonSByte@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_Inequality(Corvus.Json.JsonSByte@,Corvus.Json.JsonSByte@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_LessThan(Corvus.Json.JsonSByte@,Corvus.Json.JsonSByte@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_GreaterThan(Corvus.Json.JsonSByte@,Corvus.Json.JsonSByte@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_LessThanOrEqual(Corvus.Json.JsonSByte@,Corvus.Json.JsonSByte@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.op_GreaterThanOrEqual(Corvus.Json.JsonSByte@,Corvus.Json.JsonSByte@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Compare(Corvus.Json.JsonSByte@,Corvus.Json.JsonSByte@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSByte.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Corvus#Json#IJsonValue{Corvus#Json#JsonSByte}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Corvus#Json#IJsonValue{Corvus#Json#JsonSByte}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSByte.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Corvus#Json#IJsonValue{Corvus#Json#JsonSByte}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Corvus#Json#IJsonValue{Corvus#Json#JsonSByte}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSByte.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSByte.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSByte.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSByte.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSByte.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSByte"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Equals(Corvus.Json.JsonSByte@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSByte.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSByte.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSByte.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSByte.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSByte.AsSByte">
            <summary>
            Gets the value as an sbyte.
            </summary>
            <returns>The sbyte value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonSingle">
            <summary>
            Represents a JSON single.
            </summary>
            <summary>
            Represents a single.
            </summary>
            <summary>
            Represents a JSON single.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSingle.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonSingle"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonSingle">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Implicit(Corvus.Json.JsonSingle)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Implicit(Corvus.Json.JsonSingle)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonSingle">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Implicit(Corvus.Json.JsonSingle)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Explicit(Corvus.Json.JsonSingle)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Implicit(System.Single)~Corvus.Json.JsonSingle">
            <summary>
            Conversion from single.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Addition(Corvus.Json.JsonSingle,Corvus.Json.JsonSingle)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Subtraction(Corvus.Json.JsonSingle,Corvus.Json.JsonSingle)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Multiply(Corvus.Json.JsonSingle,Corvus.Json.JsonSingle)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Division(Corvus.Json.JsonSingle,Corvus.Json.JsonSingle)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Increment(Corvus.Json.JsonSingle)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Decrement(Corvus.Json.JsonSingle)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonSingle"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonSingle.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonSingle"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonSingle.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonSingle"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonSingle.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSingle.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSingle.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonSingle.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonSingle.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Equality(Corvus.Json.JsonSingle@,Corvus.Json.JsonSingle@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_Inequality(Corvus.Json.JsonSingle@,Corvus.Json.JsonSingle@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_LessThan(Corvus.Json.JsonSingle@,Corvus.Json.JsonSingle@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_GreaterThan(Corvus.Json.JsonSingle@,Corvus.Json.JsonSingle@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_LessThanOrEqual(Corvus.Json.JsonSingle@,Corvus.Json.JsonSingle@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.op_GreaterThanOrEqual(Corvus.Json.JsonSingle@,Corvus.Json.JsonSingle@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Compare(Corvus.Json.JsonSingle@,Corvus.Json.JsonSingle@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonSingle.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Corvus#Json#IJsonValue{Corvus#Json#JsonSingle}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Corvus#Json#IJsonValue{Corvus#Json#JsonSingle}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSingle.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Corvus#Json#IJsonValue{Corvus#Json#JsonSingle}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Corvus#Json#IJsonValue{Corvus#Json#JsonSingle}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSingle.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSingle"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSingle.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSingle"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSingle.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSingle"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSingle.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSingle"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonSingle.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonSingle"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Equals(Corvus.Json.JsonSingle@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonSingle.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSingle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSingle.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSingle.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonSingle.AsSingle">
            <summary>
            Gets the value as a float.
            </summary>
            <returns>The float value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonTime">
            <summary>
            Represents a JSON time.
            </summary>
            <summary>
            Represents a JSON time.
            </summary>
            <summary>
            Represents a JSON time.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonTime"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonTime"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonTime"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(Corvus.Json.JsonTime)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonTime">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(Corvus.Json.JsonTime)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonTime">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(System.String)~Corvus.Json.JsonTime">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Explicit(Corvus.Json.JsonTime)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonTime.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonTime.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonTime"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonTime.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonTime"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonTime.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonTime.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonTime.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonTime.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonTime.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Equality(Corvus.Json.JsonTime@,Corvus.Json.JsonTime@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Inequality(Corvus.Json.JsonTime@,Corvus.Json.JsonTime@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonTime.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonTime.Corvus#Json#IJsonValue{Corvus#Json#JsonTime}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonTime.Corvus#Json#IJsonValue{Corvus#Json#JsonTime}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonTime.Corvus#Json#IJsonValue{Corvus#Json#JsonTime}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonTime.Corvus#Json#IJsonValue{Corvus#Json#JsonTime}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonTime.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonTime.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonTime.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonTime.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonTime.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonTime.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonTime"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.Equals(Corvus.Json.JsonTime@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonTime.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonTime.#ctor(NodaTime.OffsetTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonTime"/> struct.
            </summary>
            <param name="value">The NodaTime time value.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.#ctor(System.TimeOnly)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonTime"/> struct.
            </summary>
            <param name="value">The <see cref="T:System.TimeOnly"/> value.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.#ctor(System.TimeOnly,NodaTime.Offset)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonTime"/> struct.
            </summary>
            <param name="value">The <see cref="T:System.TimeOnly"/> value.</param>
            <param name="offset">A nodatime offset for the value.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(Corvus.Json.JsonTime)~NodaTime.OffsetTime">
            <summary>
            Implicit conversion to OffsetTime.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(NodaTime.OffsetTime)~Corvus.Json.JsonTime">
            <summary>
            Implicit conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(Corvus.Json.JsonTime)~System.TimeOnly">
            <summary>
            Implicit conversion to OffsetTime.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.op_Implicit(System.TimeOnly)~Corvus.Json.JsonTime">
            <summary>
            Implicit conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonTime.GetTime">
            <summary>
            Gets the value as a OffsetTime.
            </summary>
            <returns>The value as a OffsetTime.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a time.</exception>
        </member>
        <member name="M:Corvus.Json.JsonTime.TryGetTime(NodaTime.OffsetTime@)">
            <summary>
            Try to get the time value.
            </summary>
            <param name="result">The time value.</param>
            <returns><c>True</c> if it was possible to get a time value from the instance.</returns>
        </member>
        <member name="T:Corvus.Json.JsonUInt128">
            <summary>
            Represents a JSON uint128.
            </summary>
            <summary>
            Represents a uint128.
            </summary>
            <summary>
            Represents a JSON uint128.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.#ctor(System.UInt128)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt128"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonUInt128">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Implicit(Corvus.Json.JsonUInt128)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Implicit(Corvus.Json.JsonUInt128)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonUInt128">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Explicit(Corvus.Json.JsonUInt128)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Implicit(Corvus.Json.JsonUInt128)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Implicit(System.UInt128)~Corvus.Json.JsonUInt128">
            <summary>
            Conversion from uint128.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Addition(Corvus.Json.JsonUInt128,Corvus.Json.JsonUInt128)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Subtraction(Corvus.Json.JsonUInt128,Corvus.Json.JsonUInt128)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Multiply(Corvus.Json.JsonUInt128,Corvus.Json.JsonUInt128)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Division(Corvus.Json.JsonUInt128,Corvus.Json.JsonUInt128)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Increment(Corvus.Json.JsonUInt128)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Decrement(Corvus.Json.JsonUInt128)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt128"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt128"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt128"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt128.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Equality(Corvus.Json.JsonUInt128@,Corvus.Json.JsonUInt128@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_Inequality(Corvus.Json.JsonUInt128@,Corvus.Json.JsonUInt128@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_LessThan(Corvus.Json.JsonUInt128@,Corvus.Json.JsonUInt128@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_GreaterThan(Corvus.Json.JsonUInt128@,Corvus.Json.JsonUInt128@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_LessThanOrEqual(Corvus.Json.JsonUInt128@,Corvus.Json.JsonUInt128@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.op_GreaterThanOrEqual(Corvus.Json.JsonUInt128@,Corvus.Json.JsonUInt128@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Compare(Corvus.Json.JsonUInt128@,Corvus.Json.JsonUInt128@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt128}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt128}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt128}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt128}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt128.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt128.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt128.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt128.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt128.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt128"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Equals(Corvus.Json.JsonUInt128@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt128.AsUInt128">
            <summary>
            Gets the value as a UInt128.
            </summary>
            <returns>The UInt128 value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonUInt16">
            <summary>
            Represents a JSON uint16.
            </summary>
            <summary>
            Represents a uint16.
            </summary>
            <summary>
            Represents a JSON uint16.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt16"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonUInt16">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Implicit(Corvus.Json.JsonUInt16)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Implicit(Corvus.Json.JsonUInt16)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonUInt16">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Implicit(Corvus.Json.JsonUInt16)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Explicit(Corvus.Json.JsonUInt16)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Implicit(System.UInt16)~Corvus.Json.JsonUInt16">
            <summary>
            Conversion from uint16.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Addition(Corvus.Json.JsonUInt16,Corvus.Json.JsonUInt16)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Subtraction(Corvus.Json.JsonUInt16,Corvus.Json.JsonUInt16)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Multiply(Corvus.Json.JsonUInt16,Corvus.Json.JsonUInt16)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Division(Corvus.Json.JsonUInt16,Corvus.Json.JsonUInt16)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Increment(Corvus.Json.JsonUInt16)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Decrement(Corvus.Json.JsonUInt16)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt16"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt16"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt16"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt16.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Equality(Corvus.Json.JsonUInt16@,Corvus.Json.JsonUInt16@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_Inequality(Corvus.Json.JsonUInt16@,Corvus.Json.JsonUInt16@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_LessThan(Corvus.Json.JsonUInt16@,Corvus.Json.JsonUInt16@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_GreaterThan(Corvus.Json.JsonUInt16@,Corvus.Json.JsonUInt16@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_LessThanOrEqual(Corvus.Json.JsonUInt16@,Corvus.Json.JsonUInt16@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.op_GreaterThanOrEqual(Corvus.Json.JsonUInt16@,Corvus.Json.JsonUInt16@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Compare(Corvus.Json.JsonUInt16@,Corvus.Json.JsonUInt16@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt16}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt16}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt16}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt16}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt16.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt16.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt16.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt16.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt16.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt16"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Equals(Corvus.Json.JsonUInt16@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt16.AsUInt16">
            <summary>
            Gets the value as a ushort.
            </summary>
            <returns>The ushort value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonUInt32">
            <summary>
            Represents a JSON uint32.
            </summary>
            <summary>
            Represents a uint32.
            </summary>
            <summary>
            Represents a JSON uint32.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt32"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonUInt32">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Implicit(Corvus.Json.JsonUInt32)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Implicit(Corvus.Json.JsonUInt32)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonUInt32">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Implicit(Corvus.Json.JsonUInt32)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Explicit(Corvus.Json.JsonUInt32)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Implicit(System.UInt32)~Corvus.Json.JsonUInt32">
            <summary>
            Conversion from uint32.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Addition(Corvus.Json.JsonUInt32,Corvus.Json.JsonUInt32)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Subtraction(Corvus.Json.JsonUInt32,Corvus.Json.JsonUInt32)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Multiply(Corvus.Json.JsonUInt32,Corvus.Json.JsonUInt32)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Division(Corvus.Json.JsonUInt32,Corvus.Json.JsonUInt32)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Increment(Corvus.Json.JsonUInt32)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Decrement(Corvus.Json.JsonUInt32)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt32"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt32"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt32"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt32.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Equality(Corvus.Json.JsonUInt32@,Corvus.Json.JsonUInt32@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_Inequality(Corvus.Json.JsonUInt32@,Corvus.Json.JsonUInt32@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_LessThan(Corvus.Json.JsonUInt32@,Corvus.Json.JsonUInt32@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_GreaterThan(Corvus.Json.JsonUInt32@,Corvus.Json.JsonUInt32@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_LessThanOrEqual(Corvus.Json.JsonUInt32@,Corvus.Json.JsonUInt32@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.op_GreaterThanOrEqual(Corvus.Json.JsonUInt32@,Corvus.Json.JsonUInt32@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Compare(Corvus.Json.JsonUInt32@,Corvus.Json.JsonUInt32@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt32}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt32}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt32}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt32}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt32.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt32.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt32.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt32.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt32.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt32"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Equals(Corvus.Json.JsonUInt32@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt32.AsUInt32">
            <summary>
            Gets the value as a uint.
            </summary>
            <returns>The uint value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonUInt64">
            <summary>
            Represents a JSON uint64.
            </summary>
            <summary>
            Represents a uint64.
            </summary>
            <summary>
            Represents a JSON uint64.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt64"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonUInt64">
            <summary>
            Conversion from JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Implicit(Corvus.Json.JsonUInt64)~Corvus.Json.JsonNumber">
            <summary>
            Conversion to JsonNumber.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Implicit(Corvus.Json.JsonUInt64)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonUInt64">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Implicit(Corvus.Json.JsonUInt64)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Explicit(Corvus.Json.JsonUInt64)~System.UInt128">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Implicit(System.UInt64)~Corvus.Json.JsonUInt64">
            <summary>
            Conversion from ulong.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Addition(Corvus.Json.JsonUInt64,Corvus.Json.JsonUInt64)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Subtraction(Corvus.Json.JsonUInt64,Corvus.Json.JsonUInt64)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Multiply(Corvus.Json.JsonUInt64,Corvus.Json.JsonUInt64)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Division(Corvus.Json.JsonUInt64,Corvus.Json.JsonUInt64)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Increment(Corvus.Json.JsonUInt64)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Decrement(Corvus.Json.JsonUInt64)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt64"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt64"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUInt64"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUInt64.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Equality(Corvus.Json.JsonUInt64@,Corvus.Json.JsonUInt64@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_Inequality(Corvus.Json.JsonUInt64@,Corvus.Json.JsonUInt64@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_LessThan(Corvus.Json.JsonUInt64@,Corvus.Json.JsonUInt64@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_GreaterThan(Corvus.Json.JsonUInt64@,Corvus.Json.JsonUInt64@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_LessThanOrEqual(Corvus.Json.JsonUInt64@,Corvus.Json.JsonUInt64@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.op_GreaterThanOrEqual(Corvus.Json.JsonUInt64@,Corvus.Json.JsonUInt64@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Compare(Corvus.Json.JsonUInt64@,Corvus.Json.JsonUInt64@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt64}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt64}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt64}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Corvus#Json#IJsonValue{Corvus#Json#JsonUInt64}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt64.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt64.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt64.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt64.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUInt64.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUInt64"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Equals(Corvus.Json.JsonUInt64@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUInt64.AsUInt64">
            <summary>
            Gets the value as a ulong.
            </summary>
            <returns>The ulong value.</returns>
        </member>
        <member name="T:Corvus.Json.JsonUri">
            <summary>
            Represents a JSON uri.
            </summary>
            <summary>
            Represents a JSON uri.
            </summary>
            <summary>
            Represents a JSON uri.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUri"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUri"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUri"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Implicit(Corvus.Json.JsonUri)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonUri">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Implicit(Corvus.Json.JsonUri)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonUri">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Implicit(System.String)~Corvus.Json.JsonUri">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Explicit(Corvus.Json.JsonUri)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUri.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonUri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonUri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonUri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonUri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonUri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonUri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonUri.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUri"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUri.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUri"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonUri.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUri.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUri.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUri.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUri.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Equality(Corvus.Json.JsonUri@,Corvus.Json.JsonUri@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Inequality(Corvus.Json.JsonUri@,Corvus.Json.JsonUri@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonUri.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUri.Corvus#Json#IJsonValue{Corvus#Json#JsonUri}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUri.Corvus#Json#IJsonValue{Corvus#Json#JsonUri}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUri.Corvus#Json#IJsonValue{Corvus#Json#JsonUri}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUri.Corvus#Json#IJsonValue{Corvus#Json#JsonUri}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUri.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUri.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUri.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUri.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUri.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUri.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUri"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.Equals(Corvus.Json.JsonUri@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUri.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUri.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUri"/> struct.
            </summary>
            <param name="value">The Uri value.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Implicit(Corvus.Json.JsonUri)~System.Uri">
            <summary>
            Implicit conversion to Uri.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a uri.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUri.op_Implicit(System.Uri)~Corvus.Json.JsonUri">
            <summary>
            Implicit conversion from Uri.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUri.GetUri">
            <summary>
            Gets the value as a Uri.
            </summary>
            <returns>The value as a Uri.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a uri.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUri.TryGetUri(System.Uri@)">
            <summary>
            Try to get the Uri value.
            </summary>
            <param name="result">The Uri value.</param>
            <returns><c>True</c> if it was possible to get a Uri value from the instance.</returns>
        </member>
        <member name="T:Corvus.Json.JsonUriReference">
            <summary>
            Represents a JSON uriReference.
            </summary>
            <summary>
            Represents a JSON uriReference.
            </summary>
            <summary>
            Represents a JSON uriReference.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriReference"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriReference"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriReference"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Implicit(Corvus.Json.JsonUriReference)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonUriReference">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Implicit(Corvus.Json.JsonUriReference)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonUriReference">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Implicit(System.String)~Corvus.Json.JsonUriReference">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Explicit(Corvus.Json.JsonUriReference)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonUriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonUriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonUriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonUriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonUriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonUriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonUriReference.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriReference"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriReference"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriReference.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Equality(Corvus.Json.JsonUriReference@,Corvus.Json.JsonUriReference@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Inequality(Corvus.Json.JsonUriReference@,Corvus.Json.JsonUriReference@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Corvus#Json#IJsonValue{Corvus#Json#JsonUriReference}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Corvus#Json#IJsonValue{Corvus#Json#JsonUriReference}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Corvus#Json#IJsonValue{Corvus#Json#JsonUriReference}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Corvus#Json#IJsonValue{Corvus#Json#JsonUriReference}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriReference.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriReference.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriReference.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriReference.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriReference.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriReference"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Equals(Corvus.Json.JsonUriReference@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriReference"/> struct.
            </summary>
            <param name="value">The Uri value.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Implicit(Corvus.Json.JsonUriReference)~System.Uri">
            <summary>
            Implicit conversion to Uri.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a uri.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.op_Implicit(System.Uri)~Corvus.Json.JsonUriReference">
            <summary>
            Implicit conversion from Uri.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.GetUri">
            <summary>
            Gets the value as a Uri.
            </summary>
            <returns>The value as a Uri.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a uri.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUriReference.TryGetUri(System.Uri@)">
            <summary>
            Try to get the Uri value.
            </summary>
            <param name="result">The Uri value.</param>
            <returns><c>True</c> if it was possible to get a Uri value from the instance.</returns>
        </member>
        <member name="T:Corvus.Json.JsonUriTemplate">
            <summary>
            Represents a JSON uriTemplate.
            </summary>
            <summary>
            Represents a JSON uriTemplate.
            </summary>
            <summary>
            Represents a JSON UriTemplate.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriTemplate"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriTemplate"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriTemplate"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.op_Implicit(Corvus.Json.JsonUriTemplate)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonUriTemplate">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.op_Implicit(Corvus.Json.JsonUriTemplate)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonUriTemplate">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.op_Implicit(System.String)~Corvus.Json.JsonUriTemplate">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.op_Explicit(Corvus.Json.JsonUriTemplate)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonUriTemplate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonUriTemplate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonUriTemplate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonUriTemplate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonUriTemplate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonUriTemplate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonUriTemplate.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriTemplate"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUriTemplate"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUriTemplate.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.op_Equality(Corvus.Json.JsonUriTemplate@,Corvus.Json.JsonUriTemplate@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.op_Inequality(Corvus.Json.JsonUriTemplate@,Corvus.Json.JsonUriTemplate@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Corvus#Json#IJsonValue{Corvus#Json#JsonUriTemplate}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Corvus#Json#IJsonValue{Corvus#Json#JsonUriTemplate}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Corvus#Json#IJsonValue{Corvus#Json#JsonUriTemplate}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Corvus#Json#IJsonValue{Corvus#Json#JsonUriTemplate}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriTemplate.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriTemplate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriTemplate.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriTemplate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriTemplate.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriTemplate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriTemplate.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriTemplate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUriTemplate.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUriTemplate"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Equals(Corvus.Json.JsonUriTemplate@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUriTemplate.TryGetUriTemplate(Corvus.Json.UriTemplates.UriTemplate@,System.Boolean,System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,Corvus.Json.JsonAny})">
            <summary>
            Gets the value as a <see cref="T:Corvus.Json.UriTemplates.UriTemplate"/>.
            </summary>
            <param name="result">The value as a UriTemplate.</param>
            <param name="resolvePartially">Whether to allow partial resolution.</param>
            <param name="caseInsensitiveParameterNames">Whether to use case insensitive parameter names.</param>
            <param name="createParameterRegex">Whether to create a parameter regex (defaults to true).</param>
            <param name="parameters">The parameter values with which to initialize the template.</param>
            <returns><c>True</c> if the value could be retrieved.</returns>
        </member>
        <member name="T:Corvus.Json.JsonUuid">
            <summary>
            Represents a JSON uuid.
            </summary>
            <summary>
            Represents a JSON uuid.
            </summary>
            <summary>
            Represents a JSON uuid.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUuid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUuid"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUuid"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUuid"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Implicit(Corvus.Json.JsonUuid)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonUuid">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Implicit(Corvus.Json.JsonUuid)~Corvus.Json.JsonString">
            <summary>
            Conversion to JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonUuid">
            <summary>
            Conversion from JsonString.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Implicit(System.String)~Corvus.Json.JsonUuid">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Explicit(Corvus.Json.JsonUuid)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonUuid.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonUuid.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonUuid.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonUuid.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonUuid.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonUuid.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonUuid.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUuid"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonUuid.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUuid"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonUuid.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUuid.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUuid.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonUuid.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonUuid.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Equality(Corvus.Json.JsonUuid@,Corvus.Json.JsonUuid@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Inequality(Corvus.Json.JsonUuid@,Corvus.Json.JsonUuid@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonUuid.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Corvus#Json#IJsonValue{Corvus#Json#JsonUuid}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Corvus#Json#IJsonValue{Corvus#Json#JsonUuid}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Corvus#Json#IJsonValue{Corvus#Json#JsonUuid}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Corvus#Json#IJsonValue{Corvus#Json#JsonUuid}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUuid.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUuid"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUuid.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUuid"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUuid.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUuid"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUuid.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUuid"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonUuid.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonUuid"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Equals(Corvus.Json.JsonUuid@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonUuid.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonUuid"/> struct.
            </summary>
            <param name="value">The Guid value.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Implicit(Corvus.Json.JsonUuid)~System.Guid">
            <summary>
            Implicit conversion to Guid.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a uuid.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUuid.op_Implicit(System.Guid)~Corvus.Json.JsonUuid">
            <summary>
            Implicit conversion from Guid.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonUuid.GetGuid">
            <summary>
            Gets the value as a Guid.
            </summary>
            <returns>The value as a Guid.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not a uuid.</exception>
        </member>
        <member name="M:Corvus.Json.JsonUuid.TryGetGuid(System.Guid@)">
            <summary>
            Try to get the Guid value.
            </summary>
            <param name="result">The guid value.</param>
            <returns><c>True</c> if it was possible to get a guid value from the instance.</returns>
        </member>
        <member name="M:Corvus.Json.JsonUuid.GuidParser(System.ReadOnlySpan{System.Char},System.Object@,System.Guid@)">
            <summary>
            Parse an IP address.
            </summary>
            <param name="span">The span to parse.</param>
            <param name="state">The state object (expects null).</param>
            <param name="value">The parsed IP address.</param>
            <returns><see langword="true"/> if the address was parsed successfully.</returns>
        </member>
        <member name="T:Corvus.Json.IJsonArray`1">
            <summary>
            A JSON array value.
            </summary>
            <typeparam name="T">The type implementing the interface.</typeparam>
        </member>
        <member name="P:Corvus.Json.IJsonArray`1.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="index">The index at which to retrieve the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.GetArrayLength">
            <summary>
            Gets the length of the IJsonArray.
            </summary>
            <returns>The length of the array.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.EnumerateArray">
            <summary>
            Enumerate the array.
            </summary>
            <returns>An enumerator for the array.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.EnumerateArray``1">
            <summary>
            Enumerate the array as a specific type.
            </summary>
            <typeparam name="TItem">The type of the items in the array.</typeparam>
            <returns>An enumerator for the array.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.AsImmutableList">
            <summary>
            Construct an ImmutableList from the items.
            </summary>
            <returns>An immutable list of items constructed from the array.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.AsImmutableListBuilder">
            <summary>
            Construct an ImmutableList.Builder from the items.
            </summary>
            <returns>An immutable list builder of items constructed from the array.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.Add(Corvus.Json.JsonAny@)">
            <summary>
            Add an item to the array.
            </summary>
            <param name="item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.Add(Corvus.Json.JsonAny[])">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name="items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Add a set of items to the array.
            </summary>
            <param name="items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a set of items to the array.
            </summary>
            <typeparam name="TItem">The type of the items to add.</typeparam>
            <param name="items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.AddRange``1(``0@)">
            <summary>
            Add a set of items to the array.
            </summary>
            <typeparam name="TArray">The type of the array containing the items to add.</typeparam>
            <param name="items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Insert an item into the array at the given index.
            </summary>
            <param name="index">The index at which to add the item.</param>
            <param name="item1">The item to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.InsertRange``1(System.Int32,``0@)">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <typeparam name="TArray">The type of the array containing the items to add.</typeparam>
            <param name="index">The index at which to add the items.</param>
            <param name="items">The items to add.</param>
            <returns>An instance of the array with the item added.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <param name="index">The index at which to add the items.</param>
            <param name="items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert items into the array at the given index.
            </summary>
            <typeparam name="TItem">The type of the items to add.</typeparam>
            <param name="index">The index at which to add the items.</param>
            <param name="items">The items to add.</param>
            <returns>An instance of the array with the items added.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.Remove(Corvus.Json.JsonAny@)">
            <summary>
            Remove the specified item from the array.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the index from the array.
            </summary>
            <param name="index">The index at which to remove the item.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove the item at the index from the array.
            </summary>
            <param name="index">The index at which to start to remove the items.</param>
            <param name="count">The number of items to remove.</param>
            <returns>An instance of the array with the item removed.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The range was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Replace the first instance of the given value with the new value, even if the items are identical.
            </summary>
            <param name="oldValue">The item to remove.</param>
            <param name="newValue">The item to insert.</param>
            <returns>An instance of the array with the item replaced.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Set the item at the given index.
            </summary>
            <param name="index">The index at which to set the item.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the array with the item set to the given value.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Construct an instance of the array from a list of json values.
            </summary>
            <param name="items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Construct an instance of the array from a list of json values.
            </summary>
            <param name="items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonArray`1.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Construct an instance of the array from a list of json values.
            </summary>
            <typeparam name="TItem">The type of the items in the enumerable.</typeparam>
            <param name="items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="T:Corvus.Json.IJsonBoolean`1">
            <summary>
            A JSON boolean.
            </summary>
            <typeparam name="T">The type implementin the interface.</typeparam>
        </member>
        <member name="M:Corvus.Json.IJsonBoolean`1.op_Implicit(System.Boolean)~`0">
            <summary>
            Conversion from bool.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.IJsonBoolean`1.op_Implicit(`0)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonBoolean`1.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name="result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonBoolean`1.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="T:Corvus.Json.IJsonNumber`1">
            <summary>
            A JSON number.
            </summary>
            <typeparam name="T">The type implementin the interface.</typeparam>
        </member>
        <member name="P:Corvus.Json.IJsonNumber`1.AsBinaryJsonNumber">
            <summary>
            Gets the Json Number as a binary number.
            </summary>
        </member>
        <member name="T:Corvus.Json.IJsonObject`1">
            <summary>
            A JSON object.
            </summary>
            <typeparam name="T">The type implementing the interface.</typeparam>
        </member>
        <member name="P:Corvus.Json.IJsonObject`1.Item(Corvus.Json.JsonPropertyName@)">
            <summary>
            Gets the value of the property with the given name.
            </summary>
            <param name="name">The name of the property to get.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The property was not present in the object.</exception>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.EnumerateObject">
            <summary>
            Enumerate the object.
            </summary>
            <returns>An enumerator for the object.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.HasProperties">
            <summary>
            Gets a value indicating whether the object has any properties.
            </summary>
            <returns><c>True</c> if the object has properties.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.HasProperty(Corvus.Json.JsonPropertyName@)">
            <summary>
            Determine if a property exists on the object.
            </summary>
            <param name="name">The name of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.HasProperty(System.String)">
            <summary>
            Determine if a property exists on the object.
            </summary>
            <param name="name">The name of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.HasProperty(System.ReadOnlySpan{System.Char})">
            <summary>
            Determine if a property exists on the object.
            </summary>
            <param name="name">The name of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.HasProperty(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determine if a property exists on the object.
            </summary>
            <param name="utf8Name">The name of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Get a property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <summary>
            Get a property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <summary>
            Get a property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <summary>
            Get a property.
            </summary>
            <param name="utf8Name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <summary>
            Get a property.
            </summary>
            <typeparam name="TValue">The type of the value to get.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.TryGetProperty``1(System.String,``0@)">
            <summary>
            Get a property.
            </summary>
            <typeparam name="TValue">The type of the value to get.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <summary>
            Get a property.
            </summary>
            <typeparam name="TValue">The type of the value to get.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <summary>
            Get a property.
            </summary>
            <typeparam name="TValue">The type of the value to get.</typeparam>
            <param name="utf8Name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns><c>True</c> if the property was present.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <summary>
            Sets the given property value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns>The instance with the property set.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <summary>
            Removes the given property value.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The instance with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.RemoveProperty(System.String)">
            <summary>
            Removes the given property value.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The instance with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <summary>
            Removes the given property value.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The instance with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <summary>
            Removes the given property value.
            </summary>
            <param name="utf8Name">The utf8-encoded name of the property.</param>
            <returns>The instance with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonObject`1.AsPropertyBacking">
            <summary>
            Gets the object as an immutable dictionary of properties.
            </summary>
            <returns>An immutable dictionary of the properties of the object.</returns>
        </member>
        <member name="T:Corvus.Json.IJsonString`1">
            <summary>
            A JSON string.
            </summary>
            <typeparam name="T">The type implementing the interface.</typeparam>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.op_Implicit(System.String)~`0">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.op_Explicit(`0)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.TryGetString(System.String@)">
            <summary>
            Try to get the string value.
            </summary>
            <param name="value">The value as a string.</param>
            <returns><c>True</c> if the value can be recovered as a string.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.GetString">
            <summary>
            Get the string value as <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>If the value is a string, the value as a string. Otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonString`1.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="T:Corvus.Json.IJsonValue">
            <summary>
            A JSON value.
            </summary>
        </member>
        <member name="P:Corvus.Json.IJsonValue.AsAny">
            <summary>
            Gets the value as a <see cref="T:Corvus.Json.JsonAny"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.IJsonValue.AsString">
            <summary>
            Gets the value as a <see cref="T:Corvus.Json.JsonString"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="P:Corvus.Json.IJsonValue.AsNumber">
            <summary>
            Gets the value as a <see cref="T:Corvus.Json.JsonNumber"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
        </member>
        <member name="P:Corvus.Json.IJsonValue.AsObject">
            <summary>
            Gets the value as a <see cref="T:Corvus.Json.JsonObject"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value was not an object.</exception>
        </member>
        <member name="P:Corvus.Json.IJsonValue.AsArray">
            <summary>
            Gets the value as a <see cref="T:Corvus.Json.JsonArray"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="P:Corvus.Json.IJsonValue.AsBoolean">
            <summary>
            Gets the value as a <see cref="T:Corvus.Json.JsonBoolean"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value was not a boolean.</exception>
        </member>
        <member name="P:Corvus.Json.IJsonValue.AsJsonElement">
            <summary>
            Gets the value as a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.IJsonValue.HasJsonElementBacking">
            <summary>
            Gets a value indicating whether the value has a json element backing.
            </summary>
        </member>
        <member name="P:Corvus.Json.IJsonValue.HasDotnetBacking">
            <summary>
            Gets a value indicating whether the value has a dotnet instance backing.
            </summary>
        </member>
        <member name="P:Corvus.Json.IJsonValue.ValueKind">
            <summary>
            Gets the value kind of the element.
            </summary>
        </member>
        <member name="M:Corvus.Json.IJsonValue.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Writes the instance to a <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <param name="writer">The writer to which to write the instance.</param>
        </member>
        <member name="M:Corvus.Json.IJsonValue.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue.Equals``1(``0@)">
            <summary>
            Compares with another value for equality.
            </summary>
            <typeparam name="T">The type of the item with which to compare.</typeparam>
            <param name="other">The instance with which to compare.</param>
            <returns><c>True</c> if the other instance is equal to this one.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the instance against its own schema.
            </summary>
            <param name="context">The current validation context.</param>
            <param name="validationLevel">The validation level. (Defaults to <see cref="F:Corvus.Json.ValidationLevel.Flag"/>).</param>
            <returns>The <see cref="T:Corvus.Json.ValidationContext"/> updated with the results from this validation operation.</returns>
        </member>
        <member name="T:Corvus.Json.IJsonValue`1">
            <summary>
            Interface implemented by all JSON values.
            </summary>
            <typeparam name="T">The type implementing the interface.</typeparam>
        </member>
        <member name="P:Corvus.Json.IJsonValue`1.Null">
            <summary>
            Gets the null value.
            </summary>
        </member>
        <member name="P:Corvus.Json.IJsonValue`1.Undefined">
            <summary>
            Gets the undefined value.
            </summary>
        </member>
        <member name="P:Corvus.Json.IJsonValue`1.DefaultInstance">
            <summary>
            Gets the default instance.
            </summary>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it does not support the type.</remarks>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it does not support the type.</remarks>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it does not support the type.</remarks>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it does not support the type.</remarks>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it does not support the type.</remarks>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>An instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>An instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>An instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>An instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>An instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.IJsonValue`1.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="T:Corvus.Json.Internal.Backing">
            <summary>
            Backing field type discriminator.
            </summary>
        </member>
        <member name="T:Corvus.Json.Internal.JsonValueHelpers">
            <summary>
            Methods that help you to implement <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
            <summary>
            Methods that help you to implement <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
            <summary>
            Methods that help you to implement <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
            <summary>
             Methods that help you implement <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
            <summary>
            Methods that help you to implement <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
            <summary>
            Methods that help you to implement <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
            <summary>
            Methods that help you to implement <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
            <summary>
            Methods that help you to implement <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareWithString``1(``0@,System.ReadOnlySpan{System.Char})">
            <summary>
            Compares two values.
            </summary>
            <typeparam name="TItem1">The type of the first value.</typeparam>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareWithUtf8Bytes``1(``0@,System.ReadOnlySpan{System.Byte})">
            <summary>
            Compares two values.
            </summary>
            <typeparam name="TItem1">The type of the first value.</typeparam>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareValues``2(``0@,``1@)">
            <summary>
            Compares two values.
            </summary>
            <typeparam name="TItem1">The type of the first value.</typeparam>
            <typeparam name="TItem2">The type of the second value.</typeparam>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareValues``1(``0@,Corvus.Json.JsonAny@)">
            <summary>
            Compares two values.
            </summary>
            <typeparam name="TItem">The type of the other value.</typeparam>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
            <exception cref="T:System.InvalidOperationException">The values were not numbers.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareValues``1(Corvus.Json.JsonAny@,``0@)">
            <summary>
            Compares two values.
            </summary>
            <typeparam name="TItem">The type of the other value.</typeparam>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
            <exception cref="T:System.InvalidOperationException">The values were not numbers.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareValues(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Compares two values.
            </summary>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
            <exception cref="T:System.InvalidOperationException">The values were not numbers.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareObjects``2(``0@,``1@)">
            <summary>
            Compares two object values.
            </summary>
            <typeparam name="TItem1">The type of the first object value.</typeparam>
            <typeparam name="TItem2">The type of the second object value.</typeparam>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
            <exception cref="T:System.InvalidOperationException">The values were not objects.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareArrays``2(``0@,``1@)">
            <summary>
            Compares two array values.
            </summary>
            <typeparam name="TItem1">The type of the first array value.</typeparam>
            <typeparam name="TItem2">The type of the second array value.</typeparam>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
            <exception cref="T:System.InvalidOperationException">The values were not arrays.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.CompareStrings``2(``0@,``1@)">
            <summary>
            Compares two string values.
            </summary>
            <typeparam name="TItem1">The type of the first string value.</typeparam>
            <typeparam name="TItem2">The type of the second string value.</typeparam>
            <param name="item1">The first value.</param>
            <param name="item2">The second value.</param>
            <returns><c>True</c> if they are equal.</returns>
            <exception cref="T:System.InvalidOperationException">The values were not strings.</exception>
        </member>
        <member name="F:Corvus.Json.Internal.JsonValueHelpers.MaxStackAlloc">
            <summary>
            Gets the maximum size to allocate on the stack.
            </summary>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetHashCode``1(``0@)">
            <summary>
            Gets the hash code for a JSON value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The hash code for the value.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetHashCode(Corvus.Json.JsonAny@)">
            <summary>
            Gets the hash code for a JSON value.
            </summary>
            <param name="value">The value.</param>
            <returns>The hash code for the value.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetArrayHashCode``1(``0@)">
            <summary>
            Gets the HashCode for an array.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The hashcode for the value.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an array.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetObjectHashCode``1(``0@)">
            <summary>
            Gets the HashCode for an object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The hashcode for the value.</returns>
            <exception cref="T:System.InvalidOperationException">The value was not an object.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetImmutableListFromJsonElementWithout(System.Text.Json.JsonElement@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an immutable list from a JsonElement, removing the first instance of a specific value.
            </summary>
            <param name="jsonElement">The json element containing the source array.</param>
            <param name="item">The item to remove.</param>
            <returns>An immutable list with the item removed.</returns>
            <exception cref="T:System.InvalidOperationException">The element was not a list.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetImmutableListFromJsonElementReplacing(System.Text.Json.JsonElement@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an immutable list from a JsonElement, removing the first instance of a specific value, and replacing it with a new value.
            </summary>
            <param name="jsonElement">The json element containing the source array.</param>
            <param name="oldItem">The item to remove.</param>
            <param name="newItem">The item to insert.</param>
            <returns>An immutable list with the old item removed, and the new item inserted in its place.</returns>
            <exception cref="T:System.InvalidOperationException">The element was not a list.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetImmutableListFromJsonElementWithoutRange(System.Text.Json.JsonElement@,System.Int32,System.Int32)">
            <summary>
            Builds an immutable list from a JsonElement, removing a range of values from the specified point.
            </summary>
            <param name="jsonElement">The json element containing the source array.</param>
            <param name="index">The index at which to remove the items.</param>
            <param name="count">The number of items to remove.</param>
            <returns>An immutable list with the items removed.</returns>
            <exception cref="T:System.InvalidOperationException">The element was not a list.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetImmutableListFromJsonElementSetting(System.Text.Json.JsonElement@,System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an immutable list from a JsonElement, setting the item at the specified index to the given value.
            </summary>
            <param name="jsonElement">The json element containing the source array.</param>
            <param name="index">The index at which to set the item.</param>
            <param name="value">The item to add.</param>
            <returns>An immutable list with the item set.</returns>
            <exception cref="T:System.InvalidOperationException">The element was not a list.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetImmutableListFromJsonElementWith(System.Text.Json.JsonElement@,System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an immutable list from a JsonElement, adding an item at the specified point.
            </summary>
            <param name="jsonElement">The json element containing the source array.</param>
            <param name="index">The index at which to add the item.</param>
            <param name="value">The item to add.</param>
            <returns>An immutable list with the item inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The element was not a list.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.GetImmutableListFromJsonElementWith``1(System.Text.Json.JsonElement@,System.Int32,``0@)">
            <summary>
            Builds an immutable list from a JsonElement, adding a range of values at the specified point.
            </summary>
            <typeparam name="TEnumerable">The type of the values to add.</typeparam>
            <param name="jsonElement">The json element containing the source array.</param>
            <param name="index">The index at which to add the items.</param>
            <param name="values">The items to add.</param>
            <returns>An immutable list with the items inserted.</returns>
            <exception cref="T:System.InvalidOperationException">The element was not a list.</exception>
            <exception cref="T:System.IndexOutOfRangeException">The index was outside the bounds of the array.</exception>
        </member>
        <member name="F:Corvus.Json.Internal.JsonValueHelpers.NullElement">
            <summary>
            Gets a null JsonElement.
            </summary>
        </member>
        <member name="F:Corvus.Json.Internal.JsonValueHelpers.TrueElement">
            <summary>
            Gets a JsonElement representing True.
            </summary>
        </member>
        <member name="F:Corvus.Json.Internal.JsonValueHelpers.FalseElement">
            <summary>
            Gets a JsonElement representing False.
            </summary>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.NumericEquals(System.Text.Json.JsonElement@,System.Text.Json.JsonElement@)">
            <summary>
            Compare two numbers backed by JsonElements.
            </summary>
            <param name="jsonElementL">The JsonElement backing for the lhs.</param>
            <param name="jsonElementR">The JsonElement backing for the rhs.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
            <exception cref="T:System.FormatException">The numeric format is not supported.</exception>
            <exception cref="T:System.OverflowException">The numeric formats were not convertible without overflow or loss of precision.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.NumericCompare(System.Text.Json.JsonElement@,System.Text.Json.JsonElement@)">
            <summary>
            Compare two numbers backed by JsonElements.
            </summary>
            <param name="jsonElementL">The JsonElement backing for the lhs.</param>
            <param name="jsonElementR">The JsonElement backing for the rhs.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
            <exception cref="T:System.OverflowException">The numeric formats were not convertible without overflow or loss of precision.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.BoolToJsonElement(System.Boolean)">
            <summary>
            Write a bool to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The <see cref="T:System.Text.Json.JsonElement"/> serialized from the value.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.NumberToJsonElement(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Write a number to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="numberBacking">The byte array backing the number.</param>
            <returns>The <see cref="T:System.Text.Json.JsonElement"/> serialized from the value.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.ObjectToJsonElement(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Write a property dictionary to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="properties">The property dictionary to write.</param>
            <returns>The <see cref="T:System.Text.Json.JsonElement"/> serialized from the value.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.ArrayToJsonElement(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Convert an items array to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="items">The items to convert.</param>
            <returns>The <see cref="T:System.Text.Json.JsonElement"/> serialized from the value.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.StringToJsonElement(System.String)">
            <summary>
            Write a string to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The <see cref="T:System.Text.Json.JsonElement"/> serialized from the value.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.WriteItems(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny},System.Text.Json.Utf8JsonWriter)">
            <summary>
            Write an items array to a <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <param name="items">The items to write.</param>
            <param name="writer">The writer to which to write the array.</param>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueHelpers.WriteProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.Text.Json.Utf8JsonWriter)">
            <summary>
            Writes a property dictionary to a JSON writer.
            </summary>
            <param name="properties">The property dictionary to write.</param>
            <param name="writer">The writer to which to write the object.</param>
        </member>
        <member name="T:Corvus.Json.Internal.PropertyBackingBuilders">
            <summary>
            Builders for object property backing from a JSON element.
            </summary>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingBuilders.GetPropertyBackingBuilder(System.Text.Json.JsonElement@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the object.
            </summary>
            <param name="jsonElementBacking">The JSON element backing the property.</param>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingBuilders.GetPropertyBackingBuilderWithout(System.Text.Json.JsonElement@,Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the object, without a specific property.
            </summary>
            <param name="jsonElementBacking">The JSON element backing the property.</param>
            <param name="name">The name of the property to remove.</param>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingBuilders.GetPropertyBackingBuilderWithout(System.Text.Json.JsonElement@,System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the object, without a specific property.
            </summary>
            <param name="jsonElementBacking">The JSON element backing the property.</param>
            <param name="name">The name of the property to remove.</param>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingBuilders.GetPropertyBackingBuilderWithout(System.Text.Json.JsonElement@,System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the object, without a specific property.
            </summary>
            <param name="jsonElementBacking">The JSON element backing the property.</param>
            <param name="utf8Name">The name of the property to remove.</param>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingBuilders.GetPropertyBackingBuilderWithout(System.Text.Json.JsonElement@,System.String)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the object, without a specific property.
            </summary>
            <param name="jsonElementBacking">The JSON element backing the property.</param>
            <param name="name">The name of the property to remove.</param>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(System.Text.Json.JsonElement@,Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the object, replacing a specific property.
            </summary>
            <param name="jsonElementBacking">The JSON element backing the property.</param>
            <param name="name">The name of the property to replace.</param>
            <param name="value">The new value of the property.</param>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="T:Corvus.Json.Internal.PropertyBackingExtensions">
            <summary>
            Object backing list extensions.
            </summary>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.SetItem(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
            <param name="value">The value to set.</param>
            <returns>The object property backing with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Remove(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},Corvus.Json.JsonPropertyName@)">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
            <returns>The object property backing with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Remove(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.String)">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
            <returns>The object property backing with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Remove(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.ReadOnlySpan{System.Char})">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
            <returns>The object property backing with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Remove(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.ReadOnlySpan{System.Byte})">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="utf8Name">The name of the property to remove.</param>
            <returns>The object property backing with the property removed.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.SetItem(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty}.Builder,Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Sets a property on the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Add(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty}.Builder,Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Adds a property to the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Remove(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty}.Builder,Corvus.Json.JsonPropertyName@)">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Remove(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty}.Builder,System.String)">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Remove(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty}.Builder,System.ReadOnlySpan{System.Char})">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="name">The name of the property to remove.</param>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.Remove(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty}.Builder,System.ReadOnlySpan{System.Byte})">
            <summary>
            Removes a property from the object.
            </summary>
            <param name="properties">The property collection to modify.</param>
            <param name="utf8Name">The name of the property to remove.</param>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.TryGetValue(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Tries to get the value of the property with the given name.
            </summary>
            <param name="properties">The properties from which to retrieve the value.</param>
            <param name="name">The name to test.</param>
            <param name="value">The value of the property.</param>
            <returns><see langword="true"/> if the property name exists on the object.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.TryGetValue(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <summary>
            Gets a value indicating whether the property backing contains the given property.
            </summary>
            <param name="properties">The properties from which to retrieve the value.</param>
            <param name="name">The name to test.</param>
            <param name="value">The value of the property.</param>
            <returns><see langword="true"/> if the property name exists on the object.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.TryGetValue(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <summary>
            Gets a value indicating whether the property backing contains the given property.
            </summary>
            <param name="properties">The properties from which to retrieve the value.</param>
            <param name="name">The name to test.</param>
            <param name="value">The value of the property.</param>
            <returns><see langword="true"/> if the property name exists on the object.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.TryGetValue(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.String,Corvus.Json.JsonAny@)">
            <summary>
            Gets a value indicating whether the property backing contains the given property.
            </summary>
            <param name="properties">The properties from which to retrieve the value.</param>
            <param name="name">The name to test.</param>
            <param name="value">The value of the property.</param>
            <returns><see langword="true"/> if the property name exists on the object.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.ContainsKey(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},Corvus.Json.JsonPropertyName@)">
            <summary>
            Gets a value indicating whether the property backing contains the given property.
            </summary>
            <param name="properties">The properties to test.</param>
            <param name="name">The name to test.</param>
            <returns><see langword="true"/> if the property name exists on the object.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.ContainsKey(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.ReadOnlySpan{System.Char})">
            <summary>
            Gets a value indicating whether the property backing contains the given property.
            </summary>
            <param name="properties">The properties to test.</param>
            <param name="name">The name to test.</param>
            <returns><see langword="true"/> if the property name exists on the object.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.ContainsKey(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a value indicating whether the property backing contains the given property.
            </summary>
            <param name="properties">The properties to test.</param>
            <param name="name">The name to test.</param>
            <returns><see langword="true"/> if the property name exists on the object.</returns>
        </member>
        <member name="M:Corvus.Json.Internal.PropertyBackingExtensions.ContainsKey(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty},System.String)">
            <summary>
            Gets a value indicating whether the property backing contains the given property.
            </summary>
            <param name="properties">The properties to test.</param>
            <param name="name">The name to test.</param>
            <returns><see langword="true"/> if the property name exists on the object.</returns>
        </member>
        <member name="T:Corvus.Json.Internal.PropertyValidator`1">
            <summary>
            A delegate for property validators.
            </summary>
            <typeparam name="T">The type of the entity containing the property to validate.</typeparam>
            <param name="that">An instnace of the entity containing the property to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="T:Corvus.Json.Internal.ObjectPropertyValidator">
            <summary>
            A delegate for property validators.
            </summary>
            <param name="that">An instnace of the entity containing the property to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="T:Corvus.Json.Internal.StringBuilderPool">
            <summary>
            A <see cref="T:System.Text.StringBuilder"/> provider.
            </summary>
        </member>
        <member name="F:Corvus.Json.Internal.StringBuilderPool.Shared">
            <summary>
            Gets a shared <see cref="T:System.Text.StringBuilder"/> pool.
            </summary>
        </member>
        <member name="T:Corvus.Json.Internal.JsonValueConverter">
            <summary>
            Configuration for the custom <see cref="T:Corvus.Json.Internal.JsonValueConverter`1"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.Internal.JsonValueConverter.EnableInefficientDeserializationSupport">
            <summary>
            Gets or sets a value indicating whether serialization is enabled for <see cref="T:Corvus.Json.IJsonValue`1"/> instances.
            </summary>
        </member>
        <member name="T:Corvus.Json.Internal.JsonValueConverter`1">
            <summary>
            Generic json converter for <see cref="T:Corvus.Json.IJsonValue`1"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue`1"/> to convert.</typeparam>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.Internal.JsonValueConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.PeriodBuilder">
            <summary>
            A mutable builder class for <see cref="T:Corvus.Json.Period"/> values. Each property can
            be set independently, and then a Period can be created from the result
            using the <see cref="M:Corvus.Json.PeriodBuilder.BuildPeriod"/> method.
            </summary>
            <threadsafety>
            This type is not thread-safe without extra synchronization, but has no
            thread affinity.
            </threadsafety>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Years">
            <summary>
            Gets or sets the number of years within the period.
            </summary>
            <value>The number of years within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Months">
            <summary>
            Gets or sets the number of months within the period.
            </summary>
            <value>The number of months within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Weeks">
            <summary>
            Gets or sets the number of weeks within the period.
            </summary>
            <value>The number of weeks within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Days">
            <summary>
            Gets or sets the number of days within the period.
            </summary>
            <value>The number of days within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Hours">
            <summary>
            Gets or sets the number of hours within the period.
            </summary>
            <value>The number of hours within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Minutes">
            <summary>
            Gets or sets the number of minutes within the period.
            </summary>
            <value>The number of minutes within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Seconds">
            <summary>
            Gets or sets the number of seconds within the period.
            </summary>
            <value>The number of seconds within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Milliseconds">
            <summary>
            Gets or sets the number of milliseconds within the period.
            </summary>
            <value>The number of milliseconds within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Ticks">
            <summary>
            Gets or sets the number of ticks within the period.
            </summary>
            <value>The number of ticks within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Nanoseconds">
            <summary>
            Gets or sets the number of nanoseconds within the period.
            </summary>
            <value>The number of nanoseconds within the period.</value>
        </member>
        <member name="P:Corvus.Json.PeriodBuilder.Item(NodaTime.PeriodUnits)">
            <summary>
            Gets or sets the value of a single unit.
            </summary>
            <remarks>
            <para>
            The type of this indexer is <see cref="T:System.Int64"/> for uniformity, but any date unit (year, month, week, day) will only ever have a value
            in the range of <see cref="T:System.Int32"/>.
            </para>
            <para>
            For the <see cref="F:NodaTime.PeriodUnits.Nanoseconds"/> unit, the value is converted to <c>Int64</c> when reading from the indexer, causing it to
            fail if the value is out of range (around 250 years). To access the values of very large numbers of nanoseconds, use the <see cref="P:Corvus.Json.PeriodBuilder.Nanoseconds"/>
            property directly.
            </para>
            </remarks>
            <param name="unit">A single value within the <see cref="T:NodaTime.PeriodUnits"/> enumeration.</param>
            <value>The value of the given unit within this period builder, or zero if the unit is unset.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="unit"/> is not a single unit, or a value is provided for a date unit which is outside the range of <see cref="T:System.Int32"/>.</exception>
        </member>
        <member name="M:Corvus.Json.PeriodBuilder.BuildPeriod">
            <summary>
            Builds a period from the properties in this builder.
            </summary>
            <returns>The total number of nanoseconds in the period.</returns>
        </member>
        <member name="M:Corvus.Json.JsonHelpers.IsInRangeInclusive(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="T:Corvus.Json.LowAllocJsonUtils">
            <summary>
            Utilities for low allocation access to JSON values.
            </summary>
            <remarks>
            These adapters give access to the underlying UTF8 bytes of JSON string
            values, unless/until https://github.com/dotnet/runtime/issues/74028 lands.
            </remarks>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ProcessRawText``2(System.Text.Json.JsonElement,``0@,Corvus.Json.Utf8Parser{``0,``1}@,``1@)">
            <summary>
            Process raw JSON text.
            </summary>
            <typeparam name="TState">The type of the state for the processor.</typeparam>
            <typeparam name="TResult">The type of the result of processing.</typeparam>
            <param name="element">The json element to process.</param>
            <param name="state">The state passed to the processor.</param>
            <param name="callback">The processing callback.</param>
            <param name="result">The result of processing.</param>
            <returns><c>True</c> if the processing succeeded, otherwise false.</returns>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ProcessRawValue``2(System.Text.Json.JsonElement,``0@,Corvus.Json.Utf8Parser{``0,``1}@,``1@)">
            <summary>
            Process raw JSON value.
            </summary>
            <typeparam name="TState">The type of the state for the processor.</typeparam>
            <typeparam name="TResult">The type of the result of processing.</typeparam>
            <param name="element">The json element to process.</param>
            <param name="state">The state passed to the processor.</param>
            <param name="callback">The processing callback.</param>
            <param name="result">The result of processing.</param>
            <returns><c>True</c> if the processing succeeded, otherwise false.</returns>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ConcatenateAsUtf8JsonString``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, as a UTF8 JSON string (including quotes).
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ConcatenateAsUtf8JsonString``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, as a UTF8 JSON string (including quotes).
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ConcatenateAsUtf8JsonString``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, as a UTF8 JSON string (including quotes).
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ConcatenateAsUtf8JsonString``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, as a UTF8 JSON string (including quotes).
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ConcatenateAsUtf8JsonString``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, as a UTF8 JSON string (including quotes).
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ConcatenateAsUtf8JsonString``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, as a UTF8 JSON string (including quotes).
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="M:Corvus.Json.LowAllocJsonUtils.ConcatenateAsUtf8JsonString``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, as a UTF8 JSON string (including quotes).
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>A count of the characters written.</returns>
        </member>
        <member name="T:Corvus.Json.JsonArray">
            <summary>
            Represents a Json array.
            </summary>
            <summary>
            Represents a Json array.
            </summary>
            <summary>
            Represents a JSON array.
            </summary>
            <summary>
            Represents a Json array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonArray.Add(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.Add(Corvus.Json.JsonAny[])">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.AddRange``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.AddRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.Insert(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.InsertRange``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.InsertRange``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.Replace(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.SetItem(System.Int32,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="F:Corvus.Json.JsonArray.EmptyArray">
            <summary>
            Gets an empty array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonArray.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonArray"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonArray.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.op_Implicit(Corvus.Json.JsonArray)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonArray.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonArray">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonArray.From(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Construct an instance of the array from a list of json values.
            </summary>
            <param name="items">The list of items from which to construct the array.</param>
            <returns>An instance of the array constructed from the list.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.Create(System.ReadOnlySpan{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the span of items.
            </summary>
            <param name="items">The items from which to create the array.</param>
            <returns>The array containing the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromItems(Corvus.Json.JsonAny[])">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given array.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromItems(Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value1">The first value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given array.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value1">The first value from which to construct the instance.</param>
            <param name="value2">The second value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given array.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromItems(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value1">The first value from which to construct the instance.</param>
            <param name="value2">The second value from which to construct the instance.</param>
            <param name="value3">The third value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given array.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name="T">The type of the <paramref name="items"/> from which to create the array.</typeparam>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromRange(System.Collections.Generic.IEnumerable{Corvus.Json.JsonAny})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create an array from the given items.
            </summary>
            <param name="items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetArrayLength">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.EnumerateArray">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.EnumerateArray``1">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.AsImmutableList">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.AsImmutableListBuilder">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetImmutableList">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the array.
            </summary>
            <returns>An immutable list of <see cref="T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetImmutableListBuilder">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder"/> from the array.
            </summary>
            <returns>An immutable list builder of <see cref="T:Corvus.Json.JsonAny"/>, built from the existing array.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetImmutableListSetting(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the array, replacing the item at the specified index with the given item.
            </summary>
            <param name="index">The index at which to add the element.</param>
            <param name="value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetImmutableListReplacing(Corvus.Json.JsonAny@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
            </summary>
            <param name="oldItem">The item to remove.</param>
            <param name="newItem">The item to insert.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetImmutableListWithout(Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the first item that equals the given value.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>An immutable list containing the contents of the list, without the first instance that matches the given item.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetImmutableListWithoutRange(System.Int32,System.Int32)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the array, removing the given range.
            </summary>
            <param name="index">The start index of the range to remove.</param>
            <param name="count">The length of the range to remove.</param>
            <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetImmutableListWith(System.Int32,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name="index">The index at which to add the element.</param>
            <param name="value">The value to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetImmutableListWith``1(System.Int32,``0)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the array, adding the given item.
            </summary>
            <param name="index">The index at which to add the element.</param>
            <param name="values">The values to add.</param>
            <returns>An immutable list containing the contents of the list, without the array.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonArray"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonArray.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonArray"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonArray.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonArray.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonArray.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonArray.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArray.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.op_Equality(Corvus.Json.JsonArray@,Corvus.Json.JsonArray@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.op_Inequality(Corvus.Json.JsonArray@,Corvus.Json.JsonArray@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.Corvus#Json#IJsonValue{Corvus#Json#JsonArray}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonArray.Corvus#Json#IJsonValue{Corvus#Json#JsonArray}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonArray.Corvus#Json#IJsonValue{Corvus#Json#JsonArray}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonArray.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonArray.Corvus#Json#IJsonValue{Corvus#Json#JsonArray}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonArray.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonArray.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonArray.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonArray.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonArray.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonArray.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonArray"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.Equals(Corvus.Json.JsonArray@)">
            <summary>
            Equals comparison.
            </summary>
            <param name="other">The value with which to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArray.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.Remove(Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArray.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonArrayBuilder`1">
            <summary>
            Build JSON arrays.
            </summary>
            <typeparam name="T">The type of the array to build.</typeparam>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromItems``1(``0@)">
            <summary>
            Creates an array from the given values.
            </summary>
            <typeparam name="TValue">The type of the item.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <returns>A T instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromItems``2(``0@,``1@)">
            <summary>
            Creates an array from the given values.
            </summary>
            <typeparam name="TValue1">The type of the first item.</typeparam>
            <typeparam name="TValue2">The type of the second item.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <returns>A T instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromItems``3(``0@,``1@,``2@)">
            <summary>
            Creates an array from the given values.
            </summary>
            <typeparam name="TValue1">The type of the first item.</typeparam>
            <typeparam name="TValue2">The type of the second item.</typeparam>
            <typeparam name="TValue3">The type of the third item.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The third value from which to construct the instance.</param>
            <returns>A T instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromItems``4(``0@,``1@,``2@,``3@)">
            <summary>
            Creates an array from the given values.
            </summary>
            <typeparam name="TValue1">The type of the first item.</typeparam>
            <typeparam name="TValue2">The type of the second item.</typeparam>
            <typeparam name="TValue3">The type of the third item.</typeparam>
            <typeparam name="TValue4">The type of the fourth item.</typeparam>
            <param name = "value1">The first value from which to construct the instance.</param>
            <param name = "value2">The second value from which to construct the instance.</param>
            <param name = "value3">The third value from which to construct the instance.</param>
            <param name = "value4">The fourth value from which to construct the instance.</param>
            <returns>A T instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromItems``1(``0[])">
            <summary>
            Creates an array from the given values.
            </summary>
            <typeparam name="TValue">The type of the item.</typeparam>
            <param name = "value">The value from which to construct the instance.</param>
            <returns>A JsonAny instantiated from the given items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromSerializableRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array from the given items.
            </summary>
            <typeparam name = "TItem">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
            <param name = "items">The items from which to create the array.</param>
            <returns>The new array created from the items.</returns>
            <remarks>
            This will serialize the items to create the underlying JsonArray. Note the
            other overloads which avoid this serialization step.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an array from an enumerable of string.
            </summary>
            <param name="value">The set of values to add.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Creates an array from an enumerable of doubles.
            </summary>
            <param name="value">The set of values to add.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Creates an array from an enumerable of long.
            </summary>
            <param name="value">The set of values to add.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayBuilder`1.FromRange(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Creates an array from an enumerable of bool.
            </summary>
            <param name="value">The set of values to add.</param>
            <returns>The new array created from the items.</returns>
        </member>
        <member name="T:Corvus.Json.JsonArrayEnumerator">
            <summary>
            An enumerator for a JSON array.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.#ctor(System.Text.Json.JsonElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonArrayEnumerator"/> struct.
            </summary>
            <param name="jsonElement">The Json Element to enumerate.</param>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonArrayEnumerator"/> struct.
            </summary>
            <param name="list">The property list to enumerate.</param>
        </member>
        <member name="P:Corvus.Json.JsonArrayEnumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArrayEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.CurrentAs``1">
            <summary>
            Gets the current value as the given type.
            </summary>
            <typeparam name="T">The type to get.</typeparam>
            <returns>The current value as an instance of the given type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.GetEnumerator">
            <summary>
            Gets a new enumerator instance.
            </summary>
            <returns>A new enumerator instance.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.System#Collections#Generic#IEnumerable{Corvus#Json#JsonAny}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonArrayEnumerator`1">
            <summary>
            An enumerator for a JSON array.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator`1.#ctor(System.Text.Json.JsonElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonArrayEnumerator`1"/> struct.
            </summary>
            <param name="jsonElement">The Json Element to enumerate.</param>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator`1.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonArrayEnumerator`1"/> struct.
            </summary>
            <param name="list">The property list to enumerate.</param>
        </member>
        <member name="P:Corvus.Json.JsonArrayEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonArrayEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator`1.GetEnumerator">
            <summary>
            Gets a new enumerator instance.
            </summary>
            <returns>A new enumerator instance.</returns>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonArrayEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonBoolean">
            <summary>
            Represents a Json boolean.
            </summary>
            <summary>
            Represents a JSON boolean.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonAny"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.op_Implicit(Corvus.Json.JsonBoolean)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonBoolean">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.op_Implicit(System.Boolean)~Corvus.Json.JsonBoolean">
            <summary>
            Conversion from bool.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.op_Implicit(Corvus.Json.JsonBoolean)~System.Boolean">
            <summary>
            Conversion to bool.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to retrieve the value as a boolean.
            </summary>
            <param name="result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.GetBoolean">
            <summary>
            Get the value as a boolean.
            </summary>
            <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBoolean"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonBoolean"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonBoolean.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.op_Equality(Corvus.Json.JsonBoolean@,Corvus.Json.JsonBoolean@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.op_Inequality(Corvus.Json.JsonBoolean@,Corvus.Json.JsonBoolean@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Corvus#Json#IJsonValue{Corvus#Json#JsonBoolean}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Corvus#Json#IJsonValue{Corvus#Json#JsonBoolean}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Corvus#Json#IJsonValue{Corvus#Json#JsonBoolean}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Corvus#Json#IJsonValue{Corvus#Json#JsonBoolean}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBoolean.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBoolean"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBoolean.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBoolean"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBoolean.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBoolean"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBoolean.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBoolean"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonBoolean.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonBoolean"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Equals(Corvus.Json.JsonBoolean@)">
            <summary>
            Equals comparison.
            </summary>
            <param name="other">The value with which to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonBoolean.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonElementExtensions">
            <summary>
            Extensions to JsonElement to provide raw string processing.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonElementExtensions.TryGetValue``2(System.Text.Json.JsonElement,Corvus.Json.Utf8Parser{``0,``1}@,``0@,``1@)">
            <summary>
              Attempts to represent the current JSON string as the given type.
            </summary>
            <typeparam name="TState">The type of the parser state.</typeparam>
            <typeparam name="TResult">The type with which to represent the JSON string.</typeparam>
            <param name="element">The JSON element to extend.</param>
            <param name="parser">A delegate to the method that parses the JSON string.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:Corvus.Json.JsonElementExtensions.TryGetValue``2(System.Text.Json.JsonElement,Corvus.Json.Utf8Parser{``0,``1}@,``0@,System.Boolean,``1@)">
            <summary>
              Attempts to represent the current JSON string as the given type.
            </summary>
            <typeparam name="TState">The type of the parser state.</typeparam>
            <typeparam name="TResult">The type with which to represent the JSON string.</typeparam>
            <param name="element">The JSON element to extend.</param>
            <param name="parser">A delegate to the method that parses the JSON string.</param>
            <param name="state">The state for the parser.</param>
            <param name="decode">Indicates whether the UTF8 JSON string should be decoded.</param>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:Corvus.Json.JsonElementExtensions.TryGetValue``2(System.Text.Json.JsonElement,Corvus.Json.Parser{``0,``1}@,``0@,``1@)">
            <summary>
              Attempts to represent the current JSON string as the given type.
            </summary>
            <typeparam name="TState">The type of the parser state.</typeparam>
            <typeparam name="TResult">The type with which to represent the JSON string.</typeparam>
            <param name="element">The JSON element to extend.</param>
            <param name="parser">A delegate to the method that parses the JSON string.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="T:Corvus.Json.JsonElementExtensions.Utf8ParserStateWrapper`2">
            <summary>
            Wraps up the state for the UTF8 parser and the parser's native state into a compound state entity.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonElementExtensions.Utf8ParserStateWrapper`2.#ctor(Corvus.Json.Utf8Parser{`0,`1},`0@,System.Boolean)">
            <summary>
            Wraps up the state for the UTF8 parser and the parser's native state into a compound state entity.
            </summary>
        </member>
        <member name="T:Corvus.Json.JsonElementExtensions.ParserStateWrapper`2">
            <summary>
            Wraps up the state for the parser and the parser's native state into a compound state entity.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonElementExtensions.ParserStateWrapper`2.#ctor(Corvus.Json.Parser{`0,`1},`0@)">
            <summary>
            Wraps up the state for the parser and the parser's native state into a compound state entity.
            </summary>
        </member>
        <member name="T:Corvus.Json.JsonNull">
            <summary>
            Represents a JSON iri.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonNull.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNull"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonNull.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNull"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonNull.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNull.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNull.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNull.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNull.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNull.op_Implicit(Corvus.Json.JsonNull@)~Corvus.Json.JsonAny">
            <summary>
            JsonAny conversion.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNull.op_Implicit(Corvus.Json.JsonAny@)~Corvus.Json.JsonNull">
            <summary>
            JsonAny conversion.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNull.op_Equality(Corvus.Json.JsonNull@,Corvus.Json.JsonNull@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.op_Inequality(Corvus.Json.JsonNull@,Corvus.Json.JsonNull@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonNull.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNull.FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNull.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNull.FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNull.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNull.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNull.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNull"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNull.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNull"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNull.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNull"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNull.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNull"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNull.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNull"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNull.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNull.Equals(Corvus.Json.JsonNull@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNull.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNull.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNull.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNull.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonNumber">
            <summary>
            Represents a Json number.
            </summary>
            <summary>
            Represents a JSON number.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Int128)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.UInt128)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to initialize the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Byte">
            <summary>
            Conversion to byte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Decimal">
            <summary>
            Conversion to decimal.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a decimal.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Double">
            <summary>
            Conversion to double.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a double.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Int16">
            <summary>
            Conversion to Int16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Int32">
            <summary>
            Conversion to Int32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Int64">
            <summary>
            Conversion to Int64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Int128">
            <summary>
            Conversion to Int128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an Int128.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.SByte">
            <summary>
            Conversion to SByte.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an SByte.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Half">
            <summary>
            Conversion to Half.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.Single">
            <summary>
            Conversion to Single.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as a Single.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.UInt16">
            <summary>
            Conversion to UInt16.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt16.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.UInt32">
            <summary>
            Conversion to UInt32.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt32.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.UInt64">
            <summary>
            Conversion to UInt64.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt64.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Explicit(Corvus.Json.JsonNumber)~System.UInt128">
            <summary>
            Conversion to UInt128.
            </summary>
            <param name="value">The value to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a number.</exception>
            <exception cref="T:System.FormatException">The value was not formatted as an UInt128.</exception>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(Corvus.Json.JsonNumber)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.Byte)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from byte.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.Decimal)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from decimal.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.Double)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from double.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.Half)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from Half.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.Int16)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from short.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.Int32)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from int.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.Int64)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from long.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.SByte)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from sbyte.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.Single)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from float.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.UInt16)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from ushort.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.UInt32)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from uint.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Implicit(System.UInt64)~Corvus.Json.JsonNumber">
            <summary>
            Conversion from ulong.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Addition(Corvus.Json.JsonNumber,Corvus.Json.JsonNumber)">
            <summary>
            Adds two values together to compute their sum.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Subtraction(Corvus.Json.JsonNumber,Corvus.Json.JsonNumber)">
            <summary>
            Subtracts two values together to compute their difference.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Multiply(Corvus.Json.JsonNumber,Corvus.Json.JsonNumber)">
            <summary>
            Multiplies two values together.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Division(Corvus.Json.JsonNumber,Corvus.Json.JsonNumber)">
            <summary>
            Divides two values.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Increment(Corvus.Json.JsonNumber)">
            <summary>
            Increments the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Decrement(Corvus.Json.JsonNumber)">
            <summary>
            Decrements the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="numberBacking">The binary number backing the number.</param>
        </member>
        <member name="M:Corvus.Json.JsonNumber.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonNumber"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonNumber.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNumber.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNumber.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonNumber.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.ValueKind">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonNumber.AsBinaryJsonNumber">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Equality(Corvus.Json.JsonNumber@,Corvus.Json.JsonNumber@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_Inequality(Corvus.Json.JsonNumber@,Corvus.Json.JsonNumber@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_LessThan(Corvus.Json.JsonNumber@,Corvus.Json.JsonNumber@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_GreaterThan(Corvus.Json.JsonNumber@,Corvus.Json.JsonNumber@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_LessThanOrEqual(Corvus.Json.JsonNumber@,Corvus.Json.JsonNumber@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.op_GreaterThanOrEqual(Corvus.Json.JsonNumber@,Corvus.Json.JsonNumber@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Compare(Corvus.Json.JsonNumber@,Corvus.Json.JsonNumber@)">
            <summary>
            Compare with another number.
            </summary>
            <param name="lhs">The lhs of the comparison.</param>
            <param name="rhs">The rhs of the comparison.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonNumber.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Corvus#Json#IJsonValue{Corvus#Json#JsonNumber}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Corvus#Json#IJsonValue{Corvus#Json#JsonNumber}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNumber.FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Corvus#Json#IJsonValue{Corvus#Json#JsonNumber}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Corvus#Json#IJsonValue{Corvus#Json#JsonNumber}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNumber.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNumber"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNumber.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNumber"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNumber.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNumber"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNumber.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNumber"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonNumber.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonNumber"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.CompareTo``1(``0@)">
            <summary>
            Compare this number with another.
            </summary>
            <typeparam name="TOther">The type of the other Json Number.</typeparam>
            <param name="rhs">The json number with which to compare.</param>
            <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Equals(Corvus.Json.JsonNumber@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.GetMaxCharLength">
            <summary>
            Gets the maximum char length for a number of this size.
            </summary>
            <returns>The maximum possible length of the buffer required if the number is written to a <see cref="T:System.Span`1"/> - either bytes or chars.</returns>
        </member>
        <member name="M:Corvus.Json.JsonNumber.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonNumber.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonObject">
            <summary>
            Represents a JSON object value.
            </summary>
            <summary>
            Represents a JSON object.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonObject.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObject"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonObject.Item(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.op_Implicit(Corvus.Json.JsonObject)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonObject.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonObject">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonObject.FromProperties(System.Collections.Generic.IDictionary{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.FromProperties(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.FromProperties(System.ValueTuple{Corvus.Json.JsonPropertyName,Corvus.Json.JsonAny}[])">
            <summary>
            Creates an instance of the type from the given dictionary of properties.
            </summary>
            <param name="source">The dictionary of properties.</param>
            <returns>An instance of the type initialized from the dictionary of properties.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.AsPropertyBacking">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.EnumerateObject">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.HasProperties">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.HasProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.HasProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.HasProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.HasProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.TryGetProperty(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.TryGetProperty(System.String,Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.TryGetProperty(System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.TryGetProperty(System.ReadOnlySpan{System.Byte},Corvus.Json.JsonAny@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.TryGetProperty``1(Corvus.Json.JsonPropertyName@,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.TryGetProperty``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.TryGetProperty``1(System.ReadOnlySpan{System.Char},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.TryGetProperty``1(System.ReadOnlySpan{System.Byte},``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.SetProperty``1(Corvus.Json.JsonPropertyName@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.RemoveProperty(Corvus.Json.JsonPropertyName@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.RemoveProperty(System.ReadOnlySpan{System.Char})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.RemoveProperty(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.GetPropertyBacking">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the object.
            </summary>
            <returns>An immutable list of <see cref="T:Corvus.Json.JsonAny"/> built from the array.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an array.</exception>
        </member>
        <member name="M:Corvus.Json.JsonObject.GetPropertyBackingWithout(Corvus.Json.JsonPropertyName@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonObject.GetPropertyBackingWithout(System.ReadOnlySpan{System.Char})">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonObject.GetPropertyBackingWithout(System.ReadOnlySpan{System.Byte})">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonObject.GetPropertyBackingWithout(System.String)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonObject.GetPropertyBackingWith(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Builds an <see cref="T:System.Collections.Immutable.ImmutableList`1"/> from the object, without a specific property.
            </summary>
            <returns>An immutable dictionary builder of <see cref="T:Corvus.Json.JsonPropertyName"/> to <see cref="T:Corvus.Json.JsonAny"/>, built from the existing object, without the given property.</returns>
            <exception cref="T:System.InvalidOperationException">The value is not an object.</exception>
        </member>
        <member name="M:Corvus.Json.JsonObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObject"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonObject.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObject"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonObject.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonObject.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonObject.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonObject.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.Corvus#Json#IJsonValue#AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObject.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.op_Equality(Corvus.Json.JsonObject@,Corvus.Json.JsonObject@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.op_Inequality(Corvus.Json.JsonObject@,Corvus.Json.JsonObject@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonObject.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.Corvus#Json#IJsonValue{Corvus#Json#JsonObject}#FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonObject.Corvus#Json#IJsonValue{Corvus#Json#JsonObject}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonObject.Corvus#Json#IJsonValue{Corvus#Json#JsonObject}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonObject.Corvus#Json#IJsonValue{Corvus#Json#JsonObject}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonObject.FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonObject.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonObject.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonObject"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonObject.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonObject"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonObject.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonObject"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonObject.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonObject"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonObject.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonObject"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.Equals(Corvus.Json.JsonObject@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObject.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObject.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonObjectEnumerator">
            <summary>
            An enumerator for a JSON object.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator.#ctor(System.Text.Json.JsonElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObjectEnumerator"/> struct.
            </summary>
            <param name="jsonElement">The Json Element to enumerate.</param>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObjectEnumerator"/> struct.
            </summary>
            <param name="dictionary">The property dictionary to enumerate.</param>
        </member>
        <member name="P:Corvus.Json.JsonObjectEnumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObjectEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator.GetEnumerator">
            <summary>
            Gets a new enumerator instance.
            </summary>
            <returns>A new enumerator instance.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator.System#Collections#Generic#IEnumerable{Corvus#Json#JsonObjectProperty}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonObjectEnumerator`1">
            <summary>
            An enumerator for a JSON object.
            </summary>
            <typeparam name="T">The type of the properties in the object.</typeparam>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator`1.#ctor(System.Text.Json.JsonElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObjectEnumerator`1"/> struct.
            </summary>
            <param name="jsonElement">The Json Element to enumerate.</param>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator`1.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObjectEnumerator`1"/> struct.
            </summary>
            <param name="dictionary">The property dictionary to enumerate.</param>
        </member>
        <member name="P:Corvus.Json.JsonObjectEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonObjectEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator`1.GetEnumerator">
            <summary>
            Gets a new enumerator instance.
            </summary>
            <returns>A new enumerator instance.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator`1.System#Collections#Generic#IEnumerable{Corvus#Json#JsonObjectProperty{T}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonObjectProperty">
            <summary>
            A property on a <see cref="T:Corvus.Json.IJsonObject`1"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.#ctor(System.Text.Json.JsonProperty@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObjectProperty"/> struct.
            </summary>
            <param name="jsonProperty">The JSON property over which to construct this instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.#ctor(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonAny@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObjectProperty"/> struct.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="P:Corvus.Json.JsonObjectProperty.ValueKind">
            <summary>
            Gets the value kind of the property value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonObjectProperty.Value">
            <summary>
            Gets the value of the property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonObjectProperty.Name">
            <summary>
            Gets the name of the property as a string.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value does not have a name.</exception>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.op_Equality(Corvus.Json.JsonObjectProperty@,Corvus.Json.JsonObjectProperty@)">
            <summary>
            Standard equality operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns>True if they are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.op_Inequality(Corvus.Json.JsonObjectProperty@,Corvus.Json.JsonObjectProperty@)">
            <summary>
            Standard inequality operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns>True if they are not equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.ValueAs``1">
            <summary>
            Gets the value as an instance of the given type.
            </summary>
            <typeparam name="T">The type for which to get the value.</typeparam>
            <returns>An instance of the value as the given type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.TryGetName``2(Corvus.Json.Utf8Parser{``0,``1}@,``0@,``1@)">
            <summary>
              Attempts to represent the current JSON string as the given type.
            </summary>
            <typeparam name="TState">The type of the parser state.</typeparam>
            <typeparam name="TResult">The type with which to represent the JSON string.</typeparam>
            <param name="parser">A delegate to the method that parses the JSON string.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.TryGetName``2(Corvus.Json.Parser{``0,``1}@,``0@,``1@)">
            <summary>
              Attempts to represent the current JSON string as the given type.
            </summary>
            <typeparam name="TState">The type of the parser state.</typeparam>
            <typeparam name="TResult">The type with which to represent the JSON string.</typeparam>
            <param name="parser">A delegate to the method that parses the JSON string.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compares the specified UTF-8 encoded text to the name of this property.
            </summary>
            <param name="utf8Name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.NameEquals(System.ReadOnlySpan{System.Char})">
            <summary>
            Compares the specified text to the name of this property.
            </summary>
            <param name="name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.NameEquals(Corvus.Json.JsonPropertyName@)">
            <summary>
            Compares the specified text to the name of this property.
            </summary>
            <param name="name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.NameEquals(Corvus.Json.JsonString@)">
            <summary>
            Compares the specified text to the name of this property.
            </summary>
            <param name="name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.NameEquals(System.String)">
            <summary>
            Compares the specified text to the name of this property.
            </summary>
            <param name="name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.Equals(Corvus.Json.JsonObjectProperty@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the two objects are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Writes the property to a JSON object writer.
            </summary>
            <param name="writer">The writer to which to write the property.</param>
        </member>
        <member name="T:Corvus.Json.JsonObjectProperty`1">
            <summary>
            A property on a <see cref="T:Corvus.Json.IJsonObject`1"/>.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.#ctor(System.Text.Json.JsonProperty@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObjectProperty"/> struct.
            </summary>
            <param name="jsonProperty">The JSON property over which to construct this instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.#ctor(Corvus.Json.JsonPropertyName@,`0@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonObjectProperty"/> struct.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="P:Corvus.Json.JsonObjectProperty`1.ValueKind">
            <summary>
            Gets the value kind of the property value.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonObjectProperty`1.Value">
            <summary>
            Gets the value of the property.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonObjectProperty`1.Name">
            <summary>
            Gets the name of the property as a string.
            </summary>
            <exception cref="T:System.InvalidOperationException">The value does not have a name.</exception>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.op_Implicit(Corvus.Json.JsonObjectProperty{`0})~Corvus.Json.JsonObjectProperty">
            <summary>
            Convert to a <see cref="T:Corvus.Json.JsonObjectProperty"/>.
            </summary>
            <param name="jsonObjectProperty">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.op_Explicit(Corvus.Json.JsonObjectProperty)~Corvus.Json.JsonObjectProperty{`0}">
            <summary>
            Convert from a <see cref="T:Corvus.Json.JsonObjectProperty"/>.
            </summary>
            <param name="jsonObjectProperty">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.op_Equality(Corvus.Json.JsonObjectProperty{`0}@,Corvus.Json.JsonObjectProperty{`0}@)">
            <summary>
            Standard equality operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns>True if they are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.op_Inequality(Corvus.Json.JsonObjectProperty{`0}@,Corvus.Json.JsonObjectProperty{`0}@)">
            <summary>
            Standard inequality operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns>True if they are not equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.op_Equality(Corvus.Json.JsonObjectProperty{`0}@,Corvus.Json.JsonObjectProperty@)">
            <summary>
            Standard equality operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns>True if they are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.op_Inequality(Corvus.Json.JsonObjectProperty{`0}@,Corvus.Json.JsonObjectProperty@)">
            <summary>
            Standard inequality operator.
            </summary>
            <param name="left">The LHS of the comparison.</param>
            <param name="right">The RHS of the comparison.</param>
            <returns>True if they are not equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.TryGetName``2(Corvus.Json.Utf8Parser{``0,``1}@,``0@,``1@)">
            <summary>
              Attempts to represent the current JSON string as the given type.
            </summary>
            <typeparam name="TState">The type of the parser state.</typeparam>
            <typeparam name="TResult">The type with which to represent the JSON string.</typeparam>
            <param name="parser">A delegate to the method that parses the JSON string.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.TryGetName``2(Corvus.Json.Parser{``0,``1}@,``0@,``1@)">
            <summary>
              Attempts to represent the current JSON string as the given type.
            </summary>
            <typeparam name="TState">The type of the parser state.</typeparam>
            <typeparam name="TResult">The type with which to represent the JSON string.</typeparam>
            <param name="parser">A delegate to the method that parses the JSON string.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.NameEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compares the specified UTF-8 encoded text to the name of this property.
            </summary>
            <param name="utf8Name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.NameEquals(System.ReadOnlySpan{System.Char})">
            <summary>
            Compares the specified text to the name of this property.
            </summary>
            <param name="name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.NameEquals(Corvus.Json.JsonPropertyName@)">
            <summary>
            Compares the specified text to the name of this property.
            </summary>
            <param name="name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.NameEquals(Corvus.Json.JsonString@)">
            <summary>
            Compares the specified text to the name of this property.
            </summary>
            <param name="name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.NameEquals(System.String)">
            <summary>
            Compares the specified text to the name of this property.
            </summary>
            <param name="name">The name to match.</param>
            <returns><c>True</c> if the name matches.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.Equals(Corvus.Json.JsonObjectProperty{`0}@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the two objects are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.Equals(Corvus.Json.JsonObjectProperty@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the two objects are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonObjectProperty`1.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Writes the property to a JSON object writer.
            </summary>
            <param name="writer">The writer to which to write the property.</param>
        </member>
        <member name="T:Corvus.Json.JsonPointerExtensions">
            <summary>
            Utility function to resolve the JsonElement referenced by a json pointer into a json element.
            </summary>
            <remarks>
            Note that we don't support <c>$anchor</c> or <c>$id</c> with this implementation.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonPointerExtensions.ResolvePointer``1(``0,Corvus.Json.JsonPointer@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to which to apply the pointer.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="pointer">The pointer to resolve.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerExtensions.TryResolvePointer``1(``0,Corvus.Json.JsonPointer@,Corvus.Json.JsonAny@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to which to apply the pointer.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="pointer">The pointer to resolve.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerExtensions.ResolvePointer``1(``0,Corvus.Json.JsonRelativePointer@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to which to apply the pointer.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="pointer">The pointer to resolve.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerExtensions.TryResolvePointer``1(``0,Corvus.Json.JsonRelativePointer@,Corvus.Json.JsonAny@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to which to apply the pointer.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="pointer">The pointer to resolve.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerExtensions.ResolvePointer``1(``0,System.ReadOnlySpan{System.Char})">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to which to apply the pointer.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerExtensions.TryResolvePointer``1(``0,System.ReadOnlySpan{System.Char},Corvus.Json.JsonAny@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to which to apply the pointer.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerExtensions.DecodePointer(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
            <summary>
            Decodes the ~ encoding in a reference.
            </summary>
            <param name="encodedFragment">The encoded reference.</param>
            <param name="fragment">The span into which to write the result.</param>
            <returns>The length of the decoded reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerExtensions.ResolvePointerInternal``1(``0,System.ReadOnlySpan{System.Char},System.Boolean,Corvus.Json.JsonAny@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="throwOnFailure">If true, we throw on failure.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="T:Corvus.Json.JsonPointerUtilities">
            <summary>
            Utility function to resolve the JsonElement referenced by a json pointer into a json element.
            </summary>
            <remarks>
            Note that we don't support <c>$anchor</c> or <c>$id</c> with this implementation.
            </remarks>
        </member>
        <member name="F:Corvus.Json.JsonPointerUtilities.EmptyPointer">
            <summary>
            Gets an empty pointer.
            </summary>
        </member>
        <member name="T:Corvus.Json.JsonPointerUtilities.SegmentHandler`1">
            <summary>
            A callback for a segment handler in pointer resolution.
            </summary>
            <typeparam name="TState">The type of the state for the segment handler.</typeparam>
            <param name="isLastSegment"><see langword="true"/> if this is the last segment, otherwise <see langword="false"/>.</param>
            <param name="segment">The current segment.</param>
            <param name="element">The element for the current segment.</param>
            <param name="state">The state for the segment handler.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.ResolvePointer(System.Text.Json.JsonDocument,System.ReadOnlySpan{System.Char})">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root document from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.ResolvePointer(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char})">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer(System.Text.Json.JsonDocument,System.ReadOnlySpan{System.Char},System.Nullable{System.Text.Json.JsonElement}@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root document from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char},System.Nullable{System.Text.Json.JsonElement}@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer``1(System.Text.Json.JsonDocument,System.ReadOnlySpan{System.Char},System.Nullable{System.Text.Json.JsonElement}@,Corvus.Json.JsonPointerUtilities.SegmentHandler{``0},``0@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="TState">The type of the state for the segment handler.</typeparam>
            <param name="root">The root document from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <param name="handleSegment">A callback for each segment found during resolution.</param>
            <param name="state">The state for the segment handler.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer``1(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char},System.Nullable{System.Text.Json.JsonElement}@,Corvus.Json.JsonPointerUtilities.SegmentHandler{``0},``0@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="TState">The type of the state for the segment handler.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <param name="handleSegment">A callback for each segment found during resolution.</param>
            <param name="state">The state for the segment handler.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.EncodePointer(System.ReadOnlySpan{System.Char},System.Span{System.Char}@)">
            <summary>
            Encodes the ~ encoding in a pointer.
            </summary>
            <param name="unencodedFragment">The encoded fragment.</param>
            <param name="fragment">The span into which to write the result.</param>
            <returns>The length of the decoded fragment.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.DecodeHexPointer(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
            <summary>
            Decodes the hex encoding in a reference.
            </summary>
            <param name="encodedFragment">The encoded reference.</param>
            <param name="fragment">The span into which to write the result.</param>
            <returns>The length of the decoded reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.DecodePointer(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
            <summary>
            Decodes the ~ encoding in a reference.
            </summary>
            <param name="encodedFragment">The encoded reference.</param>
            <param name="fragment">The span into which to write the result.</param>
            <returns>The length of the decoded reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char},System.Boolean,System.Nullable{System.Text.Json.JsonElement}@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="throwOnFailure">If true, we throw on failure.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer``1(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char},System.Boolean,System.Nullable{System.Text.Json.JsonElement}@,Corvus.Json.JsonPointerUtilities.SegmentHandler{``0},``0@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="TState">The type of the state for the segment handler.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="throwOnFailure">If true, we throw on failure.</param>
            <param name="element">The element found at the given location.</param>
            <param name="handleSegment">A callback for each segment found during resolution.</param>
            <param name="state">The state for the segment handler.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="T:Corvus.Json.JsonPropertyName">
            <summary>
            A JSON property name.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonPropertyName"/> struct.
            </summary>
            <param name="value">The value from which to construct the property name.</param>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonPropertyName"/> struct.
            </summary>
            <param name="value">The value from which to construct the property name.</param>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.op_Implicit(System.String)~Corvus.Json.JsonPropertyName">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The string value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.op_Explicit(Corvus.Json.JsonPropertyName)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The string value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.op_Equality(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonPropertyName@)">
            <summary>
            Equals operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.op_Inequality(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonPropertyName@)">
            <summary>
            Not equals operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.op_LessThan(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonPropertyName@)">
            <summary>
            Less than operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><see langword="true"/> if lhs is less than rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.op_LessThanOrEqual(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonPropertyName@)">
            <summary>
            Less than or equals operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><see langword="true"/> if lhs is less than or equal to rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.op_GreaterThan(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonPropertyName@)">
            <summary>
            Greater than operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><see langword="true"/> if lhs is greater than rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.op_GreaterThanOrEqual(Corvus.Json.JsonPropertyName@,Corvus.Json.JsonPropertyName@)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><see langword="true"/> if lhs is greater than or equal to rhs.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.FromJsonString``1(``0@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonPropertyName"/> struct.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonString`1"/>.</typeparam>
            <param name="value">The value from which to construct the property name.</param>
            <returns>An instance of the <see cref="T:Corvus.Json.JsonPropertyName"/> initialized from the JsonString.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON property name from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON property name from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.CompareTo(Corvus.Json.JsonPropertyName@)">
            <summary>
            Compares with another property name.
            </summary>
            <param name="other">The name with which to compare.</param>
            <returns>0 if they are equal, -1 if this is less than the other, 1 if this is greater than the other.</returns>
            <exception cref="T:System.InvalidOperationException">The values could not be compared.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.Equals(Corvus.Json.JsonPropertyName@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
            <exception cref="T:System.InvalidOperationException">The comparison was not possible.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.EqualsJsonElement(System.Text.Json.JsonElement)">
            <summary>
            Compares with a JsonElement.
            </summary>
            <param name="jsonElement">The json element to compare.</param>
            <returns><see langword="true"/> if the property name was equal to this name.</returns>
            <exception cref="T:System.InvalidOperationException">The property name did not have a valid backing.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.EqualsPropertyNameOf(System.Text.Json.JsonProperty)">
            <summary>
            Compare with the name of a <see cref="T:System.Text.Json.JsonProperty"/>.
            </summary>
            <param name="jp">The JSON property whose name is to be compared.</param>
            <returns><see langword="true"/> if the property name was equal to this name.</returns>
            <exception cref="T:System.InvalidOperationException">The property name did not have a valid backing.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare with the name of a <see cref="T:System.Text.Json.JsonProperty"/>.
            </summary>
            <param name="name">The name with which to compare.</param>
            <returns><see langword="true"/> if the property name was equal to this name.</returns>
            <exception cref="T:System.InvalidOperationException">The property name did not have a valid backing.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.EqualsJsonString(Corvus.Json.JsonString@)">
            <summary>
            Compare with a <see cref="T:Corvus.Json.JsonString"/>.
            </summary>
            <param name="name">The name with which to compare.</param>
            <returns><see langword="true"/> if the property name was equal to this name.</returns>
            <exception cref="T:System.InvalidOperationException">The property name did not have a valid backing.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.EqualsUtf8String(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare with the name of a <see cref="T:System.Text.Json.JsonProperty"/>.
            </summary>
            <param name="name">The name with which to compare.</param>
            <returns><see langword="true"/> if the property name was equal to this name.</returns>
            <exception cref="T:System.InvalidOperationException">The property name did not have a valid backing.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.GetString">
            <summary>
            Gets the value as a string.
            </summary>
            <returns>The value as a string.</returns>
            <exception cref="T:System.InvalidOperationException">The value could not be converted to a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.TryGetProperty(System.Text.Json.JsonElement@,System.Text.Json.JsonElement@)">
            <summary>
            Try to get a property from a JSON element.
            </summary>
            <param name="jsonElement">The json element from which to retrieve the property.</param>
            <param name="value">The value of the property.</param>
            <returns><see langword="true"/> if the property could be retrieved.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.TryGetString(System.String@)">
            <summary>
            Try to get the value as a string.
            </summary>
            <param name="value">The value as a string.</param>
            <returns><see langword="true"/> if the value could be returned as a string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.TryGetValue``2(Corvus.Json.Parser{``0,``1},``0@,``1@)">
            <summary>
            Parses a value from a JsonString type.
            </summary>
            <typeparam name="TState">The state passed in to the parser.</typeparam>
            <typeparam name="TResult">The result of parsing the string.</typeparam>
            <param name="parser">The parser to perform the conversion.</param>
            <param name="state">The state to be passed to the parser.</param>
            <param name="result">The result of the parsing.</param>
            <returns><see langword="true"/> if the result was parsed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.TryGetValue``2(Corvus.Json.Utf8Parser{``0,``1},``0@,``1@)">
            <summary>
            Parses a value from a JsonString type.
            </summary>
            <typeparam name="TState">The state passed in to the parser.</typeparam>
            <typeparam name="TResult">The result of parsing the string.</typeparam>
            <param name="parser">The parser to perform the conversion.</param>
            <param name="state">The state to be passed to the parser.</param>
            <param name="result">The result of the parsing.</param>
            <returns><see langword="true"/> if the result was parsed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.TryGetValue``2(Corvus.Json.Utf8Parser{``0,``1},``0@,System.Boolean,``1@)">
            <summary>
            Parses a value from a JsonString type.
            </summary>
            <typeparam name="TState">The state passed in to the parser.</typeparam>
            <typeparam name="TResult">The result of parsing the string.</typeparam>
            <param name="parser">The parser to perform the conversion.</param>
            <param name="state">The state to be passed to the parser.</param>
            <param name="decode">Determines whether to decode the UTF8 bytes.</param>
            <param name="result">The result of the parsing.</param>
            <returns><see langword="true"/> if the result was parsed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Write the name to a <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
            <param name="writer">The writer to which to write the name.</param>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.As``1">
            <summary>
            Gets the property name as a JSON string of the given type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonString`1"/>.</typeparam>
            <returns>An instance of the property name converted to the given type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.IsMatch(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets a value indicating whether this property name matches
            the given <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
            <param name="regex">The regular expression to match.</param>
            <returns><see langword="true"/> if the expression is a match.</returns>
            <exception cref="T:System.InvalidOperationException">The name was not in a valid state.</exception>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.EstimateCharLength">
            <summary>
            Gets an estimate of the length of the name.
            </summary>
            <returns>An estimate of the length of the name.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPropertyName.TryCopyTo(System.Memory{System.Char},System.Int32@)">
            <summary>
            Copies the value to a buffer, returning the required length.
            </summary>
            <param name="memory">The memory to which to write the value.</param>
            <param name="length">The length that is needed.</param>
            <returns><see langword="true"/> if the value was copied successfully, otherwise false. The required length will be set in either case.</returns>
        </member>
        <member name="T:Corvus.Json.JsonReference">
            <summary>
            A JSON $ref as a URI or JsonPointer.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonReference.RootFragment">
            <summary>
            Gets a reference to the root fragment.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="reference">The reference as a string.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="uri">The uri component of the reference without a fragment.</param>
            <param name="fragment">The fragment component of the reference.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="baseUri">The base Uri component of the reference.</param>
            <param name="fragment">The fragment component of the reference.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="uri">The uri component of the reference.</param>
            <param name="pointer">The pointer component of the reference.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.ReadOnlyMemory{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="reference">The reference as a string.</param>
        </member>
        <member name="P:Corvus.Json.JsonReference.HasAbsoluteUri">
            <summary>
            Gets a value indicating whether the ref has an absolute uri.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.HasFragment">
            <summary>
            Gets a value indicating whether the ref has a fragment.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.HasUri">
            <summary>
            Gets a value indicating whether the ref has a uri.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.Uri">
            <summary>
            Gets the URI without the fragment.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.Fragment">
            <summary>
            Gets the fragment including the leading #.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.IsImplicitFile">
            <summary>
            Gets a value indicating whether this is an implicit file reference.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonReference.op_Implicit(Corvus.Json.JsonReference)~System.String">
            <summary>
            Implicit conversion from a string.
            </summary>
            <param name="reference">The reference as a string.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.op_Explicit(System.Nullable{Corvus.Json.JsonReference})~System.String">
            <summary>
            Implicit conversion from a string.
            </summary>
            <param name="reference">The reference as a string.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.op_Equality(Corvus.Json.JsonReference,Corvus.Json.JsonReference)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs of the comparison.</param>
            <param name="right">The rhs of the comparison.</param>
            <returns><c>True</c> if the left equals the right.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.op_Inequality(Corvus.Json.JsonReference,Corvus.Json.JsonReference)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs of the comparison.</param>
            <param name="right">The rhs of the comparison.</param>
            <returns><c>True</c> if the left does not equals the right.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.FromUriAndUnencodedPropertyName(System.String,System.String)">
            <summary>
            Create a reference from a URI and an unencoded property name.
            </summary>
            <param name="uri">The base URI.</param>
            <param name="unencodedPropertyName">The unencoded property name.</param>
            <returns>The new <see cref="T:Corvus.Json.JsonReference"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.FromEncodedJsonString(System.String)">
            <summary>
            Create a reference from a potentially encoded source (such as an external JSON document).
            </summary>
            <param name="referenceOrNull">The string from which to construct <see cref="T:Corvus.Json.JsonReference"/>.</param>
            <returns>The new <see cref="T:Corvus.Json.JsonReference"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AsDecodedString">
            <summary>
            Get the value as decoded string.
            </summary>
            <returns>The value with encodings replaced.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.WithFragment(System.String)">
            <summary>
            Replace the fragment in the reference.
            </summary>
            <param name="fragment">The fragment to replace.</param>
            <returns>A JSON reference with the same uri up to and including path and query, but with a different fragment.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AppendArrayIndexToFragment(System.Int32)">
            <summary>
            Append an array index to the fragment in the reference.
            </summary>
            <param name="index">The array index to append.</param>
            <returns>A JSON reference with the encoded fragment appended.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AppendUnencodedPropertyNameToFragment(System.String)">
            <summary>
            Append an unencoded JSON property name to the fragment in the reference.
            </summary>
            <param name="unencodedPropertyName">The name to append.</param>
            <returns>A JSON reference with the encoded fragment appended.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AsBuilder">
            <summary>
            Gets a reference builder for this reference.
            </summary>
            <returns>The <see cref="T:Corvus.Json.JsonReferenceBuilder"/> that gives access to the components of the reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.Equals(Corvus.Json.JsonReference)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.MoveToParentFragment">
            <summary>
            Moves to the parent fragment if available.
            </summary>
            <returns>A JsonReference pointing at the parent fragment, or the original reference if there is no fragment.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.Apply(Corvus.Json.JsonReference,System.Boolean)">
            <summary>
            Combine this Json reference with another using the rules in rfc3986 (https://tools.ietf.org/html/rfc3986#section-5.2.2).
            </summary>
            <param name="other">The reference with which to combine.</param>
            <param name="strict">Whether to be 'strict' in the sense of rc3986.</param>
            <returns>The combined reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.MakeRelative(Corvus.Json.JsonReference@)">
            <summary>
            Makes a relative reference from an absolute base reference and an absolute target reference.
            </summary>
            <param name="other">The target reference.</param>
            <returns>A reference relative to the base reference.</returns>
            <exception cref="T:System.InvalidOperationException">One of the references was not absolute.</exception>
        </member>
        <member name="M:Corvus.Json.JsonReference.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.JsonReferenceBuilder">
            <summary>
            A decomposed JsonReference to help you build / deconstruct references.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonReferenceBuilder.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReferenceBuilder"/> struct.
            </summary>
            <param name="scheme">The scheme.</param>
            <param name="authority">The authority.</param>
            <param name="path">The path.</param>
            <param name="query">The query.</param>
            <param name="fragment">The fragment.</param>
            <remarks>
            A builder/deconstructor for a JsonReference.
            <code>
            <![CDATA[
                foo://example.com:8042/over/there?name=ferret#nose
                \_/   \______________/\_________/ \_________/ \__/
                 |           |            |            |        |
               scheme     authority     path          query  fragment
            ]]>
            </code>
            </remarks>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Scheme">
            <summary>
            Gets the scheme.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasScheme">
            <summary>
            Gets a value indicating whether the reference has a scheme component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Authority">
            <summary>
            Gets the authority.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasAuthority">
            <summary>
            Gets a value indicating whether the reference has an authority component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasPath">
            <summary>
            Gets a value indicating whether the reference has a path component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Query">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasQuery">
            <summary>
            Gets a value indicating whether the reference has a query component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Fragment">
            <summary>
            Gets the fragment.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasFragment">
            <summary>
            Gets a value indicating whether the reference has a query component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Host">
            <summary>
            Gets the host.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Port">
            <summary>
            Gets the port.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonReferenceBuilder.From(System.String)">
            <summary>
            Gets a reference builder from a reference.
            </summary>
            <param name="reference">The reference from which to create the builder.</param>
            <returns>A <see cref="T:Corvus.Json.JsonReferenceBuilder"/> initialized from the given string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReferenceBuilder.AsReference">
            <summary>
            Gets the JsonReference corresponding to this builder.
            </summary>
            <returns>The <see cref="T:Corvus.Json.JsonReference"/> built from this builder.</returns>
        </member>
        <member name="T:Corvus.Json.JsonString">
            <summary>
            Represents a Json string value.
            </summary>
            <summary>
            Represents a JSON string.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonString"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonString.#ctor(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonString"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonString.#ctor(System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonString"/> struct.
            </summary>
            <param name="utf8Value">The value from which to construct the instance.</param>
        </member>
        <member name="M:Corvus.Json.JsonString.op_Implicit(Corvus.Json.JsonString)~Corvus.Json.JsonAny">
            <summary>
            Conversion to JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonString.op_Implicit(System.String)~Corvus.Json.JsonString">
            <summary>
            Conversion from string.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonString.op_Implicit(Corvus.Json.JsonAny)~Corvus.Json.JsonString">
            <summary>
            Conversion from JsonAny.
            </summary>
            <param name="value">The value from which to convert.</param>
        </member>
        <member name="M:Corvus.Json.JsonString.op_Explicit(Corvus.Json.JsonString)~System.String">
            <summary>
            Conversion to string.
            </summary>
            <param name="value">The value from which to convert.</param>
            <exception cref="T:System.InvalidOperationException">The value was not a string.</exception>
        </member>
        <member name="M:Corvus.Json.JsonString.GetString">
            <summary>
            Gets the string value.
            </summary>
            <returns><c>The string if this value represents a string</c>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.TryGetString(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.EqualsUtf8Bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="utf8Bytes">The UTF8-encoded character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.EqualsString(System.String)">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.EqualsString(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare to a sequence of characters.
            </summary>
            <param name="chars">The character sequence to compare.</param>
            <returns><c>True</c> if teh sequences match.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonString"/> struct.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonString.#ctor(System.Text.Json.JsonElement@)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonString"/> struct.
            </summary>
            <param name="value">The value from which to construct the instance.</param>
        </member>
        <member name="P:Corvus.Json.JsonString.Null">
            <summary>
            Gets a Null instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonString.Undefined">
            <summary>
            Gets an Undefined instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonString.DefaultInstance">
            <summary>
            Gets a default instance.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonString.AsAny">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.AsJsonElement">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.AsString">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.Corvus#Json#IJsonValue#AsBoolean">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.Corvus#Json#IJsonValue#AsNumber">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.Corvus#Json#IJsonValue#AsObject">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.Corvus#Json#IJsonValue#AsArray">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.HasJsonElementBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.HasDotnetBacking">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.JsonString.ValueKind">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.op_Equality(Corvus.Json.JsonString@,Corvus.Json.JsonString@)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.op_Inequality(Corvus.Json.JsonString@,Corvus.Json.JsonString@)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs.</param>
            <param name="right">The rhs.</param>
            <returns><c>True</c> if the values are equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.FromAny(Corvus.Json.JsonAny@)">
            <summary>
            Gets an instance of the JSON value from a JsonAny value.
            </summary>
            <param name="value">The <see cref="T:Corvus.Json.JsonAny"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:Corvus.Json.JsonAny"/>.</returns>
            <remarks>The returned value will have a <see cref="P:Corvus.Json.IJsonValue.ValueKind"/> of <see cref="F:System.Text.Json.JsonValueKind.Undefined"/> if the
            value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
            </remarks>
        </member>
        <member name="M:Corvus.Json.JsonString.FromJson(System.Text.Json.JsonElement@)">
            <summary>
            Gets an instance of the JSON value from a <see cref="T:System.Text.Json.JsonElement"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Text.Json.JsonElement"/> value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the <see cref="T:System.Text.Json.JsonElement"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.FromString``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a string value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonString.Corvus#Json#IJsonValue{Corvus#Json#JsonString}#FromBoolean``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a boolean value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonString.Corvus#Json#IJsonValue{Corvus#Json#JsonString}#FromNumber``1(``0@)">
            <summary>
            Gets an instance of the JSON value from a double value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonString.Corvus#Json#IJsonValue{Corvus#Json#JsonString}#FromArray``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an array value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonString.Corvus#Json#IJsonValue{Corvus#Json#JsonString}#FromObject``1(``0@)">
            <summary>
            Gets an instance of the JSON value from an object value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value from which to instantiate the instance.</param>
            <returns>An instance of this type, initialized from the value.</returns>
            <remarks>The value will be undefined if it cannot be initialized with the specified instance.</remarks>
        </member>
        <member name="M:Corvus.Json.JsonString.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonString.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonString.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonString.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonString.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses a JSON string into a JsonString.
            </summary>
            <param name="utf8Json">The json string to parse.</param>
            <param name="options">The (optional) JsonDocumentOptions.</param>
            <returns>A <see cref="T:Corvus.Json.JsonString"/> instance built from the JSON string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.ParseValue(System.String)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.ParseValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.ParseValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.ParseValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Concatenate``2(System.Span{System.Byte},``0@,``1@)">
            <summary>
            Concatenate two JSON values, producing an instance of the string type JsonString.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Concatenate``3(System.Span{System.Byte},``0@,``1@,``2@)">
            <summary>
            Concatenate three JSON values, producing an instance of the string type JsonString.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Concatenate``4(System.Span{System.Byte},``0@,``1@,``2@,``3@)">
            <summary>
            Concatenate four JSON values, producing an instance of the string type JsonString.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Concatenate``5(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Concatenate five JSON values, producing an instance of the string type JsonString.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Concatenate``6(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Concatenate six JSON values, producing an instance of the string type JsonString.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Concatenate``7(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Concatenate seven JSON values, producing an instance of the string type JsonString.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Concatenate``8(System.Span{System.Byte},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Concatenate eight JSON values, producing an instance of the string type JsonString.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="buffer">The buffer into which to concatenate the values.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="fourthValue">The fourth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="sixthValue">The sixth value.</param>
            <param name="seventhValue">The seventh value.</param>
            <param name="eighthValue">The eighth value.</param>
            <returns>An instance of this string type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.As``1">
            <summary>
            Gets the value as an instance of the target value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>An instance of the target type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.Equals``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.Equals(Corvus.Json.JsonString@)">
            <summary>
            Equality comparison.
            </summary>
            <param name="other">The other item with which to compare.</param>
            <returns><see langword="true"/> if the values were equal.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Equals(System.ReadOnlySpan{System.Char})">
            <summary>
            Compare with a string.
            </summary>
            <param name="other">The span with which to compare.</param>
            <returns><see langword="true"/> if they are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.Equals(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compare with a UTF8 string.
            </summary>
            <param name="other">The span with which to compare.</param>
            <returns><see langword="true"/> if they are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonString.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.Validate(Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonString.ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.Utf8Parser`2">
            <summary>
              A delegate to a method that attempts to represent a JSON string as a given type.
            </summary>
            <typeparam name="TState">The type of the state for the parser.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="span">The UTF8-encoded JSON string. This may be encoded or decoded depending on context.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">The resulting value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Corvus.Json.Parser`2">
            <summary>
              A delegate to a method that attempts to represent a JSON string as a given type.
            </summary>
            <typeparam name="TState">The type of the state for the parser.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="span">The JSON string. This will always be in its decoded form.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">The resulting value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Corvus.Json.Utf8PropertyParser`2">
            <summary>
              A delegate to a method that attempts to represent a JSON string as a given type.
            </summary>
            <typeparam name="TState">The type of the state for the parser.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="name">The UTF8-encoded JSON property name. This may be encoded or decoded depending on context.</param>
            <param name="span">The UTF8-encoded JSON string. This may be encoded or decoded depending on context.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">The resulting value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Corvus.Json.PropertyParser`2">
            <summary>
              A delegate to a method that attempts to represent a JSON string as a given type.
            </summary>
            <typeparam name="TState">The type of the state for the parser.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="name">The JSON property name. This may be encoded or decoded depending on context.</param>
            <param name="span">The JSON string. This will always be in its decoded form.</param>
            <param name="state">The state for the parser.</param>
            <param name="value">The resulting value.</param>
            <remarks>
              This method does not create a representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as the given type,
              <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Corvus.Json.JsonValueExtensions">
            <summary>
            Extension methods for <see cref="T:Corvus.Json.IJsonValue"/> instances.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.TryGetProperty``3(``0,``2@,``1@)">
            <summary>
            Gets a property.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonObject`1"/> from which to get the property.</typeparam>
            <typeparam name="TValue">The type of the result.</typeparam>
            <typeparam name="TString">The type of the string containing the name.</typeparam>
            <param name="jsonObject">The instance of the <see cref="T:Corvus.Json.IJsonObject`1"/> from which to get the property.</param>
            <param name="name">The name of the property.</param>
            <param name="property">The resulting property, if any.</param>
            <returns><see langword="true"/> if the property exists.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.Clone``1(``0)">
            <summary>
            Clones an <see cref="T:Corvus.Json.IJsonValue"/> to enable it to be
            used safely outside of its construction context.
            </summary>
            <typeparam name="TValue">The type of the value to be cloned.</typeparam>
            <param name="value">The value to be cloned.</param>
            <returns>An instance of the value that is safe to be used detached from its previous context.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.Serialize``1(``0)">
            <summary>
            Serialize the entity to a string.
            </summary>
            <typeparam name="TValue">The type of <see cref="T:Corvus.Json.IJsonValue"/>.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>A string representation fo the value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.IsNull``1(``0)">
            <summary>
            Gets a value indicating whether this value is null.
            </summary>
            <typeparam name="T">The type of the value to check.</typeparam>
            <param name="value">The value to check.</param>
            <returns><c>True</c> if the value is null.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.IsUndefined``1(``0)">
            <summary>
            Gets a value indicating whether this value is undefined.
            </summary>
            <typeparam name="T">The type of the value to check.</typeparam>
            <param name="value">The value to check.</param>
            <returns><c>True</c> if the value is undefined.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.IsNotNull``1(``0)">
            <summary>
            Gets a value indicating whether this value is not null.
            </summary>
            <typeparam name="T">The type of the value to check.</typeparam>
            <param name="value">The value to check.</param>
            <returns><c>True</c> if the value is not null.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.IsNotUndefined``1(``0)">
            <summary>
            Gets a value indicating whether this value is not undefined.
            </summary>
            <typeparam name="T">The type of the value to check.</typeparam>
            <param name="value">The value to check.</param>
            <returns><c>True</c> if the value is not undefined.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.IsNullOrUndefined``1(``0)">
            <summary>
            Gets a value indicating whether this value is null or undefined.
            </summary>
            <typeparam name="T">The type of the value to check.</typeparam>
            <param name="value">The value to check.</param>
            <returns><c>True</c> if the value is undefined.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.IsNotNullOrUndefined``1(``0)">
            <summary>
            Gets a value indicating whether this value is neither null nor undefined.
            </summary>
            <typeparam name="T">The type of the value to check.</typeparam>
            <param name="value">The value to check.</param>
            <returns><c>True</c> if the value is neither null nor undefined.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.AsOptional``1(``0)">
            <summary>
            Gets a nullable instance of the value.
            </summary>
            <typeparam name="T">The type of the value for wich to get a nullable instance.</typeparam>
            <param name="value">The value to check.</param>
            <returns><c>null</c> if the value is null, or undefined. Otherwise an instance of the value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.IsValid``1(``0)">
            <summary>
            Gets a value indicating whether the value is valid.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to validate.</param>
            <returns><c>True</c> if the value is a valid instance of the type.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.AsDotnetBackedValue``1(``0)">
            <summary>
            Gets the instance as a dotnet backed value.
            </summary>
            <typeparam name="T">The type of the value to convert.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>An instance of the given value, backed by a dotnet value rather than a JsonElement.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.AsJsonElementBackedValue``1(``0)">
            <summary>
            Gets the instance as a dotnet backed value.
            </summary>
            <typeparam name="T">The type of the value to convert.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>An instance of the given value, backed by a dotnet value rather than a JsonElement.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.TryGetValue``3(``0,Corvus.Json.Parser{``1,``2},``1@,``2@)">
            <summary>
            Parses a value from a JsonString type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonString`1"/> to parse.</typeparam>
            <typeparam name="TState">The state passed in to the parser.</typeparam>
            <typeparam name="TResult">The result of parsing the string.</typeparam>
            <param name="jsonValue">The instance of the <see cref="T:Corvus.Json.IJsonString`1"/> to parse.</param>
            <param name="parser">The parser to perform the conversion.</param>
            <param name="state">The state to be passed to the parser.</param>
            <param name="result">The result of the parsing.</param>
            <returns><see langword="true"/> if the result was parsed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.TryGetValue``3(``0,Corvus.Json.Utf8Parser{``1,``2},``1@,``2@)">
            <summary>
            Parses a value from a JsonString type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonString`1"/> to parse.</typeparam>
            <typeparam name="TState">The state passed in to the parser.</typeparam>
            <typeparam name="TResult">The result of parsing the string.</typeparam>
            <param name="jsonValue">The instance of the <see cref="T:Corvus.Json.IJsonString`1"/> to parse.</param>
            <param name="parser">The parser to perform the conversion.</param>
            <param name="state">The state to be passed to the parser.</param>
            <param name="result">The result of the parsing.</param>
            <returns><see langword="true"/> if the result was parsed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueExtensions.TryGetValue``3(``0,Corvus.Json.Utf8Parser{``1,``2},``1@,System.Boolean,``2@)">
            <summary>
            Parses a value from a JsonString type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonString`1"/> to parse.</typeparam>
            <typeparam name="TState">The state passed in to the parser.</typeparam>
            <typeparam name="TResult">The result of parsing the string.</typeparam>
            <param name="jsonValue">The instance of the <see cref="T:Corvus.Json.IJsonString`1"/> to parse.</param>
            <param name="parser">The parser to perform the conversion.</param>
            <param name="state">The state to be passed to the parser.</param>
            <param name="decode">Determines whether to decode the UTF8 bytes.</param>
            <param name="result">The result of the parsing.</param>
            <returns><see langword="true"/> if the result was parsed successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Corvus.Json.JsonValueParser">
            <summary>
            Parses JSON values.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonValueParser.ParseValue``1(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <typeparam name="T">The type of the value to parse.</typeparam>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueParser.ParseValue``1(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <typeparam name="T">The type of the value to parse.</typeparam>
            <param name="buffer">The buffer from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.JsonValueParser.ParseValue``1(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Parses a JSON value from a buffer.
            </summary>
            <typeparam name="T">The type of the value to parse.</typeparam>
            <param name="reader">The reader from which to parse the value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="T:Corvus.Json.Matcher`3">
            <summary>
            A callback for a pattern match method.
            </summary>
            <typeparam name="TMatch">The type that was matched.</typeparam>
            <typeparam name="TContext">The context of the match.</typeparam>
            <typeparam name="TOut">The result of the match operation.</typeparam>
            <param name="match">The matched value.</param>
            <param name="context">The context for the match operation.</param>
            <returns>The result of processing the match.</returns>
        </member>
        <member name="T:Corvus.Json.Matcher`2">
            <summary>
            A callback for a pattern match method.
            </summary>
            <typeparam name="TMatch">The type that was matched.</typeparam>
            <typeparam name="TOut">The result of the match operation.</typeparam>
            <param name="match">The matched value.</param>
            <returns>The result of processing the match.</returns>
        </member>
        <member name="T:Corvus.Json.NumericTypeExtensions">
            <summary>
            Extension methods for numeric types.
            </summary>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetInt32WithFallbacks(System.Text.Json.JsonElement,System.Int32@)">
            <summary>
            Safely get an int32 value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int32.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetInt32(System.Text.Json.JsonElement)">
            <summary>
            Safely get an int32 value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetInt16WithFallbacks(System.Text.Json.JsonElement,System.Int16@)">
            <summary>
            Safely get an short value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int16.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetInt16(System.Text.Json.JsonElement)">
            <summary>
            Safely get an short value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetHalfWithFallbacks(System.Text.Json.JsonElement,System.Half@)">
            <summary>
            Safely get an half value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an floateger.</param>
            <returns><see langword="true"/> if the value coudld be represented as an single.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetHalf(System.Text.Json.JsonElement)">
            <summary>
            Safely get an Half value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an floateger.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an floateger.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetSingleWithFallbacks(System.Text.Json.JsonElement,System.Single@)">
            <summary>
            Safely get an single value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an floateger.</param>
            <returns><see langword="true"/> if the value coudld be represented as an single.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetSingle(System.Text.Json.JsonElement)">
            <summary>
            Safely get an single value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an floateger.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an floateger.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetDouble(System.Text.Json.JsonElement)">
            <summary>
            Safely get an double value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an doubleeger.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an doubleeger.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetDecimal(System.Text.Json.JsonElement)">
            <summary>
            Safely get an int64 value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetInt64WithFallbacks(System.Text.Json.JsonElement,System.Int64@)">
            <summary>
            Safely get an int64 value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int64.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetInt64(System.Text.Json.JsonElement)">
            <summary>
            Safely get an int64 value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetInt128WithFallbacks(System.Text.Json.JsonElement,System.Int128@)">
            <summary>
            Safely get an int128 value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int64.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetInt128(System.Text.Json.JsonElement)">
            <summary>
            Safely get an int128 value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetUInt32WithFallbacks(System.Text.Json.JsonElement,System.UInt32@)">
            <summary>
            Safely get an uint32 value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int64.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetUInt32(System.Text.Json.JsonElement)">
            <summary>
            Safely get an uint32 value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetUInt16WithFallbacks(System.Text.Json.JsonElement,System.UInt16@)">
            <summary>
            Safely get an ushort value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int64.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetUInt16(System.Text.Json.JsonElement)">
            <summary>
            Safely get an ushort value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetUInt64WithFallbacks(System.Text.Json.JsonElement,System.UInt64@)">
            <summary>
            Safely get a ulong value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int64.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetUInt64(System.Text.Json.JsonElement)">
            <summary>
            Safely get a ulong value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetUInt128WithFallbacks(System.Text.Json.JsonElement,System.UInt128@)">
            <summary>
            Safely get a UInt128 value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int64.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetUInt128(System.Text.Json.JsonElement)">
            <summary>
            Safely get a ulong value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetByteWithFallbacks(System.Text.Json.JsonElement,System.Byte@)">
            <summary>
            Safely get a byte value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an integer.</param>
            <returns><see langword="true"/> if the value coudld be represented as an int64.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetByte(System.Text.Json.JsonElement)">
            <summary>
            Safely get a byte value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an byte.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as a byte.</exception>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.TryGetSByteWithFallbacks(System.Text.Json.JsonElement,System.SByte@)">
            <summary>
            Safely get and sbyte value.
            </summary>
            <param name="value">The value to get.</param>
            <param name="result">The value as an sbyte.</param>
            <returns><see langword="true"/> if the value could be retrieved as an sbyte.</returns>
        </member>
        <member name="M:Corvus.Json.NumericTypeExtensions.SafeGetSByte(System.Text.Json.JsonElement)">
            <summary>
            Safely get an sbyte value.
            </summary>
            <param name="value">The value to get.</param>
            <returns>The value as an integer.</returns>
            <exception cref="T:System.FormatException">The value could not be formatted as an integer.</exception>
        </member>
        <member name="T:Corvus.Json.ParsedValue`1">
            <summary>
            Represents a parsed instance of a type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to parse.</typeparam>
            <remarks>
            This provides a disposable wrapper around an underlying <see cref="T:System.Text.Json.JsonDocument"/> and the parsed value.
            It saves you writing the boilerplate code to create and dispose the <see cref="T:System.Text.Json.JsonDocument"/> when you're done with it.
            </remarks>
        </member>
        <member name="P:Corvus.Json.ParsedValue`1.Instance">
            <summary>
            Gets the instance of the parsed value.
            </summary>
        </member>
        <member name="M:Corvus.Json.ParsedValue`1.op_Implicit(`0)~Corvus.Json.ParsedValue{`0}">
            <summary>
            Converts an instance of a value to a parsed value.
            </summary>
            <param name="value">The value to convert to a parsed value.</param>
        </member>
        <member name="M:Corvus.Json.ParsedValue`1.Parse(System.IO.Stream)">
            <summary>
            Parse a JSON document into a value.
            </summary>
            <param name="utf8Json">The UTF8 JSON stream to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.ParsedValue`1.Parse(System.String)">
            <summary>
            Parse a JSON document into a value.
            </summary>
            <param name="json">The JSON string to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.ParsedValue`1.Parse(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Parse a JSON document into a value.
            </summary>
            <param name="utf8Json">The JSON string to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.ParsedValue`1.Parse(System.ReadOnlyMemory{System.Char})">
            <summary>
            Parse a JSON document into a value.
            </summary>
            <param name="json">The JSON string to parse.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Corvus.Json.ParsedValue`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.PatternPropertyValidator">
            <summary>
            A delegate for pattern property validators.
            </summary>
            <param name="that">An instance of the property to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="T:Corvus.Json.Period">
            <summary>
            Represents a period of time expressed in human chronological terms: hours, days,
            weeks, months and so on.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Corvus.Json.Period"/> contains a set of properties such as <see cref="P:Corvus.Json.Period.Years"/>, <see cref="P:Corvus.Json.Period.Months"/>, and so on
            that return the number of each unit contained within this period. Note that these properties are not normalized in
            any way by default, and so a <see cref="T:Corvus.Json.Period"/> may contain values such as "2 hours and 90 minutes". The
            <see cref="M:Corvus.Json.Period.Normalize"/> method will convert equivalent periods into a standard representation.
            </para>
            <para>
            Periods can contain negative units as well as positive units ("+2 hours, -43 minutes, +10 seconds"), but do not
            differentiate between properties that are zero and those that are absent (i.e. a period created as "10 years"
            and one created as "10 years, zero months" are equal periods; the <see cref="P:Corvus.Json.Period.Months"/> property returns zero in
            both cases).
            </para>
            <para>
            <see cref="T:Corvus.Json.Period"/> equality is implemented by comparing each property's values individually, without any normalization.
            (For example, a period of "24 hours" is not considered equal to a period of "1 day".) The static
            <see cref="P:Corvus.Json.Period.NormalizingEqualityComparer"/> comparer provides an equality comparer which performs normalization before comparisons.
            </para>
            <para>
            There is no natural ordering for periods, but <see cref="M:Corvus.Json.Period.CreateComparer(NodaTime.LocalDateTime)"/> can be used to create a
            comparer which orders periods according to a reference date, by adding each period to that date and comparing the results.
            </para>
            <para>
            Periods operate on calendar-related types such as
            <see cref="T:NodaTime.LocalDateTime" /> whereas <see cref="T:NodaTime.Duration"/> operates on instants
            on the time line. (Note that although <see cref="T:NodaTime.ZonedDateTime" /> includes both concepts, it only supports
            duration-based arithmetic.)
            </para>
            <para>
            The complexity of each method in this type is hard to document precisely, and often depends on the calendar system
            involved in performing the actual calculations. Operations do not depend on the magnitude of the units in the period,
            other than for optimizations for values of zero or occasionally for particularly small values. For example,
            adding 10,000 days to a date does not require greater algorithmic complexity than adding 1,000 days to the same date.
            </para>
            </remarks>
            <threadsafety>This type is immutable reference type. See the thread safety section of the user guide for more information.</threadsafety>
        </member>
        <member name="M:Corvus.Json.Period.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a new period from the given values.
            </summary>
        </member>
        <member name="M:Corvus.Json.Period.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a period with the given date values.
            </summary>
        </member>
        <member name="M:Corvus.Json.Period.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a period with the given time values.
            </summary>
        </member>
        <member name="P:Corvus.Json.Period.Zero">
            <summary>
            Gets a period containing only zero-valued properties.
            </summary>
        </member>
        <member name="P:Corvus.Json.Period.NormalizingEqualityComparer">
            <summary>
            Gets an equality comparer which compares periods by first normalizing them - so 24 hours is deemed equal to 1 day, and so on.
            Note that as per the <see cref="M:Corvus.Json.Period.Normalize"/> method, years and months are unchanged by normalization - so 12 months does not
            equal 1 year.
            </summary>
            <value>An equality comparer which compares periods by first normalizing them.</value>
        </member>
        <member name="P:Corvus.Json.Period.Nanoseconds">
            <summary>
            Gets the number of nanoseconds within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of nanoseconds within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Ticks">
            <summary>
            Gets the number of ticks within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of ticks within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Milliseconds">
            <summary>
            Gets the number of milliseconds within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of milliseconds within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Seconds">
            <summary>
            Gets the number of seconds within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of seconds within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Minutes">
            <summary>
            Gets the number of minutes within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of minutes within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Hours">
            <summary>
            Gets the number of hours within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of hours within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Days">
            <summary>
            Gets the number of days within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of days within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Weeks">
            <summary>
            Gets the number of weeks within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of weeks within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Months">
            <summary>
            Gets the number of months within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of months within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.Years">
            <summary>
            Gets the number of years within this period.
            </summary>
            <remarks>
            This property returns zero both when the property has been explicitly set to zero and when the period does not
            contain this property.
            </remarks>
            <value>The number of years within this period.</value>
        </member>
        <member name="P:Corvus.Json.Period.HasTimeComponent">
            <summary>
            Gets a value indicating whether or not this period contains any non-zero-valued time-based properties (hours or lower).
            </summary>
            <value>true if the period contains any non-zero-valued time-based properties (hours or lower); false otherwise.</value>
        </member>
        <member name="P:Corvus.Json.Period.HasDateComponent">
            <summary>
            Gets a value indicating whether or not this period contains any non-zero date-based properties (days or higher).
            </summary>
            <value>true if this period contains any non-zero date-based properties (days or higher); false otherwise.</value>
        </member>
        <member name="P:Corvus.Json.Period.TotalNanoseconds">
            <summary>
            Gets the total number of nanoseconds duration for the 'standard' properties (all bar years and months).
            </summary>
            <value>The total number of nanoseconds duration for the 'standard' properties (all bar years and months).</value>
        </member>
        <member name="M:Corvus.Json.Period.op_Implicit(Corvus.Json.Period@)~NodaTime.Period">
            <summary>
            Convert to a NodaTime.Period.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.Period.op_Implicit(NodaTime.Period)~Corvus.Json.Period">
            <summary>
            Convert to a NodaTime.Period.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Corvus.Json.Period.op_Addition(Corvus.Json.Period,Corvus.Json.Period)">
            <summary>
            Adds two periods together, by simply adding the values for each property.
            </summary>
            <param name="left">The first period to add.</param>
            <param name="right">The second period to add.</param>
            <returns>The sum of the two periods. The units of the result will be the union of those in both
            periods.</returns>
        </member>
        <member name="M:Corvus.Json.Period.op_Subtraction(Corvus.Json.Period,Corvus.Json.Period)">
            <summary>
            Subtracts one period from another, by simply subtracting each property value.
            </summary>
            <param name="minuend">The period to subtract the second operand from.</param>
            <param name="subtrahend">The period to subtract the first operand from.</param>
            <returns>The result of subtracting all the values in the second operand from the values in the first. The
            units of the result will be the union of both periods, even if the subtraction caused some properties to
            become zero (so "2 weeks, 1 days" minus "2 weeks" is "zero weeks, 1 days", not "1 days").</returns>
        </member>
        <member name="M:Corvus.Json.Period.op_Equality(Corvus.Json.Period,Corvus.Json.Period)">
            <summary>
            Implements the operator == (equality).
            See the type documentation for a description of equality semantics.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns><c>true</c> if values are equal to each other, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Corvus.Json.Period.op_Inequality(Corvus.Json.Period,Corvus.Json.Period)">
            <summary>
            Implements the operator != (inequality).
            See the type documentation for a description of equality semantics.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns><c>true</c> if values are not equal to each other, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Corvus.Json.Period.TryParse(System.ReadOnlySpan{System.Char},Corvus.Json.Period@)">
            <summary>
            Parses a string into a Period.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="result">The resulting period.</param>
            <returns><see langword="true"/> if the period could be parsed from the string.</returns>
        </member>
        <member name="M:Corvus.Json.Period.Parse(System.String)">
            <summary>
            Parses a string into a Period.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The resulting period.</returns>
        </member>
        <member name="M:Corvus.Json.Period.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a string into a Period.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The resulting period.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromYears(System.Int32)">
            <summary>
            Creates a period representing the specified number of years.
            </summary>
            <param name="years">The number of years in the new period.</param>
            <returns>A period consisting of the given number of years.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromMonths(System.Int32)">
            <summary>
            Creates a period representing the specified number of months.
            </summary>
            <param name="months">The number of months in the new period.</param>
            <returns>A period consisting of the given number of months.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromWeeks(System.Int32)">
            <summary>
            Creates a period representing the specified number of weeks.
            </summary>
            <param name="weeks">The number of weeks in the new period.</param>
            <returns>A period consisting of the given number of weeks.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromDays(System.Int32)">
            <summary>
            Creates a period representing the specified number of days.
            </summary>
            <param name="days">The number of days in the new period.</param>
            <returns>A period consisting of the given number of days.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromHours(System.Int64)">
            <summary>
            Creates a period representing the specified number of hours.
            </summary>
            <param name="hours">The number of hours in the new period.</param>
            <returns>A period consisting of the given number of hours.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromMinutes(System.Int64)">
            <summary>
            Creates a period representing the specified number of minutes.
            </summary>
            <param name="minutes">The number of minutes in the new period.</param>
            <returns>A period consisting of the given number of minutes.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromSeconds(System.Int64)">
            <summary>
            Creates a period representing the specified number of seconds.
            </summary>
            <param name="seconds">The number of seconds in the new period.</param>
            <returns>A period consisting of the given number of seconds.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromMilliseconds(System.Int64)">
            <summary>
            Creates a period representing the specified number of milliseconds.
            </summary>
            <param name="milliseconds">The number of milliseconds in the new period.</param>
            <returns>A period consisting of the given number of milliseconds.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromTicks(System.Int64)">
            <summary>
            Creates a period representing the specified number of ticks.
            </summary>
            <param name="ticks">The number of ticks in the new period.</param>
            <returns>A period consisting of the given number of ticks.</returns>
        </member>
        <member name="M:Corvus.Json.Period.FromNanoseconds(System.Int64)">
            <summary>
            Creates a period representing the specified number of nanoseconds.
            </summary>
            <param name="nanoseconds">The number of nanoseconds in the new period.</param>
            <returns>A period consisting of the given number of nanoseconds.</returns>
        </member>
        <member name="M:Corvus.Json.Period.Add(Corvus.Json.Period,Corvus.Json.Period)">
            <summary>
            Adds two periods together, by simply adding the values for each property.
            </summary>
            <param name="left">The first period to add.</param>
            <param name="right">The second period to add.</param>
            <returns>The sum of the two periods. The units of the result will be the union of those in both
            periods.</returns>
        </member>
        <member name="M:Corvus.Json.Period.CreateComparer(NodaTime.LocalDateTime)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IComparer`1"/> for periods, using the given "base" local date/time.
            </summary>
            <remarks>
            Certain periods can't naturally be compared without more context - how "one month" compares to
            "30 days" depends on where you start. In order to compare two periods, the returned comparer
            effectively adds both periods to the "base" specified by <paramref name="baseDateTime"/> and compares
            the results. In some cases this arithmetic isn't actually required - when two periods can be
            converted to durations, the comparer uses that conversion for efficiency.
            </remarks>
            <param name="baseDateTime">The base local date/time to use for comparisons.</param>
            <returns>The new comparer.</returns>
        </member>
        <member name="M:Corvus.Json.Period.Subtract(Corvus.Json.Period,Corvus.Json.Period)">
            <summary>
            Subtracts one period from another, by simply subtracting each property value.
            </summary>
            <param name="minuend">The period to subtract the second operand from.</param>
            <param name="subtrahend">The period to subtract the first operand from.</param>
            <returns>The result of subtracting all the values in the second operand from the values in the first. The
            units of the result will be the union of both periods, even if the subtraction caused some properties to
            become zero (so "2 weeks, 1 days" minus "2 weeks" is "zero weeks, 1 days", not "1 days").</returns>
        </member>
        <member name="M:Corvus.Json.Period.DaysBetween(NodaTime.LocalDate,NodaTime.LocalDate)">
            <summary>
            Returns the number of days between two <see cref="T:NodaTime.LocalDate"/> objects.
            </summary>
            <param name="start">Start date/time.</param>
            <param name="end">End date/time.</param>
            <exception cref="T:System.ArgumentException"><paramref name="start"/> and <paramref name="end"/> use different calendars.</exception>
            <returns>The number of days between the given dates.</returns>
        </member>
        <member name="M:Corvus.Json.Period.ToDuration">
            <summary>
            For periods that do not contain a non-zero number of years or months, returns a duration for this period
            assuming a standard 7-day week, 24-hour day, 60-minute hour etc.
            </summary>
            <exception cref="T:System.InvalidOperationException">The month or year property in the period is non-zero.</exception>
            <exception cref="T:System.OverflowException">The period doesn't have years or months, but the calculation
            overflows the bounds of <see cref="T:NodaTime.Duration"/>. In some cases this may occur even though the theoretical
            result would be valid due to balancing positive and negative values, but for simplicity there is
            no attempt to work around this - in realistic periods, it shouldn't be a problem.</exception>
            <returns>The duration of the period.</returns>
        </member>
        <member name="M:Corvus.Json.Period.Normalize">
            <summary>
            Returns a normalized version of this period, such that equivalent (but potentially non-equal) periods are
            changed to the same representation.
            </summary>
            <remarks>
            Months and years are unchanged
            (as they can vary in length), but weeks are multiplied by 7 and added to the
            Days property, and all time properties are normalized to their natural range.
            Subsecond values are normalized to millisecond and "nanosecond within millisecond" values.
            So for example, a period of 25 hours becomes a period of 1 day
            and 1 hour. A period of 1,500,750,000 nanoseconds becomes 1 second, 500 milliseconds and
            750,000 nanoseconds. Aside from months and years, either all the properties
            end up positive, or they all end up negative. "Week" and "tick" units in the returned period are always 0.
            </remarks>
            <exception cref="T:System.OverflowException">The period doesn't have years or months, but it contains more than
            <see cref="F:System.Int64.MaxValue"/> nanoseconds when the combined weeks/days/time portions are considered. This is
            over 292 years, so unlikely to be a problem in normal usage.
            In some cases this may occur even though the theoretical result would be valid due to balancing positive and
            negative values, but for simplicity there is no attempt to work around this.</exception>
            <returns>The normalized period.</returns>
            <seealso cref="P:Corvus.Json.Period.NormalizingEqualityComparer"/>
        </member>
        <member name="M:Corvus.Json.Period.ToString">
            <summary>
            Returns this string formatted according to the ISO8601 duration specification used by JSON schema.
            </summary>
            <returns>A formatted representation of this period.</returns>
        </member>
        <member name="M:Corvus.Json.Period.Equals(System.Object)">
            <summary>
            Compares the given object for equality with this one, as per <see cref="M:Corvus.Json.Period.Equals(Corvus.Json.Period)"/>.
            See the type documentation for a description of equality semantics.
            </summary>
            <param name="other">The value to compare this one with.</param>
            <returns>true if the other object is a period equal to this one, consistent with <see cref="M:Corvus.Json.Period.Equals(Corvus.Json.Period)"/>.</returns>
        </member>
        <member name="M:Corvus.Json.Period.GetHashCode">
            <summary>
            Returns the hash code for this period, consistent with <see cref="M:Corvus.Json.Period.Equals(Corvus.Json.Period)"/>.
            See the type documentation for a description of equality semantics.
            </summary>
            <returns>The hash code for this period.</returns>
        </member>
        <member name="M:Corvus.Json.Period.Equals(Corvus.Json.Period)">
            <summary>
            Compares the given period for equality with this one.
            See the type documentation for a description of equality semantics.
            </summary>
            <param name="other">The period to compare this one with.</param>
            <returns>True if this period has the same values for the same properties as the one specified.</returns>
        </member>
        <member name="M:Corvus.Json.Period.Equals(NodaTime.Period)">
            <summary>
            Compares the given period for equality with this one.
            See the type documentation for a description of equality semantics.
            </summary>
            <param name="other">The period to compare this one with.</param>
            <returns>True if this period has the same values for the same properties as the one specified.</returns>
        </member>
        <member name="M:Corvus.Json.Period.PeriodParser(System.ReadOnlySpan{System.Char},Corvus.Json.PeriodBuilder@)">
            <summary>
            A parser for a json period.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="builder">The resulting period builder.</param>
            <returns>A period builder parsed from the read only span.</returns>
        </member>
        <member name="T:Corvus.Json.Period.NormalizingPeriodEqualityComparer">
            <summary>
            Equality comparer which simply normalizes periods before comparing them.
            </summary>
        </member>
        <member name="T:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1">
            <summary>
            An enumerator for a JSON object as a KeyValuePair (for <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> implementations).
            </summary>
            <typeparam name="T">The type of the properties in the object.</typeparam>
        </member>
        <member name="M:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.#ctor(System.Text.Json.JsonElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1"/> struct.
            </summary>
            <param name="jsonElement">The Json Element to enumerate.</param>
        </member>
        <member name="M:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.#ctor(System.Collections.Immutable.ImmutableList{Corvus.Json.JsonObjectProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1"/> struct.
            </summary>
            <param name="dictionary">The property dictionary to enumerate.</param>
        </member>
        <member name="P:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.GetEnumerator">
            <summary>
            Gets a new enumerator instance.
            </summary>
            <returns>A new enumerator instance.</returns>
        </member>
        <member name="M:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Corvus#Json#JsonPropertyName,T}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.ReadOnlyDictionaryJsonObjectEnumerator`1.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1">
            <summary>
            Implements a parameter provider over a JsonAny.
            </summary>
            <typeparam name="TPayload">The type of the payload.</typeparam>
        </member>
        <member name="P:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1.Instance">
            <summary>
            Gets the instance of the <see cref="T:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1.ProcessVariable(Corvus.UriTemplates.TemplateParameterProviders.VariableSpecification@,`0@,System.Buffers.IBufferWriter{System.Char})">
            <summary>
            Process the given variable.
            </summary>
            <param name="variableSpecification">The specification for the variable.</param>
            <param name="parameters">The parameters.</param>
            <param name="output">The output to which to format the parameter.</param>
            <returns>
                <see cref="F:Corvus.UriTemplates.TemplateParameterProviders.VariableProcessingState.Success"/> if the variable was successfully processed,
                <see cref="F:Corvus.UriTemplates.TemplateParameterProviders.VariableProcessingState.NotProcessed"/> if the parameter was not present, or
                <see cref="F:Corvus.UriTemplates.TemplateParameterProviders.VariableProcessingState.Failure"/> if the parameter could not be processed because it was incompatible with the variable specification in the template.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1.AppendArray``1(System.Buffers.IBufferWriter{System.Char},Corvus.UriTemplates.TemplateParameterProviders.OperatorInfo@,System.Boolean,System.ReadOnlySpan{System.Char},``0@)">
            <summary>
            Append an array to the result.
            </summary>
            <param name="output">The output buffer.</param>
            <param name="op">The operator info.</param>
            <param name="explode">Whether to explode the array.</param>
            <param name="variable">The variable name.</param>
            <param name="array">The array to add.</param>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1.AppendObject``1(System.Buffers.IBufferWriter{System.Char},Corvus.UriTemplates.TemplateParameterProviders.OperatorInfo@,System.Boolean,``0@)">
            <summary>
            Append an object to the output.
            </summary>
            <param name="output">The output buffer.</param>
            <param name="op">The operator info.</param>
            <param name="explode">Whether to explode the object.</param>
            <param name="instance">The object instance to append.</param>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1.WriteEncodedPropertyName(System.ReadOnlySpan{System.Char},Corvus.Json.UriTemplates.JsonTemplateParameterProvider{`0}.WriteEncodedPropertyNameState@,System.Boolean@)">
            <summary>
            Encoded and write the property name to the output.
            </summary>
            <param name="name">The name to write.</param>
            <param name="state">The state for the writer.</param>
            <param name="result">Whether the value was written successfully.</param>
            <returns><see langword="true"/> if the value was written successfully.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1.AppendName(System.Buffers.IBufferWriter{System.Char},System.ReadOnlySpan{System.Char},System.String,System.Boolean)">
            <summary>
            Append a variable to the result.
            </summary>
            <param name="output">The output buffer to which the URI template is written.</param>
            <param name="variable">The variable name.</param>
            <param name="ifEmpty">The string to apply if the value is empty.</param>
            <param name="valueIsEmpty">True if the value is empty.</param>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1.AppendNameAndStringValue``1(System.Buffers.IBufferWriter{System.Char},System.ReadOnlySpan{System.Char},System.String,``0,System.Int32,System.Boolean)">
            <summary>
            Appends a value to the result.
            </summary>
            <param name="output">The output buffer to which to write the value.</param>
            <param name="variable">The variable name.</param>
            <param name="ifEmpty">The string to add if the value is empty.</param>
            <param name="value">The value to append.</param>
            <param name="prefixLength">The prefix length.</param>
            <param name="allowReserved">Whether to allow reserved characters.</param>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1.AppendValue(System.Buffers.IBufferWriter{System.Char},Corvus.Json.JsonAny,System.Int32,System.Boolean)">
            <summary>
            Appends a value to the result.
            </summary>
            <param name="output">The output buffer to which to write the value.</param>
            <param name="value">The value to append.</param>
            <param name="prefixLength">The prefix length.</param>
            <param name="allowReserved">Whether to allow reserved characters.</param>
        </member>
        <member name="T:Corvus.Json.UriTemplates.JsonUriTemplateResolver">
            <summary>
            A wrapper around <see cref="T:Corvus.UriTemplates.UriTemplateResolver`2"/>
            for a <see cref="T:Corvus.Json.UriTemplates.JsonTemplateParameterProvider`1"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonUriTemplateResolver.TryResolveResult``2(System.ReadOnlySpan{System.Char},System.Boolean,``1@,Corvus.UriTemplates.ParameterNameCallback{``0},Corvus.UriTemplates.ResolvedUriTemplateCallback{``0},``0@)">
            <summary>
            Resolve the template into an output result.
            </summary>
            <typeparam name="TState">The type of the state passed to the callback.</typeparam>
            <typeparam name="T">The type of the Json parameters.</typeparam>
            <param name="template">The template to resolve.</param>
            <param name="resolvePartially">If <see langword="true"/> then partially resolve the result.</param>
            <param name="parameters">The parameters to apply to the template.</param>
            <param name="parameterNameCallback">An optional callback which is provided each parameter name as they are discovered.</param>
            <param name="callback">The callback which is provided with the resolved template.</param>
            <param name="state">The state passed to the callback(s).</param>
            <returns><see langword="true"/> if the URI matched the template, and the parameters were resolved successfully.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonUriTemplateResolver.TryResolveResult``2(System.ReadOnlySpan{System.Char},System.Boolean,``1@,Corvus.UriTemplates.ResolvedUriTemplateCallback{``0},``0@)">
            <summary>
            Resolve the template into an output result.
            </summary>
            <typeparam name="TState">The type of the state passed to the callback.</typeparam>
            <typeparam name="T">The type of the Json parameters.</typeparam>
            <param name="template">The template to resolve.</param>
            <param name="resolvePartially">If <see langword="true"/> then partially resolve the result.</param>
            <param name="parameters">The parameters to apply to the template.</param>
            <param name="callback">The callback which is provided with the resolved template.</param>
            <param name="state">The state passed to the callback(s).</param>
            <returns><see langword="true"/> if the URI matched the template, and the parameters were resolved successfully.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonUriTemplateResolver.TryResolveResult``1(System.ReadOnlySpan{System.Char},System.Buffers.IBufferWriter{System.Char},System.Boolean,``0@)">
            <summary>
            Resolve the template into an output result.
            </summary>
            <typeparam name="T">The type of the Json parameters.</typeparam>
            <param name="template">The template to resolve.</param>
            <param name="output">The output buffer into which to resolve the template.</param>
            <param name="resolvePartially">If <see langword="true"/> then partially resolve the result.</param>
            <param name="parameters">The parameters to apply to the template.</param>
            <returns><see langword="true"/> if the URI matched the template, and the parameters were resolved successfully.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.JsonUriTemplateResolver.TryGetParameterNames``1(System.ReadOnlySpan{System.Char},Corvus.UriTemplates.ParameterNameCallback{``0},``0@)">
            <summary>
            Get the parameter names from the template.
            </summary>
            <typeparam name="TState">The type of the state for the callback.</typeparam>
            <param name="template">The template for the callback.</param>
            <param name="callback">The callback provided with the parameter names.</param>
            <param name="state">The state for the callback.</param>
            <returns><see langword="true"/> if the URI matched the template, and the parameters were resolved successfully.</returns>
        </member>
        <member name="T:Corvus.Json.UriTemplates.UriExtensions">
            <summary>
            Uri extensions for URI templates.
            </summary>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriExtensions.MakeTemplate(System.Uri)">
            <summary>
            Make a template from a URI and its query string parameters.
            </summary>
            <param name="uri">The uri from which to make a template.</param>
            <returns>The UriTemplate built from the URI and its query string parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriExtensions.MakeTemplate(System.Uri,System.ValueTuple{System.String,Corvus.Json.JsonAny}[])">
            <summary>
            Make a template from a URI and a given set of parameters to use as a query string.
            </summary>
            <param name="uri">The uri from which to make a template.</param>
            <param name="parameters">The parameters to apply in a query string.</param>
            <returns>The URI template with the corresponding query string parameters.</returns>
            <remarks>It is expected the parameters for the query string have already been exploded if appropriate.</remarks>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriExtensions.MakeTemplate(System.Uri,System.Collections.Immutable.ImmutableDictionary{System.String,Corvus.Json.JsonAny})">
            <summary>
            Make a template from a URI and a given set of parameters to use as a query string.
            </summary>
            <param name="uri">The uri from which to make a template.</param>
            <param name="parameters">The parameters to apply in a query string.</param>
            <returns>The URI template with the corresponding query string parameters.</returns>
            <remarks>It is expected the parameters for the query string have already been exploded if appropriate.</remarks>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriExtensions.GetQueryStringParameters(System.Uri)">
            <summary>
            Gets the query string parameters from the given URI.
            </summary>
            <param name="target">The target URI.</param>
            <returns>A dictionary of query string parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriExtensions.ParseUriValue(System.String)">
            <summary>
            Parses a naked value from a URI string.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>A <see cref="T:Corvus.Json.JsonAny"/> instance representing the value.</returns>
            <remarks>Note that this only applies to <c>null</c>, <c>bool</c>, <c>number</c> and <c>string</c> types.</remarks>
        </member>
        <member name="T:Corvus.Json.UriTemplates.UriTemplate">
            <summary>
            Implements a URI template conforming to http://tools.ietf.org/html/rfc6570, built over <see cref="T:Corvus.Json.JsonAny"/>.
            </summary>
            <remarks>
            <para>
            This is modelled on the Tavis.UriTemplate API, and offers mechanisms for parsing parameters from a URI according to a URI template
            and also resolving a template to a URI based on a provided set of parameters.
            </para>
            <para>
            Note that this is not a low-allocation type. In particular, processing a URI template to create the template extraction
            parser is an expensive operation. If you do not need this functionality for a particular instance, you should ensure that you
            set the <c>createParameterParser</c> constructor parameter to <see langword="false"/>.
            </para>
            <para>
            For low-allocation scenarios you should use the low-level <see cref="T:Corvus.UriTemplates.UriTemplateParserFactory"/> to create and cache an <see cref="T:Corvus.UriTemplates.IUriTemplateParser"/> instance if you are doing parameter extraction.
            or use a <see cref="T:Corvus.UriTemplates.UriTemplateResolver`2"/> if you are resolving a template from parameters.
            </para>
            <para>
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,Corvus.Json.JsonAny})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.UriTemplates.UriTemplate"/> struct.
            </summary>
            <param name="template">The template.</param>
            <param name="resolvePartially">Whether to partially resolve the template.</param>
            <param name="caseInsensitiveParameterNames">Whether to use case insensitive parameter names.</param>
            <param name="createParameterParser">Whether to pre-create the parameter extraction regex.</param>
            <param name="parameters">The parameters to use.</param>
            <remarks>
            <para>
            If you know this URI template is to be used purely for URI creation, not parameter extraction,
            then you should set <paramref name="createParameterParser"/> to <c>false</c>.
            You will avoid creating and compiling a regular expression for parameter extraction.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.#ctor(System.String,System.Boolean,System.Collections.Immutable.ImmutableDictionary{System.String,Corvus.Json.JsonAny},Corvus.UriTemplates.IUriTemplateParser)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.UriTemplates.UriTemplate"/> struct.
            </summary>
            <param name="template">The template.</param>
            <param name="resolvePartially">Whether to partially resolve the template.</param>
            <param name="parameters">The parameters dictionary.</param>
            <param name="parameterRegex">The parameter regular expression.</param>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.TryGetParameters(System.Uri,System.Collections.Immutable.ImmutableDictionary{System.String,Corvus.Json.JsonAny}@)">
            <summary>
            Gets the parameters from the given URI.
            </summary>
            <param name="uri">The URI from which to get the parameters.</param>
            <param name="parameters">The parameters decomposed from the Uri.</param>
            <returns>True if the parameters were successfully decomposed, otherwise false.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.TryGetParameters(System.String,System.Collections.Immutable.ImmutableDictionary{System.String,Corvus.Json.JsonAny}@)">
            <summary>
            Gets the parameters from the given URI.
            </summary>
            <param name="uri">The URI from which to get the parameters.</param>
            <param name="parameters">The parameters decomposed from the Uri.</param>
            <returns>True if the parameters were successfully decomposed, otherwise false.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameters``1(``0,System.Text.Json.JsonWriterOptions)">
            <summary>
            Sets multiple parameters on the URI template.
            </summary>
            <typeparam name="T">The type of the object to use to set parameters.</typeparam>
            <param name="parameters">The parameters to set.</param>
            <param name="options">The (optional) serialization options.</param>
            <returns>An instance of the template with the updated parameters.</returns>
            <remarks>This serializes the object, and treats each property on the resulting <see cref="T:Corvus.Json.JsonObject"/> as a named parameter value.</remarks>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameters(Corvus.Json.JsonAny@)">
            <summary>
            Sets multiple parameters on the URI template.
            </summary>
            <param name="parameters">The parameters to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
            <remarks>This treats each property on the <see cref="T:Corvus.Json.JsonObject"/> as a named parameter value.</remarks>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameters(Corvus.Json.JsonObject@)">
            <summary>
            Sets multiple parameters on the URI template.
            </summary>
            <param name="parameters">The parameters to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
            <remarks>This treats each property on the <see cref="T:Corvus.Json.JsonObject"/> as a named parameter value.</remarks>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameters(System.ValueTuple{System.String,Corvus.Json.JsonAny}[])">
            <summary>
            Sets multiple parameters on the URI template.
            </summary>
            <param name="parameters">The parameters to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameter``1(System.String,``0)">
            <summary>
            Sets the named parameter to the given value.
            </summary>
            <typeparam name="T">The type of the value to set.</typeparam>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.ClearParameter(System.String)">
            <summary>
            Removes the given parameter from the template.
            </summary>
            <param name="name">The name of the parameter to remove.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameter(System.String,System.String)">
            <summary>
            Sets the named parameter to the given value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameter(System.String,System.Double)">
            <summary>
            Sets the named parameter to the given value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameter(System.String,System.Int32)">
            <summary>
            Sets the named parameter to the given value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameter(System.String,System.Int64)">
            <summary>
            Sets the named parameter to the given value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameter(System.String,System.Boolean)">
            <summary>
            Sets the named parameter to the given value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameter(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the named parameter to the given value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.SetParameter(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the named parameter to the given value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value to set.</param>
            <returns>An instance of the template with the updated parameters.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.GetParameterNames">
            <summary>
            Gets the parameter names in the template.
            </summary>
            <returns>An enumerator for the parameter names.</returns>
        </member>
        <member name="M:Corvus.Json.UriTemplates.UriTemplate.Resolve">
            <summary>
            Resolve the template.
            </summary>
            <returns>The resolved template.</returns>
        </member>
        <member name="T:Corvus.Json.Validate">
            <summary>
            JsonSchema validation errors.
            </summary>
        </member>
        <member name="M:Corvus.Json.Validate.TypeString(System.Text.Json.JsonValueKind,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validate a string type value.
            </summary>
            <param name="valueKind">The actual value kind.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeNumber(System.Text.Json.JsonValueKind,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validate a number type value.
            </summary>
            <param name="valueKind">The actual value kind.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeNull(System.Text.Json.JsonValueKind,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validate a null type value.
            </summary>
            <param name="valueKind">The actual value kind.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUndefined(System.Text.Json.JsonValueKind,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validate an undefined type value.
            </summary>
            <param name="valueKind">The actual value kind.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeInteger``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format integer.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeByte``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format byte.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeSByte``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format sbyte.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeInt16``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format int16.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUInt16``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format uint16.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeInt32``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format int32.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUInt32``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format uint32.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeInt64``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format int64.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUInt64``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format uint64.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeInt128``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format int128.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUInt128``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format uint128.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeHalf``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format half.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeSingle``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format single.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeDouble``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format double.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeDecimal``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format decimal.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUriTemplate``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format uri-template.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeIdnEmail``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format idn-email.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeIdnHostName``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format idn-hostname.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeHostname``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format hostname.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUuid``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format uuid.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeDuration``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format duration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeEmail``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format email.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeRelativePointer``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format relative-json-pointer.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypePointer``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format json-pointer.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeArray(System.Text.Json.JsonValueKind,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validate an array type value.
            </summary>
            <param name="valueKind">The actual value kind.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeBoolean(System.Text.Json.JsonValueKind,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validate a boolean type value.
            </summary>
            <param name="valueKind">The actual value kind.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeObject(System.Text.Json.JsonValueKind,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validate an object type value.
            </summary>
            <param name="valueKind">The actual value kind.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@,``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enum1">The first enumeration value.</param>
            <param name="enum2">The second enumeration value.</param>
            <param name="enum3">The third enumeration value.</param>
            <param name="enum4">The fourth enumeration value.</param>
            <param name="enum5">The fifth enumeration value.</param>
            <param name="enum6">The sixth enumeration value.</param>
            <param name="enum7">The seventh enumeration value.</param>
            <param name="enum8">The eighth enumeration value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enum1">The first enumeration value.</param>
            <param name="enum2">The second enumeration value.</param>
            <param name="enum3">The third enumeration value.</param>
            <param name="enum4">The fourth enumeration value.</param>
            <param name="enum5">The fifth enumeration value.</param>
            <param name="enum6">The sixth enumeration value.</param>
            <param name="enum7">The seventh enumeration value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enum1">The first enumeration value.</param>
            <param name="enum2">The second enumeration value.</param>
            <param name="enum3">The third enumeration value.</param>
            <param name="enum4">The fourth enumeration value.</param>
            <param name="enum5">The fifth enumeration value.</param>
            <param name="enum6">The sixth enumeration value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enum1">The first enumeration value.</param>
            <param name="enum2">The second enumeration value.</param>
            <param name="enum3">The third enumeration value.</param>
            <param name="enum4">The fourth enumeration value.</param>
            <param name="enum5">The fifth enumeration value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@,``0@,``0@,``0@)">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enum1">The first enumeration value.</param>
            <param name="enum2">The second enumeration value.</param>
            <param name="enum3">The third enumeration value.</param>
            <param name="enum4">The fourth enumeration value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@,``0@,``0@)">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enum1">The first enumeration value.</param>
            <param name="enum2">The second enumeration value.</param>
            <param name="enum3">The third enumeration value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@,``0@)">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enum1">The first enumeration value.</param>
            <param name="enum2">The second enumeration value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@)">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enum1">The first enumeration value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateEnum``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0[])">
            <summary>
            Validate an enumeration.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="enums">The enumeration values.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateConst``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,``0@)">
            <summary>
            Validate a const value.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <param name="constValue">The const value.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateNumber``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@,Corvus.Json.BinaryJsonNumber@)">
            <summary>
            Perform numeric validation on the value.
            </summary>
            <typeparam name="TValue">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The current validation context.</param>
            <param name="level">The validation level.</param>
            <param name="multipleOf">The optional multiple-of validation.</param>
            <param name="maximum">The optional maximum validation.</param>
            <param name="exclusiveMaximum">The optional exclusive maximum validation.</param>
            <param name="minimum">The optional minimum validation.</param>
            <param name="exclusiveMinimum">The optional exclusive minimum validation.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.ValidateString``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Text.RegularExpressions.Regex)">
            <summary>
            Validates a string value.
            </summary>
            <typeparam name="TValue">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The instance to validate.</param>
            <param name="validationContext">The current validation context.</param>
            <param name="level">The validation level.</param>
            <param name="maxLength">The optional maxLength validation.</param>
            <param name="minLength">The optional minLenth validation.</param>
            <param name="pattern">The optional pattern validation.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeContentPre201909``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates a content value.
            </summary>
            <typeparam name="TValue">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The instance to validate.</param>
            <param name="validationContext">The current validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeContent``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,System.Boolean)">
            <summary>
            Validates a content value.
            </summary>
            <typeparam name="TValue">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The instance to validate.</param>
            <param name="validationContext">The current validation context.</param>
            <param name="level">The validation level.</param>
            <param name="alwaysPassAndAnnotateFailuresInContentDecodingChecks">Always pass failures in content decoding, but annotate.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeBase64ContentPre201909``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates a base64Content value.
            </summary>
            <typeparam name="TValue">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The instance to validate.</param>
            <param name="validationContext">The current validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeBase64Content``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,System.Boolean)">
            <summary>
            Validates a base64Content value.
            </summary>
            <typeparam name="TValue">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The instance to validate.</param>
            <param name="validationContext">The current validation context.</param>
            <param name="level">The validation level.</param>
            <param name="alwaysPassAndAnnotateFailuresInContentDecodingChecks">Always pass failures in content decoding, but annotate.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeBase64StringPre201909``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates a base64 value.
            </summary>
            <typeparam name="TValue">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The instance to validate.</param>
            <param name="validationContext">The current validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeBase64String``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel,System.Boolean)">
            <summary>
            Validates a base64 value.
            </summary>
            <typeparam name="TValue">The type of the <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="value">The instance to validate.</param>
            <param name="validationContext">The current validation context.</param>
            <param name="level">The validation level.</param>
            <param name="alwaysPassAndAnnotateFailuresInContentDecodingChecks">Always pass but annotate the nodes on encoding failure.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeRegex``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format regex.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeIriReference``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format iri-reference.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeIri``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format iri.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUri``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format uri.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeUriReference``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format uri-reference.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeTime``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format time.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeDate``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format date.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeIpV6``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format ipv6.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeIpV4``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format ipv4.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.TypeDateTime``1(``0@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationLevel)">
            <summary>
            Validates the format datetime.
            </summary>
            <typeparam name="T">The type of <see cref="T:Corvus.Json.IJsonValue"/> to validate.</typeparam>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="level">The validation level.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.Validate.CreateIpV4Pattern">
            <remarks>
            Pattern:<br/>
            <code>^(?:(?:^|\\.)(?:2(?:5[0-5]|[0-4]\\d)|1?\\d?\\d)){4}$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop exactly 4 times.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '.'.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '5'.<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1' greedily, optionally.<br/>
                        ○ Match a Unicode digit greedily at least 1 and at most 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateZoneIdExpression">
            <remarks>
            Pattern:<br/>
            <code>%.*$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '%'.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateEmailPattern">
            <remarks>
            Pattern:<br/>
            <code>^(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|"(?:[ \\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|IPv6:(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))\\])$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [!#-'*+-/-9=?^-~] greedily at least once.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a character in the set [!#-'*+-/-9=?^-~] atomically at least once.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '"'.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a character in the set [\u0001-\b\v\f\u000E-!#-[]-\u007F].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '\\'.<br/>
                                ○ Match a character in the set [\u0001-\t\v\f\u000E-\u007F].<br/>
                    ○ Match '"'.<br/>
            ○ Match '@'.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Loop greedily at least once.<br/>
                        ○ Match a character in the set [0-9a-z].<br/>
                        ○ Optional (greedy).<br/>
                            ○ Match a character in the set [-0-9a-z] greedily any number of times.<br/>
                            ○ Match a character in the set [0-9a-z].<br/>
                        ○ Match '.'.<br/>
                    ○ Match a character in the set [0-9a-z].<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a character in the set [-0-9a-z] greedily any number of times.<br/>
                        ○ Match a character in the set [0-9a-z].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '['.<br/>
                    ○ 1st capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Loop exactly 3 times.<br/>
                                    ○ 2nd capture group.<br/>
                                        ○ 3rd capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match a sequence of expressions.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ Match a sequence of expressions.<br/>
                                                    ○ Optional (greedy).<br/>
                                                        ○ 4th capture group.<br/>
                                                            ○ Match with 2 alternative expressions.<br/>
                                                                ○ Match a sequence of expressions.<br/>
                                                                    ○ Match '2'.<br/>
                                                                    ○ Match a character in the set [0-4].<br/>
                                                                ○ Match a sequence of expressions.<br/>
                                                                    ○ Match '1' greedily, optionally.<br/>
                                                                    ○ Match a character in the set [0-9].<br/>
                                                    ○ Match a character in the set [0-9].<br/>
                                        ○ Match '.'.<br/>
                                ○ 5th capture group.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Optional (greedy).<br/>
                                                ○ 6th capture group.<br/>
                                                    ○ Match with 2 alternative expressions.<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match '2'.<br/>
                                                            ○ Match a character in the set [0-4].<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match '1' greedily, optionally.<br/>
                                                            ○ Match a character in the set [0-9].<br/>
                                            ○ Match a character in the set [0-9].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "IPv6:".<br/>
                                ○ 7th capture group.<br/>
                                    ○ Match with 12 alternative expressions.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Loop exactly 7 times.<br/>
                                                ○ 8th capture group.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Loop greedily at least 1 and at most 7 times.<br/>
                                                ○ 9th capture group.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Loop greedily at least 1 and at most 6 times.<br/>
                                                ○ 10th capture group.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Match ':'.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Loop greedily at least 1 and at most 5 times.<br/>
                                                ○ 11th capture group.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Loop greedily at least 1 and at most 2 times.<br/>
                                                ○ 12th capture group.<br/>
                                                    ○ Match ':'.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Loop greedily at least 1 and at most 4 times.<br/>
                                                ○ 13th capture group.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Loop greedily at least 1 and at most 3 times.<br/>
                                                ○ 14th capture group.<br/>
                                                    ○ Match ':'.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Loop greedily at least 1 and at most 3 times.<br/>
                                                ○ 15th capture group.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Loop greedily at least 1 and at most 4 times.<br/>
                                                ○ 16th capture group.<br/>
                                                    ○ Match ':'.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Loop greedily at least 1 and at most 2 times.<br/>
                                                ○ 17th capture group.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Loop greedily at least 1 and at most 5 times.<br/>
                                                ○ 18th capture group.<br/>
                                                    ○ Match ':'.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                            ○ 19th capture group.<br/>
                                                ○ Loop greedily at least 1 and at most 6 times.<br/>
                                                    ○ 20th capture group.<br/>
                                                        ○ Match ':'.<br/>
                                                        ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match ':'.<br/>
                                            ○ 21st capture group.<br/>
                                                ○ Match with 2 alternative expressions.<br/>
                                                    ○ Loop greedily at least 1 and at most 7 times.<br/>
                                                        ○ 22nd capture group.<br/>
                                                            ○ Match ':'.<br/>
                                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match the string "fe80:".<br/>
                                            ○ Loop greedily at most 4 times.<br/>
                                                ○ 23rd capture group.<br/>
                                                    ○ Match ':'.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at most 4 times.<br/>
                                            ○ Match '%'.<br/>
                                            ○ Match a character in the set [0-9A-Za-z] atomically at least once.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match the string "::".<br/>
                                            ○ Optional (greedy).<br/>
                                                ○ 24th capture group.<br/>
                                                    ○ Match the string "ffff".<br/>
                                                    ○ Optional (greedy).<br/>
                                                        ○ 25th capture group.<br/>
                                                            ○ Match ':'.<br/>
                                                            ○ Match '0' atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Loop exactly 3 times.<br/>
                                                ○ 26th capture group.<br/>
                                                    ○ 27th capture group.<br/>
                                                        ○ Match with 2 alternative expressions.<br/>
                                                            ○ Match a sequence of expressions.<br/>
                                                                ○ Match the string "25".<br/>
                                                                ○ Match a character in the set [0-5].<br/>
                                                            ○ Match a sequence of expressions.<br/>
                                                                ○ Optional (greedy).<br/>
                                                                    ○ 28th capture group.<br/>
                                                                        ○ Match with 2 alternative expressions.<br/>
                                                                            ○ Match a sequence of expressions.<br/>
                                                                                ○ Match '2'.<br/>
                                                                                ○ Match a character in the set [0-4].<br/>
                                                                            ○ Match a sequence of expressions.<br/>
                                                                                ○ Match '1' greedily, optionally.<br/>
                                                                                ○ Match a character in the set [0-9].<br/>
                                                                ○ Match a character in the set [0-9].<br/>
                                                    ○ Match '.'.<br/>
                                            ○ 29th capture group.<br/>
                                                ○ Match with 2 alternative expressions.<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match the string "25".<br/>
                                                        ○ Match a character in the set [0-5].<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Optional (greedy).<br/>
                                                            ○ 30th capture group.<br/>
                                                                ○ Match with 2 alternative expressions.<br/>
                                                                    ○ Match a sequence of expressions.<br/>
                                                                        ○ Match '2'.<br/>
                                                                        ○ Match a character in the set [0-4].<br/>
                                                                    ○ Match a sequence of expressions.<br/>
                                                                        ○ Match '1' greedily, optionally.<br/>
                                                                        ○ Match a character in the set [0-9].<br/>
                                                        ○ Match a character in the set [0-9].<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Loop greedily at least 1 and at most 4 times.<br/>
                                                ○ 31st capture group.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                    ○ Match ':'.<br/>
                                            ○ Match ':'.<br/>
                                            ○ Loop exactly 3 times.<br/>
                                                ○ 32nd capture group.<br/>
                                                    ○ 33rd capture group.<br/>
                                                        ○ Match with 2 alternative expressions.<br/>
                                                            ○ Match a sequence of expressions.<br/>
                                                                ○ Match the string "25".<br/>
                                                                ○ Match a character in the set [0-5].<br/>
                                                            ○ Match a sequence of expressions.<br/>
                                                                ○ Optional (greedy).<br/>
                                                                    ○ 34th capture group.<br/>
                                                                        ○ Match with 2 alternative expressions.<br/>
                                                                            ○ Match a sequence of expressions.<br/>
                                                                                ○ Match '2'.<br/>
                                                                                ○ Match a character in the set [0-4].<br/>
                                                                            ○ Match a sequence of expressions.<br/>
                                                                                ○ Match '1' greedily, optionally.<br/>
                                                                                ○ Match a character in the set [0-9].<br/>
                                                                ○ Match a character in the set [0-9].<br/>
                                                    ○ Match '.'.<br/>
                                            ○ 35th capture group.<br/>
                                                ○ Match with 2 alternative expressions.<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match the string "25".<br/>
                                                        ○ Match a character in the set [0-5].<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Optional (greedy).<br/>
                                                            ○ 36th capture group.<br/>
                                                                ○ Match with 2 alternative expressions.<br/>
                                                                    ○ Match a sequence of expressions.<br/>
                                                                        ○ Match '2'.<br/>
                                                                        ○ Match a character in the set [0-4].<br/>
                                                                    ○ Match a sequence of expressions.<br/>
                                                                        ○ Match '1' greedily, optionally.<br/>
                                                                        ○ Match a character in the set [0-9].<br/>
                                                        ○ Match a character in the set [0-9].<br/>
                    ○ Match ']'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateDurationPattern">
            <remarks>
            Pattern:<br/>
            <code>^P(?!$)((\\d+(?:\\.\\d+)?Y)?(\\d+(?:\\.\\d+)?M)?|(\\d+(?:\\.\\d+)?W)?)?(\\d+(?:\\.\\d+)?D)?(T(?=\\d)(\\d+(?:\\.\\d+)?H)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?S)?)?$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.ECMAScript</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Zero-width negative lookahead.<br/>
                ○ Match if at the end of the string or if before an ending newline.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Optional (greedy).<br/>
                                ○ 2nd capture group.<br/>
                                    ○ Match a character in the set [0-9] greedily at least once.<br/>
                                    ○ Optional (greedy).<br/>
                                        ○ Match '.'.<br/>
                                        ○ Match a character in the set [0-9] atomically at least once.<br/>
                                    ○ Match a character in the set [Yy].<br/>
                            ○ Optional (greedy).<br/>
                                ○ 3rd capture group.<br/>
                                    ○ Match a character in the set [0-9] greedily at least once.<br/>
                                    ○ Optional (greedy).<br/>
                                        ○ Match '.'.<br/>
                                        ○ Match a character in the set [0-9] atomically at least once.<br/>
                                    ○ Match a character in the set [Mm].<br/>
                        ○ Optional (greedy).<br/>
                            ○ 4th capture group.<br/>
                                ○ Match a character in the set [0-9] greedily at least once.<br/>
                                ○ Optional (greedy).<br/>
                                    ○ Match '.'.<br/>
                                    ○ Match a character in the set [0-9] atomically at least once.<br/>
                                ○ Match a character in the set [Ww].<br/>
            ○ Optional (greedy).<br/>
                ○ 5th capture group.<br/>
                    ○ Match a character in the set [0-9] greedily at least once.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match '.'.<br/>
                        ○ Match a character in the set [0-9] atomically at least once.<br/>
                    ○ Match a character in the set [Dd].<br/>
            ○ Optional (greedy).<br/>
                ○ 6th capture group.<br/>
                    ○ Match a character in the set [Tt].<br/>
                    ○ Zero-width positive lookahead.<br/>
                        ○ Match a character in the set [0-9].<br/>
                    ○ Optional (greedy).<br/>
                        ○ 7th capture group.<br/>
                            ○ Match a character in the set [0-9] greedily at least once.<br/>
                            ○ Optional (greedy).<br/>
                                ○ Match '.'.<br/>
                                ○ Match a character in the set [0-9] atomically at least once.<br/>
                            ○ Match a character in the set [Hh].<br/>
                    ○ Optional (greedy).<br/>
                        ○ 8th capture group.<br/>
                            ○ Match a character in the set [0-9] greedily at least once.<br/>
                            ○ Optional (greedy).<br/>
                                ○ Match '.'.<br/>
                                ○ Match a character in the set [0-9] atomically at least once.<br/>
                            ○ Match a character in the set [Mm].<br/>
                    ○ Optional (greedy).<br/>
                        ○ 9th capture group.<br/>
                            ○ Match a character in the set [0-9] greedily at least once.<br/>
                            ○ Optional (greedy).<br/>
                                ○ Match '.'.<br/>
                                ○ Match a character in the set [0-9] atomically at least once.<br/>
                            ○ Match a character in the set [Ss].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateHostnamePattern">
            <remarks>
            Pattern:<br/>
            <code>^(?=.{1,255}$)((?!_)\\w)((((?!_)\\w)|\\b-){0,61}((?!_)\\w))?(\\.((?!_)\\w)((((?!_)\\w)|\\b-){0,61}((?!_)\\w))?)*\\.?$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match a character other than '\n' greedily at least 1 and at most 255 times.<br/>
                ○ Match if at the end of the string or if before an ending newline.<br/>
            ○ 1st capture group.<br/>
                ○ Zero-width negative lookahead.<br/>
                    ○ Match '_'.<br/>
                ○ Match a word character.<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Loop greedily at most 61 times.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ 4th capture group.<br/>
                                    ○ Zero-width negative lookahead.<br/>
                                        ○ Match '_'.<br/>
                                    ○ Match a word character.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match if at a word boundary.<br/>
                                    ○ Match '-'.<br/>
                    ○ 5th capture group.<br/>
                        ○ Zero-width negative lookahead.<br/>
                            ○ Match '_'.<br/>
                        ○ Match a word character.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 6th capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ 7th capture group.<br/>
                        ○ Zero-width negative lookahead.<br/>
                            ○ Match '_'.<br/>
                        ○ Match a word character.<br/>
                    ○ Optional (greedy).<br/>
                        ○ 8th capture group.<br/>
                            ○ Loop greedily at most 61 times.<br/>
                                ○ 9th capture group.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ 10th capture group.<br/>
                                            ○ Zero-width negative lookahead.<br/>
                                                ○ Match '_'.<br/>
                                            ○ Match a word character.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match if at a word boundary.<br/>
                                            ○ Match '-'.<br/>
                            ○ 11th capture group.<br/>
                                ○ Zero-width negative lookahead.<br/>
                                    ○ Match '_'.<br/>
                                ○ Match a word character.<br/>
            ○ Match '.' atomically, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateInvalidIdnHostNamePattern">
            <remarks>
            Pattern:<br/>
            <code>(^[\\p{Mn}\\p{Mc}\\p{Me}\\u302E\\u00b7])|.*\\u302E.*|.*[^l]\\u00b7.*|.*\\u00b7[^l].*|.*\\u00b7$|\\u0374$|\\u0375$|\\u0374[^\\p{IsGreekandCoptic}]|\\u0375[^\\p{IsGreekandCoptic}]|^\\u05F3|[^\\p{IsHebrew}]\\u05f3|^\\u05f4|[^\\p{IsHebrew}]\\u05f4|[\\u0660-\\u0669][\\u06F0-\\u06F9]|[\\u06F0-\\u06F9][\\u0660-\\u0669]|^\\u200D|[^\\uA953\\u094d\\u0acd\\u0c4d\\u0d3b\\u09cd\\u0a4d\\u0b4d\\u0bcd\\u0ccd\\u0d4d\\u1039\\u0d3c\\u0eba\\ua8f3\\ua8f4]\\u200D|^\\u30fb$|[^\\p{IsHiragana}\\p{IsKatakana}\\p{IsCJKUnifiedIdeographs}]\\u30fb|\\u30fb[^\\p{IsHiragana}\\p{IsKatakana}\\p{IsCJKUnifiedIdeographs}]|[\\u0640\\u07fa\\u3031\\u3032\\u3033\\u3034\\u3035\\u302e\\u302f\\u303b]|..--</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 22 alternative expressions, atomically.<br/>
                ○ 1st capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [\u00B7\u302E\p{Mn}\p{Mc}\p{Me}].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character other than '\n' greedily any number of times.<br/>
                    ○ Match '〮'.<br/>
                    ○ Match a character other than '\n' atomically any number of times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character other than '\n' greedily any number of times.<br/>
                    ○ Match any character other than 'l'.<br/>
                    ○ Match '·'.<br/>
                    ○ Match a character other than '\n' atomically any number of times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character other than '\n' greedily any number of times.<br/>
                    ○ Match '·'.<br/>
                    ○ Match any character other than 'l'.<br/>
                    ○ Match a character other than '\n' atomically any number of times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character other than '\n' greedily any number of times.<br/>
                    ○ Match '·'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match 'ʹ'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match 'ʹ'.<br/>
                    ○ Match a character in the set [^\u0370-\u03FF].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '͵'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '͵'.<br/>
                    ○ Match a character in the set [^\u0370-\u03FF].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '׳'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [^\u0590-\u05FF].<br/>
                    ○ Match '׳'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '״'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [^\u0590-\u05FF].<br/>
                    ○ Match '״'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [\u0660-\u0669].<br/>
                    ○ Match a character in the set [\u06F0-\u06F9].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [\u06F0-\u06F9].<br/>
                    ○ Match a character in the set [\u0660-\u0669].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '‍'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [^\u094D\u09CD\u0A4D\u0ACD\u0B4D\u0BCD\u0C4D\u0CCD\u0D3B\u0D3C\u0D4D\u0EBA\u1039\uA8F3\uA8F4\uA953].<br/>
                    ○ Match '‍'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '・'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [^\u3040-\u30FF\u4E00-\u9FFF].<br/>
                    ○ Match '・'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '・'.<br/>
                    ○ Match a character in the set [^\u3040-\u30FF\u4E00-\u9FFF].<br/>
                ○ Match a character in the set [\u0640\u07FA\u302E\u302F\u3031-\u3035\u303B].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character other than '\n' exactly 2 times.<br/>
                    ○ Match the string "--".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateUriTemplatePattern">
            <remarks>
            Pattern:<br/>
            <code>^([^\\x00-\\x20\\x7f"'%&lt;&gt;\\\\^`{|}]|%[0-9A-Fa-f]{2}|{[+#./;?&amp;=,!@|]?((\\w|%[0-9A-Fa-f]{2})(\\.?(\\w|%[0-9A-Fa-f]{2}))*(:[1-9]\\d{0,3}|\\*)?)(,((\\w|%[0-9A-Fa-f]{2})(\\.?(\\w|%[0-9A-Fa-f]{2}))*(:[1-9]\\d{0,3}|\\*)?))*})*$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 1st capture group.<br/>
                    ○ Match with 3 alternative expressions.<br/>
                        ○ Match a character in the set [^\0- "%'&lt;&gt;\\^`{-}\u007F].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '%'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '{'.<br/>
                            ○ Match a character in the set [!#&amp;+,./;=?@|] atomically, optionally.<br/>
                            ○ 2nd capture group.<br/>
                                ○ 3rd capture group.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ Match a word character.<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match '%'.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                ○ Loop greedily any number of times.<br/>
                                    ○ 4th capture group.<br/>
                                        ○ Match '.' atomically, optionally.<br/>
                                        ○ 5th capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match a word character.<br/>
                                                ○ Match a sequence of expressions.<br/>
                                                    ○ Match '%'.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                ○ Optional (greedy).<br/>
                                    ○ 6th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match ':'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                                ○ Match a Unicode digit greedily at most 3 times.<br/>
                                            ○ Match '*'.<br/>
                            ○ Loop greedily any number of times.<br/>
                                ○ 7th capture group.<br/>
                                    ○ Match ','.<br/>
                                    ○ 8th capture group.<br/>
                                        ○ 9th capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match a word character.<br/>
                                                ○ Match a sequence of expressions.<br/>
                                                    ○ Match '%'.<br/>
                                                    ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                        ○ Loop greedily any number of times.<br/>
                                            ○ 10th capture group.<br/>
                                                ○ Match '.' atomically, optionally.<br/>
                                                ○ 11th capture group.<br/>
                                                    ○ Match with 2 alternative expressions.<br/>
                                                        ○ Match a word character.<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match '%'.<br/>
                                                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                        ○ Optional (greedy).<br/>
                                            ○ 12th capture group.<br/>
                                                ○ Match with 2 alternative expressions.<br/>
                                                    ○ Match a sequence of expressions.<br/>
                                                        ○ Match ':'.<br/>
                                                        ○ Match a character in the set [1-9].<br/>
                                                        ○ Match a Unicode digit greedily at most 3 times.<br/>
                                                    ○ Match '*'.<br/>
                            ○ Match '}'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateUuidTemplatePattern">
            <remarks>
            Pattern:<br/>
            <code>[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9A-Fa-f] exactly 8 times.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 4 times.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 4 times.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 4 times.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 12 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateJsonPointerPattern">
            <remarks>
            Pattern:<br/>
            <code>^((/(([^/~])|(~[01]))*))*$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match '/'.<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ 3rd capture group.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ 4th capture group.<br/>
                                        ○ Match a character in the set [^/~].<br/>
                                    ○ 5th capture group.<br/>
                                        ○ Match '~'.<br/>
                                        ○ Match a character in the set [01].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateJsonRelativePointerPattern">
            <remarks>
            Pattern:<br/>
            <code>^(0|[1-9][0-9]*)(#|(/(/|[^/~]|(~[01]))*))?$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match '0'.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a character in the set [0-9] greedily any number of times.<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match '#'.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match '/'.<br/>
                            ○ Loop greedily any number of times.<br/>
                                ○ 4th capture group.<br/>
                                    ○ Match with 3 alternative expressions.<br/>
                                        ○ Match '/'.<br/>
                                        ○ Match a character in the set [^/~].<br/>
                                        ○ 5th capture group.<br/>
                                            ○ Match '~'.<br/>
                                            ○ Match a character in the set [01].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateIdnEmailReplacePattern">
            <remarks>
            Pattern:<br/>
            <code>(@)(.+)$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match '@'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a character other than '\n' greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.Validate.CreateIdnEmailMatchPattern">
            <remarks>
            Pattern:<br/>
            <code>^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [^@\s] atomically at least once.<br/>
            ○ Match '@'.<br/>
            ○ Match a character in the set [^@\s] greedily at least once.<br/>
            ○ Match '.'.<br/>
            ○ Match a character in the set [^@\s] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Corvus.Json.ValidationContext">
            <summary>
            The current validation context.
            </summary>
        </member>
        <member name="F:Corvus.Json.ValidationContext.ValidContext">
            <summary>
            Gets a valid context.
            </summary>
        </member>
        <member name="F:Corvus.Json.ValidationContext.InvalidContext">
            <summary>
            Gets an invalid context.
            </summary>
        </member>
        <member name="M:Corvus.Json.ValidationContext.#ctor(System.Boolean,System.Collections.Immutable.ImmutableArray{System.UInt64}@,System.Collections.Immutable.ImmutableArray{System.UInt64}@,System.Collections.Immutable.ImmutableArray{System.UInt64}@,System.Collections.Immutable.ImmutableArray{System.UInt64}@,System.Collections.Immutable.ImmutableStack{System.ValueTuple{Corvus.Json.JsonReference,Corvus.Json.JsonReference,Corvus.Json.JsonReference}}@,System.Collections.Immutable.ImmutableArray{Corvus.Json.ValidationResult}@,Corvus.Json.ValidationContext.UsingFeatures)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.ValidationContext"/> struct.
            </summary>
            <param name="isValid">Whether this context is valid.</param>
            <param name="localEvaluatedItemIndex">The set of locally evaluated item indices.</param>
            <param name="localEvaluatedProperties">The hash set of locally evaluated properties in this location.</param>
            <param name="appliedEvaluatedItemIndex">The maximum evaluated item index from applied schema.</param>
            <param name="appliedEvaluatedProperties">The hash set of evaluated properties from applied schema.</param>
            <param name="locationStack">The current location stack.</param>
            <param name="results">The validation results.</param>
            <param name="usingFeatures">Indicates which features are being used.</param>
        </member>
        <member name="P:Corvus.Json.ValidationContext.IsValid">
            <summary>
            Gets a value indicating whether the context is valid.
            </summary>
        </member>
        <member name="P:Corvus.Json.ValidationContext.Results">
            <summary>
            Gets the validation results.
            </summary>
        </member>
        <member name="M:Corvus.Json.ValidationContext.UsingResults">
            <summary>
            Use the results set.
            </summary>
            <returns>The validation context enabled with the keyword stack.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.UsingStack">
            <summary>
            Use the keyword stack.
            </summary>
            <returns>The validation context enabled with the keyword stack.</returns>
            <remarks>If you enable the keyword stack, this automatically enables results.</remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.UsingEvaluatedProperties">
            <summary>
            Use the evaluated properties set.
            </summary>
            <returns>The validation context enabled with evaluated properties.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.UsingEvaluatedItems">
            <summary>
            Use the evaluated properties set.
            </summary>
            <returns>The validation context enabled with evaluated properties.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.HasEvaluatedLocalProperty(System.Int32)">
            <summary>
            Determines if a property has been locally evaluated.
            </summary>
            <param name="propertyIndex">The index of the property.</param>
            <returns><c>True</c> if the property has been evaluated locally.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.HasEvaluatedLocalItemIndex(System.Int32)">
            <summary>
            Determines if an item has been locally evaluated.
            </summary>
            <param name="itemIndex">The index of the item.</param>
            <returns><c>True</c> if the item has been evaluated locally.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.HasEvaluatedLocalOrAppliedProperty(System.Int32)">
            <summary>
            Determines if a property has been evaluated locally or by applied schema.
            </summary>
            <param name="propertyIndex">The index of the property.</param>
            <returns><c>True</c> if the property has been evaluated either locally or by applied schema.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.HasEvaluatedLocalOrAppliedItemIndex(System.Int32)">
            <summary>
            Determines if an item has been evaluated locally or by applied schema.
            </summary>
            <param name="itemIndex">The index of the item.</param>
            <returns><c>True</c> if an item has been evaluated either locally or by applied schema.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.WithResult(System.Boolean,System.String)">
            <summary>
            Adds a result to the validation context.
            </summary>
            <param name="isValid">Whether the result is valid.</param>
            <param name="message">The validation message.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.WithLocalItemIndex(System.Int32)">
            <summary>
            Adds an item index to the evaluated items array.
            </summary>
            <param name="index">The index to add.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.WithLocalProperty(System.Int32)">
            <summary>
            Adds an property name to the evaluated properties array.
            </summary>
            <param name="propertyIndex">The property index to add.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)">
            <summary>
            Merges the local and applied evaluated entities from a child context into the applied evaluated entities in a parent context.
            </summary>
            <param name="childContext">The evaluated child context.</param>
            <param name="includeResults">Also merge the results into the parent.</param>
            <returns>The updated validation context.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.PushSchemaLocation(System.String)">
            <summary>
            Pushes a location onto the location stack for the context.
            </summary>
            <param name="schemaLocation">The location in the schema to push.</param>
            <returns>The context updated with the given location.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.PushDocumentProperty(System.String,System.String)">
            <summary>
            Pushes a location onto the location stack for the context.
            </summary>
            <param name="propertiesMapName">The name of the properties map containing the property name to be validated, in the schema.</param>
            <param name="propertyName">The property name to push.</param>
            <returns>The context updated with the given location.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.PushDocumentArrayIndex(System.Int32)">
            <summary>
            Pushes a location onto the location stack for the context.
            </summary>
            <param name="arrayIndex">The array index to push.</param>
            <returns>The context updated with the given location.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.PushValidationLocationProperty(System.String)">
            <summary>
            Pushes a location onto the location stack for the context.
            </summary>
            <param name="propertyName">The property name to push.</param>
            <returns>The context updated with the given location.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.PushValidationLocationArrayIndex(System.Int32)">
            <summary>
            Pushes a location onto the location stack for the context.
            </summary>
            <param name="arrayIndex">The array index to push.</param>
            <returns>The context updated with the given location.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.PopLocation">
            <summary>
            Pops a location off the location stack.
            </summary>
            <returns>The updated context.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.CreateChildContext">
            <summary>
            Creates a child context from the current location.
            </summary>
            <returns>A new (valid) validation context with no evaluated items or properties, at the current location.</returns>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext@)">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="result1">The first result.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@)">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="result1">The first result.</param>
            <param name="result2">The second result.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@)">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="result1">The first result.</param>
            <param name="result2">The second result.</param>
            <param name="result3">The third result.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@)">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="result1">The first result.</param>
            <param name="result2">The second result.</param>
            <param name="result3">The third result.</param>
            <param name="result4">The fourth result.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@)">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="result1">The first result.</param>
            <param name="result2">The second result.</param>
            <param name="result3">The third result.</param>
            <param name="result4">The fourth result.</param>
            <param name="result5">The fifth result.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@)">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="result1">The first result.</param>
            <param name="result2">The second result.</param>
            <param name="result3">The third result.</param>
            <param name="result4">The fourth result.</param>
            <param name="result5">The fifth result.</param>
            <param name="result6">The sixth result.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@)">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="result1">The first result.</param>
            <param name="result2">The second result.</param>
            <param name="result3">The third result.</param>
            <param name="result4">The fourth result.</param>
            <param name="result5">The fifth result.</param>
            <param name="result6">The sixth result.</param>
            <param name="result7">The seventh result.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@,Corvus.Json.ValidationContext@)">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="result1">The first result.</param>
            <param name="result2">The second result.</param>
            <param name="result3">The third result.</param>
            <param name="result4">The fourth result.</param>
            <param name="result5">The fifth result.</param>
            <param name="result6">The sixth result.</param>
            <param name="result7">The seventh result.</param>
            <param name="result8">The eighth result.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.MergeResults(System.Boolean,Corvus.Json.ValidationLevel,Corvus.Json.ValidationContext[])">
            <summary>
            Merge the messages for a given set of results into this result,
            applying the given validity at the end, regardless of the individual
            validity of the results in the set.
            </summary>
            <param name="isValid">The ultimate validity of this context.</param>
            <param name="level">The current validation level for the context.</param>
            <param name="results">The array of results to merege.</param>
            <returns>The updated validation context.</returns>
            <remarks>
            <para>
            Unlike <see cref="M:Corvus.Json.ValidationContext.MergeChildContext(Corvus.Json.ValidationContext@,System.Boolean)"/>, which merges the elements
            that were visited, this simply takes the contextual messages from the children, adds them to this context,
            and sets the validity as per the <paramref name="isValid"/> parameter.
            </para>
            <para>
            This is typically used when one of a number of validations may be valid, and the ultimate result is some
            function of those child validations, but you wish to capture the details about the validation.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.ValidationContext.ApplyBits(System.Collections.Immutable.ImmutableArray{System.UInt64}.Builder,System.Collections.Immutable.ImmutableArray{System.UInt64}@)">
            <summary>
             Merges the bitfields representing the items we have seen in the array.
            </summary>
        </member>
        <member name="T:Corvus.Json.ValidationLevel">
            <summary>
            The validation level.
            </summary>
        </member>
        <member name="F:Corvus.Json.ValidationLevel.Flag">
            <summary>
            10.4.1. Flag.
            </summary>
        </member>
        <member name="F:Corvus.Json.ValidationLevel.Basic">
            <summary>
            10.4.2. Basic.
            </summary>
        </member>
        <member name="F:Corvus.Json.ValidationLevel.Detailed">
            <summary>
            10.4.3. Detailed.
            </summary>
        </member>
        <member name="F:Corvus.Json.ValidationLevel.Verbose">
            <summary>
            10.4.4. Verbose.
            </summary>
        </member>
        <member name="T:Corvus.Json.ValidationResult">
            <summary>
            A validation result.
            </summary>
        </member>
        <member name="M:Corvus.Json.ValidationResult.#ctor(System.Boolean,System.String,System.Nullable{System.ValueTuple{Corvus.Json.JsonReference,Corvus.Json.JsonReference,Corvus.Json.JsonReference}})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.ValidationResult"/> struct.
            </summary>
            <param name="valid">A value indicating whether this is a valid result.</param>
            <param name="message">The error message.</param>
            <param name="location">The location of the result.</param>
        </member>
        <member name="P:Corvus.Json.ValidationResult.Valid">
            <summary>
            Gets a value indicating whether the item was valid.
            </summary>
        </member>
        <member name="P:Corvus.Json.ValidationResult.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Corvus.Json.ValidationResult.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="M:Corvus.Json.ValidationResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Json.Visitor.JsonTransformingVisitor">
            <summary>
            A type which allows you to transform an existing tree.
            </summary>
        </member>
        <member name="T:Corvus.Json.Visitor.JsonTransformingVisitor.Visitor">
            <summary>
            A delegate for a visitor to the tree.
            </summary>
            <param name="path">The path visited.</param>
            <param name="nodeToVisit">The node to visit.</param>
            <param name="result">The result of the visit.</param>
        </member>
        <member name="M:Corvus.Json.Visitor.JsonTransformingVisitor.Visit``1(``0,Corvus.Json.Visitor.JsonTransformingVisitor.Visitor@,Corvus.Json.JsonAny@)">
            <summary>
            Walk the tree, optionally transforming nodes.
            </summary>
            <typeparam name="T">The type of the root node.</typeparam>
            <param name="root">The root of the tree to walk.</param>
            <param name="visitor">The method to apply to each node.</param>
            <param name="result">The result of the transformation.</param>
            <returns>The transformed tree.</returns>
        </member>
        <member name="T:Corvus.Json.Visitor.Transformed">
            <summary>
            Used by <see cref="T:Corvus.Json.Visitor.VisitResult"/> to determine whether the node has been transformed or not.
            </summary>
        </member>
        <member name="F:Corvus.Json.Visitor.Transformed.No">
            <summary>
            The node was not transformed.
            </summary>
        </member>
        <member name="F:Corvus.Json.Visitor.Transformed.Yes">
            <summary>
            The node was transformed.
            </summary>
        </member>
        <member name="T:Corvus.Json.Visitor.VisitResult">
            <summary>
            Records the result of visiting the node.
            </summary>
        </member>
        <member name="M:Corvus.Json.Visitor.VisitResult.#ctor(Corvus.Json.JsonAny,Corvus.Json.Visitor.Transformed,Corvus.Json.Visitor.Walk)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.Visitor.VisitResult"/> struct.
            </summary>
            <param name="output">The output from visiting the node. This will be the original node if <see cref="P:Corvus.Json.Visitor.VisitResult.IsTransformed"/> is <c>false</c>.</param>
            <param name="transformed">Indicates whether the node was transformed or not.</param>
            <param name="walk">The action for the parent to take after visiting this node.</param>
        </member>
        <member name="P:Corvus.Json.Visitor.VisitResult.IsTransformed">
            <summary>
            Gets a value indicating whether the node was transformed.
            </summary>
        </member>
        <member name="P:Corvus.Json.Visitor.VisitResult.Output">
            <summary>
            Gets or sets the result of performing the operation.
            </summary>
        </member>
        <member name="P:Corvus.Json.Visitor.VisitResult.Transformed">
            <summary>
            Gets or sets a value indicating whether the node was transformed.
            </summary>
        </member>
        <member name="P:Corvus.Json.Visitor.VisitResult.Walk">
            <summary>
            Gets or sets a value indicating whether to continue the walk.
            </summary>
        </member>
        <member name="T:Corvus.Json.Visitor.Walk">
            <summary>
            Used by <see cref="T:Corvus.Json.Visitor.VisitResult"/> to determine what action should be taken after visiting a node.
            </summary>
        </member>
        <member name="F:Corvus.Json.Visitor.Walk.Continue">
            <summary>
            Continue to iterate into the children of this node, if present or move to the next available sibling.
            </summary>
        </member>
        <member name="F:Corvus.Json.Visitor.Walk.SkipChildren">
            <summary>
            Skip the children of this node, and move to the next sibling.
            </summary>
        </member>
        <member name="F:Corvus.Json.Visitor.Walk.RemoveAndContinue">
            <summary>
            Remove this node, and continue.
            </summary>
            <remarks>
            You are expected to set the result to an entity with <see cref="F:System.Text.Json.JsonValueKind.Undefined"/>
            when specifying a remove.
            </remarks>
        </member>
        <member name="F:Corvus.Json.Visitor.Walk.TerminateAtThisNodeAndKeepChanges">
            <summary>
            Terminate the walk at this node, but keep any changes (including changes made to this node if indicated in the result.)
            </summary>
        </member>
        <member name="F:Corvus.Json.Visitor.Walk.TerminateAtThisNodeAndAbandonAllChanges">
            <summary>
            Terminate the walk at this node, and abandon any changes that have been made.
            </summary>
        </member>
        <member name="T:NodaTime.CalendarOrdinal">
            <summary>
            Enumeration of calendar ordinal values. Used for converting between a compact integer representation and a calendar system.
            We use 6 bits to store the calendar ordinal in YearMonthDayCalendar, so we can have up to 64 calendars.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.GJYearMonthDayCalculator.GenerateTotalDaysByMonth(System.Int32[])">
            <summary>
            Produces an array with "the sum of the elements of <paramref name="monthLengths"/> before the corresponding index".
            So for an input of [0, 1, 2, 3, 4, 5] this would produce [0, 0, 1, 3, 6, 10].
            </summary>
        </member>
        <member name="T:NodaTime.Calendars.RegularYearMonthDayCalculator">
            <summary>
            Subclass of YearMonthDayCalculator for calendars with the following attributes:
            <list type="bullet">
            <item>A fixed number of months</item>
            <item>Occasional leap years which are always 1 day longer than non-leap years</item>
            <item>The year starting with month 1, day 1 (i.e. naive YearMonthDay comparisons work)</item>
            </list>
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.RegularYearMonthDayCalculator.SetYear(NodaTime.YearMonthDay,System.Int32)">
            <summary>
            Implements a simple year-setting policy, truncating the day
            if necessary.
            </summary>
        </member>
        <member name="T:NodaTime.Calendars.YearMonthDayCalculator">
            <summary>
            The core of date calculations in Noda Time. This class *only* cares about absolute years, and only
            dates - it has no time aspects at all, nor era-related aspects.
            </summary>
        </member>
        <member name="F:NodaTime.Calendars.YearMonthDayCalculator.yearCache">
            <summary>
            Cache to speed up working out when a particular year starts.
            See the <see cref="T:NodaTime.Calendars.YearStartCacheEntry"/> documentation and <see cref="M:NodaTime.Calendars.YearMonthDayCalculator.GetStartOfYearInDays(System.Int32)"/>
            for more details.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.GetDaysFromStartOfYearToStartOfMonth(System.Int32,System.Int32)">
            <summary>
            Returns the number of days from the start of the given year to the start of the given month.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.CalculateStartOfYearDays(System.Int32)">
            <summary>
            Compute the start of the given year in days since 1970-01-01 ISO. The year may be outside
            the bounds advertised by the calendar, but only by a single year. This method is only
            called by <see cref="M:NodaTime.Calendars.YearMonthDayCalculator.GetStartOfYearInDays(System.Int32)"/> (unless the calendar chooses to call it itself),
            so calendars which override that method and don't call the original implementation may leave
            this unimplemented (e.g. by throwing an exception if it's ever called).
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.GetDaysInYear(System.Int32)">
            <summary>
            Returns the number of days in the given year, which will always be within 1 year of
            the valid range for the calculator.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.MonthsBetween(NodaTime.YearMonthDay,NodaTime.YearMonthDay)">
            <summary>
            Find the months between <paramref name="start"/> and <paramref name="end"/>.
            (If start is earlier than end, the result will be non-negative.)
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.SetYear(NodaTime.YearMonthDay,System.Int32)">
            <summary>
            Adjusts the given YearMonthDay to the specified year, potentially adjusting
            other fields as required.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.GetDaysSinceEpoch(NodaTime.YearMonthDay)">
            <summary>
            Computes the days since the Unix epoch at the start of the given year/month/day.
            This is the opposite of <see cref="M:NodaTime.Calendars.YearMonthDayCalculator.GetYearMonthDay(System.Int32)"/>.
            This assumes the parameter have been validated previously.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.GetStartOfYearInDays(System.Int32)">
            <summary>
            Fetches the start of the year (in days since 1970-01-01 ISO) from the cache, or calculates
            and caches it.
            </summary>
            <param name="year">The year to fetch the days at the start of. This must be within 1 year of the min/max
            range, but can exceed it to make week-year calculations simple.</param>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.Compare(NodaTime.YearMonthDay,NodaTime.YearMonthDay)">
            <summary>
            Compares two YearMonthDay values according to the rules of this calendar.
            The default implementation simply uses a naive comparison of the values,
            as this is suitable for most calendars (where the first month of the year is month 1).
            </summary>
            <remarks>Although the parameters are trusted (as in, they'll be valid in this calendar),
            the method being public isn't a problem - this type is never exposed.</remarks>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.GetDayOfYear(NodaTime.YearMonthDay)">
            <summary>
            Converts from a YearMonthDay representation to "day of year".
            This assumes the parameter have been validated previously.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.GetYearMonthDay(System.Int32)">
            <summary>
            Works out the year/month/day of a given days-since-epoch by first computing the year and day of year,
            then getting the month and day from those two. This is how almost all calendars are naturally implemented
            anyway.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearMonthDayCalculator.GetYear(System.Int32,System.Int32@)">
            <summary>
            Work out the year from the number of days since the epoch, as well as the
            day of that year (0-based).
            </summary>
        </member>
        <member name="T:NodaTime.Calendars.YearStartCacheEntry">
            <summary>
            Type containing as much logic as possible for how the cache of "start of year" data works.
            As of Noda Time 1.3, this is not specific to YearMonthDayCalculator - it can be used for
            other frames of reference, so long as they comply with the restrictions listed below.
            </summary>
            <remarks>
            <para>
            Each entry in the cache is a 32-bit number. The "value" part of the entry consists of the
            number of days since the Unix epoch (negative for a value before the epoch). As Noda Time
            only supports a number of ticks since the Unix epoch of between long.MinValue and long.MaxValue,
            we only need to support a number of days in the range
            [long.MinValue / TicksPerDay, long.MaxValue / TicksPerDay] which is [-10675200, 10675200] (rounding
            away from 0). This value can be stored in 25 bits.
            </para>
            <para>
            The remaining 7 bits of the value are used for validation. For any given year, the bottom
            10 bits are used as the index into the cache (which is an array). The next 7 most significant
            bits are stored in the entry. So long as we have fewer than 17 significant bits in the year value,
            this will be a unique combination. A single validation value (the most highly positive value) is
            reserved to indicate an invalid entry. The cache is initialized with all entries invalid.
            This gives us a range of year numbers greater than [-60000, 60000] without any risk of collisions. By
            contrast, the ISO calendar years are in the range [-27255, 31195] - so we'd have to be dealing with a
            calendar with either very short years, or an epoch a long way ahead or behind the Unix epoch.
            </para>
            <para>
            The fact that each cache entry is only 32 bits means that we can safely use the cache from multiple
            threads without locking. 32-bit aligned values are guaranteed to be accessed atomically, so we know we'll
            never get the value for one year with the validation bits for another, for example.
            </para>
            </remarks>
        </member>
        <member name="F:NodaTime.Calendars.YearStartCacheEntry.Invalid">
            <summary>
            Entry which is guaranteed to be obviously invalid for any real date, by having
            a validation value which is larger than any valid year number.
            </summary>
        </member>
        <member name="F:NodaTime.Calendars.YearStartCacheEntry.value">
            <summary>
            Entry value: most significant 25 bits are the number of days (e.g. since the Unix epoch); remaining 7 bits are
            the validator.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearStartCacheEntry.GetValidator(System.Int32)">
            <summary>
            Returns the validator to use for a given year, a non-negative number containing at most
            EntryValidationBits bits.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearStartCacheEntry.GetCacheIndex(System.Int32)">
            <summary>
            Returns the cache index, in [0, CacheSize), that should be used to store the given year's cache entry.
            </summary>
        </member>
        <member name="M:NodaTime.Calendars.YearStartCacheEntry.IsValidForYear(System.Int32)">
            <summary>
            Returns whether this cache entry is valid for the given year, and so is safe to use.  (We assume that we
            have located this entry via the correct cache index.)
            </summary>
        </member>
        <member name="P:NodaTime.Calendars.YearStartCacheEntry.StartOfYearDays">
            <summary>
            Returns the (signed) number of days since the Unix epoch for the cache entry.
            </summary>
        </member>
        <member name="T:NodaTime.Text.ValueCursor">
            <summary>
            Provides a cursor over text being parsed. None of the methods in this class throw exceptions (unless
            there is a bug in Noda Time, in which case an exception is appropriate) and none of the methods
            have ref parameters indicating failures, unlike subclasses. This class is used as the basis for both
            value and pattern parsing, so can make no judgement about what's wrong (i.e. it wouldn't know what
            type of failure to indicate). Instead, methods return Boolean values to indicate success or failure.
            </summary>
        </member>
        <member name="F:NodaTime.Text.ValueCursor.Nul">
            <summary>
            A nul character. This character is not allowed in any parsable string and is used to
            indicate that the current character is not set.
            </summary>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance to parse the given value.
            </summary>
            <param name="value">The value on which to base the cursor.</param>
        </member>
        <member name="P:NodaTime.Text.ValueCursor.Length">
            <summary>
            Gets the length of the string being parsed.
            </summary>
        </member>
        <member name="P:NodaTime.Text.ValueCursor.Value">
            <summary>
            Gets the string being parsed.
            </summary>
        </member>
        <member name="P:NodaTime.Text.ValueCursor.Current">
            <summary>
            Gets the current character.
            </summary>
        </member>
        <member name="P:NodaTime.Text.ValueCursor.HasMoreCharacters">
            <summary>
            Gets a value indicating whether this instance has more characters.
            </summary>
            <value>
            <c>true</c> if this instance has more characters; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NodaTime.Text.ValueCursor.Index">
            <summary>
            Gets the current index into the string being parsed.
            </summary>
        </member>
        <member name="P:NodaTime.Text.ValueCursor.Remainder">
            <summary>
            Gets the remainder the string that has not been parsed yet.
            </summary>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.PeekNext">
            <summary>
            Peek the next character.
            </summary>
            <returns>Returns the next character if there is one or <see cref="F:NodaTime.Text.ValueCursor.Nul" /> if there isn't.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.Move(System.Int32)">
            <summary>
            Moves the specified target index. If the new index is out of range of the valid indices
            for this string then the index is set to the beginning or the end of the string whichever
            is nearest the requested index.
            </summary>
            <param name="targetIndex">Index of the target.</param>
            <returns><c>true</c> if the requested index is in range.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.MoveNext">
            <summary>
            Moves to the next character.
            </summary>
            <returns><c>true</c> if the requested index is in range.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.MovePrevious">
            <summary>
            Moves to the previous character.
            </summary>
            <returns><c>true</c> if the requested index is in range.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.Match(System.Char)">
            <summary>
              Attempts to match the specified character with the current character of the string. If the
              character matches then the index is moved passed the character.
            </summary>
            <param name="character">The character to match.</param>
            <returns><c>true</c> if the character matches.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.Match(System.ReadOnlySpan{System.Char})">
            <summary>
            Attempts to match the specified string with the current point in the string. If the
            character matches then the index is moved past the string.
            </summary>
            <param name="match">The string to match.</param>
            <returns><c>true</c> if the string matches.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.MatchCaseInsensitive(System.ReadOnlySpan{System.Char},System.Globalization.CompareInfo,System.Boolean)">
            <summary>
            Attempts to match the specified string with the current point in the string in a case-insensitive
            manner, according to the given comparison info. The cursor is optionally updated to the end of the match.
            </summary>
            <param name="match">The value to match.</param>
            <param name="compareInfo">The comparison type to use.</param>
            <param name="moveOnSuccess">If <see langword="true"/>, advance <see cref="P:NodaTime.Text.ValueCursor.Index"/> on success.</param>
            <returns><c>True</c> if there is a case-insensitive match.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.CompareOrdinal(System.ReadOnlySpan{System.Char})">
            <summary>
            Compares the value from the current cursor position with the given match. If the
            given match string is longer than the remaining length, the comparison still goes
            ahead but the result is never 0: if the result of comparing to the end of the
            value returns 0, the result is -1 to indicate that the value is earlier than the given match.
            Conversely, if the remaining value is longer than the match string, the comparison only
            goes as far as the end of the match. So "xabcd" with the cursor at "a" will return 0 when
            matched with "abc".
            </summary>
            <param name="match">The value with which to match.</param>
            <returns>A negative number if the value (from the current cursor position) is lexicographically
            earlier than the given match string; 0 if they are equal (as far as the end of the match) and
            a positive number if the value is lexicographically later than the given match string.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.ParseInt64(System.Int64@)">
            <summary>
            Parses digits at the current point in the string as a signed 64-bit integer value.
            Currently this method only supports cultures whose negative sign is "-" (and
            using ASCII digits).
            </summary>
            <param name="result">The result integer value. The value of this is not guaranteed
            to be anything specific if the return value is non-null.</param>
            <returns><see langword="true"/> if the value was parsed successfully.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.ParseInt64Digits(System.Int32,System.Int32,System.Int64@)">
            <summary>
            Parses digits at the current point in the string, as an <see cref="T:System.Int64"/> value.
            If the minimum required
            digits are not present then the index is unchanged. If there are more digits than
            the maximum allowed they are ignored.
            </summary>
            <param name="minimumDigits">The minimum allowed digits.</param>
            <param name="maximumDigits">The maximum allowed digits.</param>
            <param name="result">The result integer value. The value of this is not guaranteed
            to be anything specific if the return value is false.</param>
            <returns><c>true</c> if the digits were parsed.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.ParseDigits(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Parses digits at the current point in the string. If the minimum required
            digits are not present then the index is unchanged. If there are more digits than
            the maximum allowed they are ignored.
            </summary>
            <param name="minimumDigits">The minimum allowed digits.</param>
            <param name="maximumDigits">The maximum allowed digits.</param>
            <param name="result">The result integer value. The value of this is not guaranteed
            to be anything specific if the return value is false.</param>
            <returns><c>true</c> if the digits were parsed.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.ParseFraction(System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Parses digits at the current point in the string as a fractional value.
            </summary>
            <param name="maximumDigits">The maximum allowed digits. Trusted to be less than or equal to scale.</param>
            <param name="scale">The scale of the fractional value.</param>
            <param name="result">The result value scaled by scale. The value of this is not guaranteed
            to be anything specific if the return value is false.</param>
            <param name="minimumDigits">The minimum number of digits that must be specified in the value.</param>
            <returns><c>true</c> if the digits were parsed.</returns>
        </member>
        <member name="M:NodaTime.Text.ValueCursor.GetDigit">
            <summary>
            Gets the integer value of the current digit character, or -1 for "not a digit".
            </summary>
            <remarks>
            This currently only handles ASCII digits, which is all we have to parse to stay in line with the BCL.
            </remarks>
        </member>
        <member name="T:NodaTime.YearMonthDay">
            <summary>
            A compact representation of a year, month and day in a single 32-bit integer. 
            </summary>
            <remarks>
            <para>
            See <see cref="T:NodaTime.YearMonthDayCalendar"/> for the number of bits per component,
            but this doesn't have the calendar component, so bit 0 is part of the day value.
            This type is naive: comparisons are performed assuming that a larger month number
            always comes after a smaller month number, etc.
            This is suitable for most, but not all, calendar systems.
            </para>
            <para>
            The internal representation actually uses 0 for 1 (etc) for each component.
            That means the default value is 0001-01-01, which is reasonable for all
            supported calendars.
            </para>
            </remarks>
        </member>
        <member name="M:NodaTime.YearMonthDay.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new value for the given year, month and day. No validation is performed.
            </summary>
        </member>
        <member name="T:NodaTime.YearMonthDayCalendar">
            <summary>
            A compact representation of a year, month and day and calendar ordinal (integer ID) in a single 32-bit integer. 
            </summary>
            <remarks>
            <para>
            The calendar is represented in bits 0-5.
            The day is represented in bits 6-11.
            The month is represented in bits 12-16.
            The year is represented in bits 17-31. (It's convenient to put this at the top as it can be negative.)
            
            This type does not implement IComparable[YearMonthDayCalendar] as it turns out it doesn't need to:
            comparisons are always done through the calendar system, which uses YearMonthDay instead. We could potentially
            optimize by bypassing the calendar and embedding knowledge of calendars which have "odd" month numberings
            in here, but it would be a bit of a design smell.
            
            Equality is easily tested, however, as it can check for calendar equality.
            </para>
            <para>
            The internal representation actually uses 0 for 1 (etc) for each component.
            That means the default value is 0001-01-01, which is reasonable for all
            supported calendars.
            </para>
            </remarks>
        </member>
        <member name="M:NodaTime.YearMonthDayCalendar.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarOrdinal)">
            <summary>
            Constructs a new value for the given year, month, day and calendar. No validation is performed.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmptyRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmptyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmptyRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmptyRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmptyRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmptyRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmptyRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmptyRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmptyRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateIpV4Pattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIpV4Pattern_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateZoneIdExpression method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateZoneIdExpression_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateEmailPattern_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateEmailPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateEmailPattern_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateEmailPattern_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateEmailPattern_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateEmailPattern_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateEmailPattern_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateEmailPattern_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateEmailPattern_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateEmailPattern_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateDurationPattern_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateDurationPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateDurationPattern_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateDurationPattern_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateDurationPattern_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateDurationPattern_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateDurationPattern_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateDurationPattern_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateDurationPattern_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateDurationPattern_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateHostnamePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateHostnamePattern_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateInvalidIdnHostNamePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateInvalidIdnHostNamePattern_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateUriTemplatePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUriTemplatePattern_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateUuidTemplatePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateUuidTemplatePattern_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateJsonPointerPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonPointerPattern_9.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateJsonRelativePointerPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateJsonRelativePointerPattern_10.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateIdnEmailReplacePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailReplacePattern_11.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CreateIdnEmailMatchPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CreateIdnEmailMatchPattern_12.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsBoundary(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>Determines whether the specified index is a boundary.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF0300000000FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_FAACFFA3000000C0FFFFFF7F">
            <summary>Supports searching for characters in or not in "!#$%&amp;'*+-/0123456789=?^_`abcdefghijklmnopqrstuvwxyz{|}~".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_FF0300000000FEFFFF07">
            <summary>Supports searching for characters in or not in "0123456789abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
